{"version":3,"file":"hls.worker.js.map","sources":["src/events.ts","src/errors.ts","src/crypt/aes-crypto.ts","src/crypt/fast-aes-key.ts","src/utils/typed-array.ts","src/crypt/aes-decryptor.ts","src/utils/logger.ts","src/polyfills/number.ts","node_modules/url-toolkit/src/url-toolkit.js","src/loader/fragment.ts","src/demux/id3.ts","src/utils/hex.ts","src/utils/mp4-tools.ts","src/crypt/decrypter.ts","src/types/demuxer.ts","src/demux/dummy-demuxed-track.ts","src/demux/base-audio-demuxer.ts","src/demux/adts.ts","src/demux/aacdemuxer.ts","src/demux/mp4demuxer.ts","src/demux/mpegaudio.ts","src/demux/exp-golomb.ts","src/demux/sample-aes.ts","src/demux/tsdemuxer.ts","src/demux/mp3demuxer.ts","src/remux/aac-helper.ts","src/remux/mp4-generator.ts","src/types/loader.ts","src/utils/timescale-conversion.ts","src/remux/mp4-remuxer.ts","src/demux/transmuxer.ts","src/remux/passthrough-remuxer.ts","node_modules/eventemitter3/index.js","src/demux/transmuxer-worker.ts"],"sourcesContent":["import {\n  ManifestLoadedData,\n  ManifestLoadingData,\n  MediaAttachedData,\n  MediaAttachingData,\n  LevelLoadingData,\n  LevelLoadedData,\n  ManifestParsedData,\n  LevelUpdatedData,\n  LevelsUpdatedData,\n  FragParsingUserdataData,\n  FragDecryptedData,\n  FragLoadedData,\n  InitPTSFoundData,\n  CuesParsedData,\n  SubtitleFragProcessedData,\n  NonNativeTextTracksData,\n  FragLoadingData,\n  AudioTrackLoadedData,\n  SubtitleTrackLoadedData,\n  ErrorData,\n  AudioTrackSwitchingData,\n  AudioTrackSwitchedData,\n  KeyLoadedData,\n  KeyLoadingData,\n  SubtitleTrackSwitchData,\n  SubtitleTracksUpdatedData,\n  LevelSwitchedData,\n  FragChangedData,\n  BufferAppendingData,\n  BufferCodecsData,\n  FragParsingMetadataData,\n  FragParsingInitSegmentData,\n  FragBufferedData,\n  BufferFlushingData,\n  BufferEOSData,\n  LevelSwitchingData,\n  FPSDropLevelCappingData,\n  FPSDropData,\n  BufferCreatedData,\n  BufferAppendedData,\n  LevelPTSUpdatedData,\n  FragParsedData,\n  AudioTracksUpdatedData,\n  FragLoadEmergencyAbortedData,\n  BackBufferData,\n  LiveBackBufferData,\n  TrackLoadingData,\n  BufferFlushedData,\n} from './types/events';\n\nexport enum Events {\n  // Fired before MediaSource is attaching to media element\n  MEDIA_ATTACHING = 'hlsMediaAttaching',\n  // Fired when MediaSource has been successfully attached to media element\n  MEDIA_ATTACHED = 'hlsMediaAttached',\n  // Fired before detaching MediaSource from media element\n  MEDIA_DETACHING = 'hlsMediaDetaching',\n  // Fired when MediaSource has been detached from media element\n  MEDIA_DETACHED = 'hlsMediaDetached',\n  // Fired when the buffer is going to be reset\n  BUFFER_RESET = 'hlsBufferReset',\n  // Fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}\n  BUFFER_CODECS = 'hlsBufferCodecs',\n  // fired when sourcebuffers have been created - data: { tracks : tracks }\n  BUFFER_CREATED = 'hlsBufferCreated',\n  // fired when we append a segment to the buffer - data: { segment: segment object }\n  BUFFER_APPENDING = 'hlsBufferAppending',\n  // fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}\n  BUFFER_APPENDED = 'hlsBufferAppended',\n  // fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }\n  BUFFER_EOS = 'hlsBufferEos',\n  // fired when the media buffer should be flushed - data { startOffset, endOffset }\n  BUFFER_FLUSHING = 'hlsBufferFlushing',\n  // fired when the media buffer has been flushed - data: { }\n  BUFFER_FLUSHED = 'hlsBufferFlushed',\n  // fired to signal that a manifest loading starts - data: { url : manifestURL}\n  MANIFEST_LOADING = 'hlsManifestLoading',\n  // fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks ], url : manifestURL, stats : LoaderStats }\n  MANIFEST_LOADED = 'hlsManifestLoaded',\n  // fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}\n  MANIFEST_PARSED = 'hlsManifestParsed',\n  // fired when a level switch is requested - data: { level : id of new level }\n  LEVEL_SWITCHING = 'hlsLevelSwitching',\n  // fired when a level switch is effective - data: { level : id of new level }\n  LEVEL_SWITCHED = 'hlsLevelSwitched',\n  // fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}\n  LEVEL_LOADING = 'hlsLevelLoading',\n  // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : LoaderStats }\n  LEVEL_LOADED = 'hlsLevelLoaded',\n  // fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }\n  LEVEL_UPDATED = 'hlsLevelUpdated',\n  // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }\n  LEVEL_PTS_UPDATED = 'hlsLevelPtsUpdated',\n  // fired to notify that levels have changed after removing a level - data: { levels : [available quality levels] }\n  LEVELS_UPDATED = 'hlsLevelsUpdated',\n  // fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }\n  AUDIO_TRACKS_UPDATED = 'hlsAudioTracksUpdated',\n  // fired when an audio track switching is requested - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHING = 'hlsAudioTrackSwitching',\n  // fired when an audio track switch actually occurs - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHED = 'hlsAudioTrackSwitched',\n  // fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }\n  AUDIO_TRACK_LOADING = 'hlsAudioTrackLoading',\n  // fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : LoaderStats }\n  AUDIO_TRACK_LOADED = 'hlsAudioTrackLoaded',\n  // fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }\n  SUBTITLE_TRACKS_UPDATED = 'hlsSubtitleTracksUpdated',\n  // fired to notify that subtitle tracks were cleared as a result of stopping the media\n  SUBTITLE_TRACKS_CLEARED = 'hlsSubtitleTracksCleared',\n  // fired when an subtitle track switch occurs - data: { id : subtitle track id }\n  SUBTITLE_TRACK_SWITCH = 'hlsSubtitleTrackSwitch',\n  // fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }\n  SUBTITLE_TRACK_LOADING = 'hlsSubtitleTrackLoading',\n  // fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : LoaderStats }\n  SUBTITLE_TRACK_LOADED = 'hlsSubtitleTrackLoaded',\n  // fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }\n  SUBTITLE_FRAG_PROCESSED = 'hlsSubtitleFragProcessed',\n  // fired when a set of VTTCues to be managed externally has been parsed - data: { type: string, track: string, cues: [ VTTCue ] }\n  CUES_PARSED = 'hlsCuesParsed',\n  // fired when a text track to be managed externally is found - data: { tracks: [ { label: string, kind: string, default: boolean } ] }\n  NON_NATIVE_TEXT_TRACKS_FOUND = 'hlsNonNativeTextTracksFound',\n  // fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, timescale: timescale, frag : fragment object }\n  INIT_PTS_FOUND = 'hlsInitPtsFound',\n  // fired when a fragment loading starts - data: { frag : fragment object }\n  FRAG_LOADING = 'hlsFragLoading',\n  // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }\n  // FRAG_LOAD_PROGRESS = 'hlsFragLoadProgress',\n  // Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }\n  FRAG_LOAD_EMERGENCY_ABORTED = 'hlsFragLoadEmergencyAborted',\n  // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : LoaderStats }\n  FRAG_LOADED = 'hlsFragLoaded',\n  // fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, payload : fragment payload, stats : { tstart, tdecrypt } }\n  FRAG_DECRYPTED = 'hlsFragDecrypted',\n  // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }\n  FRAG_PARSING_INIT_SEGMENT = 'hlsFragParsingInitSegment',\n  // fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }\n  FRAG_PARSING_USERDATA = 'hlsFragParsingUserdata',\n  // fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }\n  FRAG_PARSING_METADATA = 'hlsFragParsingMetadata',\n  // fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}\n  // FRAG_PARSING_DATA = 'hlsFragParsingData',\n  // fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }\n  FRAG_PARSED = 'hlsFragParsed',\n  // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : LoaderStats }\n  FRAG_BUFFERED = 'hlsFragBuffered',\n  // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }\n  FRAG_CHANGED = 'hlsFragChanged',\n  // Identifier for a FPS drop event - data: { currentDropped, currentDecoded, totalDroppedFrames }\n  FPS_DROP = 'hlsFpsDrop',\n  // triggered when FPS drop triggers auto level capping - data: { level, droppedLevel }\n  FPS_DROP_LEVEL_CAPPING = 'hlsFpsDropLevelCapping',\n  // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }\n  ERROR = 'hlsError',\n  // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }\n  DESTROYING = 'hlsDestroying',\n  // fired when a decrypt key loading starts - data: { frag : fragment object }\n  KEY_LOADING = 'hlsKeyLoading',\n  // fired when a decrypt key loading is completed - data: { frag : fragment object, keyInfo : KeyLoaderInfo }\n  KEY_LOADED = 'hlsKeyLoaded',\n  // deprecated; please use BACK_BUFFER_REACHED - data : { bufferEnd: number }\n  LIVE_BACK_BUFFER_REACHED = 'hlsLiveBackBufferReached',\n  // fired when the back buffer is reached as defined by the backBufferLength config option - data : { bufferEnd: number }\n  BACK_BUFFER_REACHED = 'hlsBackBufferReached',\n}\n\n/**\n * Defines each Event type and payload by Event name. Used in {@link hls.js#HlsEventEmitter} to strongly type the event listener API.\n */\nexport interface HlsListeners {\n  [Events.MEDIA_ATTACHING]: (\n    event: Events.MEDIA_ATTACHING,\n    data: MediaAttachingData\n  ) => void;\n  [Events.MEDIA_ATTACHED]: (\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachedData\n  ) => void;\n  [Events.MEDIA_DETACHING]: (event: Events.MEDIA_DETACHING) => void;\n  [Events.MEDIA_DETACHED]: (event: Events.MEDIA_DETACHED) => void;\n  [Events.BUFFER_RESET]: (event: Events.BUFFER_RESET) => void;\n  [Events.BUFFER_CODECS]: (\n    event: Events.BUFFER_CODECS,\n    data: BufferCodecsData\n  ) => void;\n  [Events.BUFFER_CREATED]: (\n    event: Events.BUFFER_CREATED,\n    data: BufferCreatedData\n  ) => void;\n  [Events.BUFFER_APPENDING]: (\n    event: Events.BUFFER_APPENDING,\n    data: BufferAppendingData\n  ) => void;\n  [Events.BUFFER_APPENDED]: (\n    event: Events.BUFFER_APPENDED,\n    data: BufferAppendedData\n  ) => void;\n  [Events.BUFFER_EOS]: (event: Events.BUFFER_EOS, data: BufferEOSData) => void;\n  [Events.BUFFER_FLUSHING]: (\n    event: Events.BUFFER_FLUSHING,\n    data: BufferFlushingData\n  ) => void;\n  [Events.BUFFER_FLUSHED]: (\n    event: Events.BUFFER_FLUSHED,\n    data: BufferFlushedData\n  ) => void;\n  [Events.MANIFEST_LOADING]: (\n    event: Events.MANIFEST_LOADING,\n    data: ManifestLoadingData\n  ) => void;\n  [Events.MANIFEST_LOADED]: (\n    event: Events.MANIFEST_LOADED,\n    data: ManifestLoadedData\n  ) => void;\n  [Events.MANIFEST_PARSED]: (\n    event: Events.MANIFEST_PARSED,\n    data: ManifestParsedData\n  ) => void;\n  [Events.LEVEL_SWITCHING]: (\n    event: Events.LEVEL_SWITCHING,\n    data: LevelSwitchingData\n  ) => void;\n  [Events.LEVEL_SWITCHED]: (\n    event: Events.LEVEL_SWITCHED,\n    data: LevelSwitchedData\n  ) => void;\n  [Events.LEVEL_LOADING]: (\n    event: Events.LEVEL_LOADING,\n    data: LevelLoadingData\n  ) => void;\n  [Events.LEVEL_LOADED]: (\n    event: Events.LEVEL_LOADED,\n    data: LevelLoadedData\n  ) => void;\n  [Events.LEVEL_UPDATED]: (\n    event: Events.LEVEL_UPDATED,\n    data: LevelUpdatedData\n  ) => void;\n  [Events.LEVEL_PTS_UPDATED]: (\n    event: Events.LEVEL_PTS_UPDATED,\n    data: LevelPTSUpdatedData\n  ) => void;\n  [Events.LEVELS_UPDATED]: (\n    event: Events.LEVELS_UPDATED,\n    data: LevelsUpdatedData\n  ) => void;\n  [Events.AUDIO_TRACKS_UPDATED]: (\n    event: Events.AUDIO_TRACKS_UPDATED,\n    data: AudioTracksUpdatedData\n  ) => void;\n  [Events.AUDIO_TRACK_SWITCHING]: (\n    event: Events.AUDIO_TRACK_SWITCHING,\n    data: AudioTrackSwitchingData\n  ) => void;\n  [Events.AUDIO_TRACK_SWITCHED]: (\n    event: Events.AUDIO_TRACK_SWITCHED,\n    data: AudioTrackSwitchedData\n  ) => void;\n  [Events.AUDIO_TRACK_LOADING]: (\n    event: Events.AUDIO_TRACK_LOADING,\n    data: TrackLoadingData\n  ) => void;\n  [Events.AUDIO_TRACK_LOADED]: (\n    event: Events.AUDIO_TRACK_LOADED,\n    data: AudioTrackLoadedData\n  ) => void;\n  [Events.SUBTITLE_TRACKS_UPDATED]: (\n    event: Events.SUBTITLE_TRACKS_UPDATED,\n    data: SubtitleTracksUpdatedData\n  ) => void;\n  [Events.SUBTITLE_TRACKS_CLEARED]: (\n    event: Events.SUBTITLE_TRACKS_CLEARED\n  ) => void;\n  [Events.SUBTITLE_TRACK_SWITCH]: (\n    event: Events.SUBTITLE_TRACK_SWITCH,\n    data: SubtitleTrackSwitchData\n  ) => void;\n  [Events.SUBTITLE_TRACK_LOADING]: (\n    event: Events.SUBTITLE_TRACK_LOADING,\n    data: TrackLoadingData\n  ) => void;\n  [Events.SUBTITLE_TRACK_LOADED]: (\n    event: Events.SUBTITLE_TRACK_LOADED,\n    data: SubtitleTrackLoadedData\n  ) => void;\n  [Events.SUBTITLE_FRAG_PROCESSED]: (\n    event: Events.SUBTITLE_FRAG_PROCESSED,\n    data: SubtitleFragProcessedData\n  ) => void;\n  [Events.CUES_PARSED]: (\n    event: Events.CUES_PARSED,\n    data: CuesParsedData\n  ) => void;\n  [Events.NON_NATIVE_TEXT_TRACKS_FOUND]: (\n    event: Events.NON_NATIVE_TEXT_TRACKS_FOUND,\n    data: NonNativeTextTracksData\n  ) => void;\n  [Events.INIT_PTS_FOUND]: (\n    event: Events.INIT_PTS_FOUND,\n    data: InitPTSFoundData\n  ) => void;\n  [Events.FRAG_LOADING]: (\n    event: Events.FRAG_LOADING,\n    data: FragLoadingData\n  ) => void;\n  // [Events.FRAG_LOAD_PROGRESS]: TodoEventType\n  [Events.FRAG_LOAD_EMERGENCY_ABORTED]: (\n    event: Events.FRAG_LOAD_EMERGENCY_ABORTED,\n    data: FragLoadEmergencyAbortedData\n  ) => void;\n  [Events.FRAG_LOADED]: (\n    event: Events.FRAG_LOADED,\n    data: FragLoadedData\n  ) => void;\n  [Events.FRAG_DECRYPTED]: (\n    event: Events.FRAG_DECRYPTED,\n    data: FragDecryptedData\n  ) => void;\n  [Events.FRAG_PARSING_INIT_SEGMENT]: (\n    event: Events.FRAG_PARSING_INIT_SEGMENT,\n    data: FragParsingInitSegmentData\n  ) => void;\n  [Events.FRAG_PARSING_USERDATA]: (\n    event: Events.FRAG_PARSING_USERDATA,\n    data: FragParsingUserdataData\n  ) => void;\n  [Events.FRAG_PARSING_METADATA]: (\n    event: Events.FRAG_PARSING_METADATA,\n    data: FragParsingMetadataData\n  ) => void;\n  // [Events.FRAG_PARSING_DATA]: TodoEventType\n  [Events.FRAG_PARSED]: (\n    event: Events.FRAG_PARSED,\n    data: FragParsedData\n  ) => void;\n  [Events.FRAG_BUFFERED]: (\n    event: Events.FRAG_BUFFERED,\n    data: FragBufferedData\n  ) => void;\n  [Events.FRAG_CHANGED]: (\n    event: Events.FRAG_CHANGED,\n    data: FragChangedData\n  ) => void;\n  [Events.FPS_DROP]: (event: Events.FPS_DROP, data: FPSDropData) => void;\n  [Events.FPS_DROP_LEVEL_CAPPING]: (\n    event: Events.FPS_DROP_LEVEL_CAPPING,\n    data: FPSDropLevelCappingData\n  ) => void;\n  [Events.ERROR]: (event: Events.ERROR, data: ErrorData) => void;\n  [Events.DESTROYING]: (event: Events.DESTROYING) => void;\n  [Events.KEY_LOADING]: (\n    event: Events.KEY_LOADING,\n    data: KeyLoadingData\n  ) => void;\n  [Events.KEY_LOADED]: (event: Events.KEY_LOADED, data: KeyLoadedData) => void;\n  [Events.LIVE_BACK_BUFFER_REACHED]: (\n    event: Events.LIVE_BACK_BUFFER_REACHED,\n    data: LiveBackBufferData\n  ) => void;\n  [Events.BACK_BUFFER_REACHED]: (\n    event: Events.BACK_BUFFER_REACHED,\n    data: BackBufferData\n  ) => void;\n}\nexport interface HlsEventEmitter {\n  on<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context?: Context\n  ): void;\n  once<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context?: Context\n  ): void;\n\n  removeAllListeners<E extends keyof HlsListeners>(event?: E): void;\n  off<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener?: HlsListeners[E],\n    context?: Context,\n    once?: boolean\n  ): void;\n\n  listeners<E extends keyof HlsListeners>(event: E): HlsListeners[E][];\n  emit<E extends keyof HlsListeners>(\n    event: E,\n    name: E,\n    eventObject: Parameters<HlsListeners[E]>[1]\n  ): boolean;\n  listenerCount<E extends keyof HlsListeners>(event: E): number;\n}\n","export enum ErrorTypes {\n  // Identifier for a network error (loading error / timeout ...)\n  NETWORK_ERROR = 'networkError',\n  // Identifier for a media Error (video/parsing/mediasource error)\n  MEDIA_ERROR = 'mediaError',\n  // EME (encrypted media extensions) errors\n  KEY_SYSTEM_ERROR = 'keySystemError',\n  // Identifier for a mux Error (demuxing/remuxing)\n  MUX_ERROR = 'muxError',\n  // Identifier for all other errors\n  OTHER_ERROR = 'otherError',\n}\n\nexport enum ErrorDetails {\n  KEY_SYSTEM_NO_KEYS = 'keySystemNoKeys',\n  KEY_SYSTEM_NO_ACCESS = 'keySystemNoAccess',\n  KEY_SYSTEM_NO_SESSION = 'keySystemNoSession',\n  KEY_SYSTEM_NO_CONFIGURED_LICENSE = 'keySystemNoConfiguredLicense',\n  KEY_SYSTEM_LICENSE_REQUEST_FAILED = 'keySystemLicenseRequestFailed',\n  KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED = 'keySystemServerCertificateRequestFailed',\n  KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED = 'keySystemServerCertificateUpdateFailed',\n  KEY_SYSTEM_SESSION_UPDATE_FAILED = 'keySystemSessionUpdateFailed',\n  KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED = 'keySystemStatusOutputRestricted',\n  KEY_SYSTEM_STATUS_INTERNAL_ERROR = 'keySystemStatusInternalError',\n  // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  MANIFEST_LOAD_ERROR = 'manifestLoadError',\n  // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  MANIFEST_LOAD_TIMEOUT = 'manifestLoadTimeOut',\n  // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_PARSING_ERROR = 'manifestParsingError',\n  // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_INCOMPATIBLE_CODECS_ERROR = 'manifestIncompatibleCodecsError',\n  // Identifier for a level which contains no fragments - data: { url: faulty URL, reason: \"no fragments found in level\", level: index of the bad level }\n  LEVEL_EMPTY_ERROR = 'levelEmptyError',\n  // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  LEVEL_LOAD_ERROR = 'levelLoadError',\n  // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  LEVEL_LOAD_TIMEOUT = 'levelLoadTimeOut',\n  // Identifier for a level parse error - data: { url : faulty URL, error: Error, reason: error message }\n  LEVEL_PARSING_ERROR = 'levelParsingError',\n  // Identifier for a level switch error - data: { level : faulty level Id, event : error description}\n  LEVEL_SWITCH_ERROR = 'levelSwitchError',\n  // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  AUDIO_TRACK_LOAD_ERROR = 'audioTrackLoadError',\n  // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  AUDIO_TRACK_LOAD_TIMEOUT = 'audioTrackLoadTimeOut',\n  // Identifier for a subtitle track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  SUBTITLE_LOAD_ERROR = 'subtitleTrackLoadError',\n  // Identifier for a subtitle track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  SUBTITLE_TRACK_LOAD_TIMEOUT = 'subtitleTrackLoadTimeOut',\n  // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n  FRAG_LOAD_ERROR = 'fragLoadError',\n  // Identifier for fragment load timeout error - data: { frag : fragment object}\n  FRAG_LOAD_TIMEOUT = 'fragLoadTimeOut',\n  // Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }\n  FRAG_DECRYPT_ERROR = 'fragDecryptError',\n  // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }\n  // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release\n  FRAG_PARSING_ERROR = 'fragParsingError',\n  // Identifier for a fragment or part load skipped because of a GAP tag or attribute\n  FRAG_GAP = 'fragGap',\n  // Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }\n  REMUX_ALLOC_ERROR = 'remuxAllocError',\n  // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n  KEY_LOAD_ERROR = 'keyLoadError',\n  // Identifier for decrypt key load timeout error - data: { frag : fragment object}\n  KEY_LOAD_TIMEOUT = 'keyLoadTimeOut',\n  // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : { error : exception , mimeType : mimeType }\n  BUFFER_ADD_CODEC_ERROR = 'bufferAddCodecError',\n  // Triggered when source buffer(s) could not be created using level (manifest CODECS attribute), parsed media, or best guess codec(s) - data: { reason : error reason }\n  BUFFER_INCOMPATIBLE_CODECS_ERROR = 'bufferIncompatibleCodecsError',\n  // Identifier for a buffer append error - data: append error description\n  BUFFER_APPEND_ERROR = 'bufferAppendError',\n  // Identifier for a buffer appending error event - data: appending error description\n  BUFFER_APPENDING_ERROR = 'bufferAppendingError',\n  // Identifier for a buffer stalled error event\n  BUFFER_STALLED_ERROR = 'bufferStalledError',\n  // Identifier for a buffer full event\n  BUFFER_FULL_ERROR = 'bufferFullError',\n  // Identifier for a buffer seek over hole event\n  BUFFER_SEEK_OVER_HOLE = 'bufferSeekOverHole',\n  // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)\n  BUFFER_NUDGE_ON_STALL = 'bufferNudgeOnStall',\n  // Identifier for an internal exception happening inside hls.js while handling an event\n  INTERNAL_EXCEPTION = 'internalException',\n  // Identifier for an internal call to abort a loader\n  INTERNAL_ABORTED = 'aborted',\n  // Uncategorized error\n  UNKNOWN = 'unknown',\n}\n","export default class AESCrypto {\n  private subtle: SubtleCrypto;\n  private aesIV: Uint8Array;\n\n  constructor(subtle: SubtleCrypto, iv: Uint8Array) {\n    this.subtle = subtle;\n    this.aesIV = iv;\n  }\n\n  decrypt(data: ArrayBuffer, key: CryptoKey) {\n    return this.subtle.decrypt({ name: 'AES-CBC', iv: this.aesIV }, key, data);\n  }\n}\n","export default class FastAESKey {\n  private subtle: any;\n  private key: ArrayBuffer;\n\n  constructor(subtle, key) {\n    this.subtle = subtle;\n    this.key = key;\n  }\n\n  expandKey() {\n    return this.subtle.importKey('raw', this.key, { name: 'AES-CBC' }, false, [\n      'encrypt',\n      'decrypt',\n    ]);\n  }\n}\n","export function sliceUint8(\n  array: Uint8Array,\n  start?: number,\n  end?: number\n): Uint8Array {\n  // @ts-expect-error This polyfills IE11 usage of Uint8Array slice.\n  // It always exists in the TypeScript definition so fails, but it fails at runtime on IE11.\n  return Uint8Array.prototype.slice\n    ? array.slice(start, end)\n    : new Uint8Array(Array.prototype.slice.call(array, start, end));\n}\n","import { sliceUint8 } from '../utils/typed-array';\n\n// PKCS7\nexport function removePadding(array: Uint8Array): Uint8Array {\n  const outputBytes = array.byteLength;\n  const paddingBytes =\n    outputBytes && new DataView(array.buffer).getUint8(outputBytes - 1);\n  if (paddingBytes) {\n    return sliceUint8(array, 0, outputBytes - paddingBytes);\n  }\n  return array;\n}\n\nexport default class AESDecryptor {\n  private rcon: Array<number> = [\n    0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,\n  ];\n  private subMix: Array<Uint32Array> = [\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n  ];\n  private invSubMix: Array<Uint32Array> = [\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n  ];\n  private sBox: Uint32Array = new Uint32Array(256);\n  private invSBox: Uint32Array = new Uint32Array(256);\n  private key: Uint32Array = new Uint32Array(0);\n\n  private ksRows: number = 0;\n  private keySize: number = 0;\n  private keySchedule!: Uint32Array;\n  private invKeySchedule!: Uint32Array;\n\n  constructor() {\n    this.initTable();\n  }\n\n  // Using view.getUint32() also swaps the byte order.\n  uint8ArrayToUint32Array_(arrayBuffer) {\n    const view = new DataView(arrayBuffer);\n    const newArray = new Uint32Array(4);\n    for (let i = 0; i < 4; i++) {\n      newArray[i] = view.getUint32(i * 4);\n    }\n\n    return newArray;\n  }\n\n  initTable() {\n    const sBox = this.sBox;\n    const invSBox = this.invSBox;\n    const subMix = this.subMix;\n    const subMix0 = subMix[0];\n    const subMix1 = subMix[1];\n    const subMix2 = subMix[2];\n    const subMix3 = subMix[3];\n    const invSubMix = this.invSubMix;\n    const invSubMix0 = invSubMix[0];\n    const invSubMix1 = invSubMix[1];\n    const invSubMix2 = invSubMix[2];\n    const invSubMix3 = invSubMix[3];\n\n    const d = new Uint32Array(256);\n    let x = 0;\n    let xi = 0;\n    let i = 0;\n    for (i = 0; i < 256; i++) {\n      if (i < 128) {\n        d[i] = i << 1;\n      } else {\n        d[i] = (i << 1) ^ 0x11b;\n      }\n    }\n\n    for (i = 0; i < 256; i++) {\n      let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n      sBox[x] = sx;\n      invSBox[sx] = x;\n\n      // Compute multiplication\n      const x2 = d[x];\n      const x4 = d[x2];\n      const x8 = d[x4];\n\n      // Compute sub/invSub bytes, mix columns tables\n      let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n      subMix0[x] = (t << 24) | (t >>> 8);\n      subMix1[x] = (t << 16) | (t >>> 16);\n      subMix2[x] = (t << 8) | (t >>> 24);\n      subMix3[x] = t;\n\n      // Compute inv sub bytes, inv mix columns tables\n      t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n      invSubMix0[sx] = (t << 24) | (t >>> 8);\n      invSubMix1[sx] = (t << 16) | (t >>> 16);\n      invSubMix2[sx] = (t << 8) | (t >>> 24);\n      invSubMix3[sx] = t;\n\n      // Compute next counter\n      if (!x) {\n        x = xi = 1;\n      } else {\n        x = x2 ^ d[d[d[x8 ^ x2]]];\n        xi ^= d[d[xi]];\n      }\n    }\n  }\n\n  expandKey(keyBuffer: ArrayBuffer) {\n    // convert keyBuffer to Uint32Array\n    const key = this.uint8ArrayToUint32Array_(keyBuffer);\n    let sameKey = true;\n    let offset = 0;\n\n    while (offset < key.length && sameKey) {\n      sameKey = key[offset] === this.key[offset];\n      offset++;\n    }\n\n    if (sameKey) {\n      return;\n    }\n\n    this.key = key;\n    const keySize = (this.keySize = key.length);\n\n    if (keySize !== 4 && keySize !== 6 && keySize !== 8) {\n      throw new Error('Invalid aes key size=' + keySize);\n    }\n\n    const ksRows = (this.ksRows = (keySize + 6 + 1) * 4);\n    let ksRow;\n    let invKsRow;\n\n    const keySchedule = (this.keySchedule = new Uint32Array(ksRows));\n    const invKeySchedule = (this.invKeySchedule = new Uint32Array(ksRows));\n    const sbox = this.sBox;\n    const rcon = this.rcon;\n\n    const invSubMix = this.invSubMix;\n    const invSubMix0 = invSubMix[0];\n    const invSubMix1 = invSubMix[1];\n    const invSubMix2 = invSubMix[2];\n    const invSubMix3 = invSubMix[3];\n\n    let prev;\n    let t;\n\n    for (ksRow = 0; ksRow < ksRows; ksRow++) {\n      if (ksRow < keySize) {\n        prev = keySchedule[ksRow] = key[ksRow];\n        continue;\n      }\n      t = prev;\n\n      if (ksRow % keySize === 0) {\n        // Rot word\n        t = (t << 8) | (t >>> 24);\n\n        // Sub word\n        t =\n          (sbox[t >>> 24] << 24) |\n          (sbox[(t >>> 16) & 0xff] << 16) |\n          (sbox[(t >>> 8) & 0xff] << 8) |\n          sbox[t & 0xff];\n\n        // Mix Rcon\n        t ^= rcon[(ksRow / keySize) | 0] << 24;\n      } else if (keySize > 6 && ksRow % keySize === 4) {\n        // Sub word\n        t =\n          (sbox[t >>> 24] << 24) |\n          (sbox[(t >>> 16) & 0xff] << 16) |\n          (sbox[(t >>> 8) & 0xff] << 8) |\n          sbox[t & 0xff];\n      }\n\n      keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;\n    }\n\n    for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n      ksRow = ksRows - invKsRow;\n      if (invKsRow & 3) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] =\n          invSubMix0[sbox[t >>> 24]] ^\n          invSubMix1[sbox[(t >>> 16) & 0xff]] ^\n          invSubMix2[sbox[(t >>> 8) & 0xff]] ^\n          invSubMix3[sbox[t & 0xff]];\n      }\n\n      invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;\n    }\n  }\n\n  // Adding this as a method greatly improves performance.\n  networkToHostOrderSwap(word) {\n    return (\n      (word << 24) |\n      ((word & 0xff00) << 8) |\n      ((word & 0xff0000) >> 8) |\n      (word >>> 24)\n    );\n  }\n\n  decrypt(inputArrayBuffer: ArrayBuffer, offset: number, aesIV: ArrayBuffer) {\n    const nRounds = this.keySize + 6;\n    const invKeySchedule = this.invKeySchedule;\n    const invSBOX = this.invSBox;\n\n    const invSubMix = this.invSubMix;\n    const invSubMix0 = invSubMix[0];\n    const invSubMix1 = invSubMix[1];\n    const invSubMix2 = invSubMix[2];\n    const invSubMix3 = invSubMix[3];\n\n    const initVector = this.uint8ArrayToUint32Array_(aesIV);\n    let initVector0 = initVector[0];\n    let initVector1 = initVector[1];\n    let initVector2 = initVector[2];\n    let initVector3 = initVector[3];\n\n    const inputInt32 = new Int32Array(inputArrayBuffer);\n    const outputInt32 = new Int32Array(inputInt32.length);\n\n    let t0, t1, t2, t3;\n    let s0, s1, s2, s3;\n    let inputWords0, inputWords1, inputWords2, inputWords3;\n\n    let ksRow, i;\n    const swapWord = this.networkToHostOrderSwap;\n\n    while (offset < inputInt32.length) {\n      inputWords0 = swapWord(inputInt32[offset]);\n      inputWords1 = swapWord(inputInt32[offset + 1]);\n      inputWords2 = swapWord(inputInt32[offset + 2]);\n      inputWords3 = swapWord(inputInt32[offset + 3]);\n\n      s0 = inputWords0 ^ invKeySchedule[0];\n      s1 = inputWords3 ^ invKeySchedule[1];\n      s2 = inputWords2 ^ invKeySchedule[2];\n      s3 = inputWords1 ^ invKeySchedule[3];\n\n      ksRow = 4;\n\n      // Iterate through the rounds of decryption\n      for (i = 1; i < nRounds; i++) {\n        t0 =\n          invSubMix0[s0 >>> 24] ^\n          invSubMix1[(s1 >> 16) & 0xff] ^\n          invSubMix2[(s2 >> 8) & 0xff] ^\n          invSubMix3[s3 & 0xff] ^\n          invKeySchedule[ksRow];\n        t1 =\n          invSubMix0[s1 >>> 24] ^\n          invSubMix1[(s2 >> 16) & 0xff] ^\n          invSubMix2[(s3 >> 8) & 0xff] ^\n          invSubMix3[s0 & 0xff] ^\n          invKeySchedule[ksRow + 1];\n        t2 =\n          invSubMix0[s2 >>> 24] ^\n          invSubMix1[(s3 >> 16) & 0xff] ^\n          invSubMix2[(s0 >> 8) & 0xff] ^\n          invSubMix3[s1 & 0xff] ^\n          invKeySchedule[ksRow + 2];\n        t3 =\n          invSubMix0[s3 >>> 24] ^\n          invSubMix1[(s0 >> 16) & 0xff] ^\n          invSubMix2[(s1 >> 8) & 0xff] ^\n          invSubMix3[s2 & 0xff] ^\n          invKeySchedule[ksRow + 3];\n        // Update state\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n\n        ksRow = ksRow + 4;\n      }\n\n      // Shift rows, sub bytes, add round key\n      t0 =\n        (invSBOX[s0 >>> 24] << 24) ^\n        (invSBOX[(s1 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s2 >> 8) & 0xff] << 8) ^\n        invSBOX[s3 & 0xff] ^\n        invKeySchedule[ksRow];\n      t1 =\n        (invSBOX[s1 >>> 24] << 24) ^\n        (invSBOX[(s2 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s3 >> 8) & 0xff] << 8) ^\n        invSBOX[s0 & 0xff] ^\n        invKeySchedule[ksRow + 1];\n      t2 =\n        (invSBOX[s2 >>> 24] << 24) ^\n        (invSBOX[(s3 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s0 >> 8) & 0xff] << 8) ^\n        invSBOX[s1 & 0xff] ^\n        invKeySchedule[ksRow + 2];\n      t3 =\n        (invSBOX[s3 >>> 24] << 24) ^\n        (invSBOX[(s0 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s1 >> 8) & 0xff] << 8) ^\n        invSBOX[s2 & 0xff] ^\n        invKeySchedule[ksRow + 3];\n\n      // Write\n      outputInt32[offset] = swapWord(t0 ^ initVector0);\n      outputInt32[offset + 1] = swapWord(t3 ^ initVector1);\n      outputInt32[offset + 2] = swapWord(t2 ^ initVector2);\n      outputInt32[offset + 3] = swapWord(t1 ^ initVector3);\n\n      // reset initVector to last 4 unsigned int\n      initVector0 = inputWords0;\n      initVector1 = inputWords1;\n      initVector2 = inputWords2;\n      initVector3 = inputWords3;\n\n      offset = offset + 4;\n    }\n\n    return outputInt32.buffer;\n  }\n}\n","export interface ILogFunction {\n  (message?: any, ...optionalParams: any[]): void;\n}\n\nexport interface ILogger {\n  trace: ILogFunction;\n  debug: ILogFunction;\n  log: ILogFunction;\n  warn: ILogFunction;\n  info: ILogFunction;\n  error: ILogFunction;\n}\n\nconst noop: ILogFunction = function () {};\n\nconst fakeLogger: ILogger = {\n  trace: noop,\n  debug: noop,\n  log: noop,\n  warn: noop,\n  info: noop,\n  error: noop,\n};\n\nlet exportedLogger: ILogger = fakeLogger;\n\n// let lastCallTime;\n// function formatMsgWithTimeInfo(type, msg) {\n//   const now = Date.now();\n//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';\n//   lastCallTime = now;\n//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';\n//   return msg;\n// }\n\nfunction consolePrintFn(type: string): ILogFunction {\n  const func: ILogFunction = self.console[type];\n  if (func) {\n    return func.bind(self.console, `[${type}] >`);\n  }\n  return noop;\n}\n\nfunction exportLoggerFunctions(\n  debugConfig: boolean | ILogger,\n  ...functions: string[]\n): void {\n  functions.forEach(function (type) {\n    exportedLogger[type] = debugConfig[type]\n      ? debugConfig[type].bind(debugConfig)\n      : consolePrintFn(type);\n  });\n}\n\nexport function enableLogs(debugConfig: boolean | ILogger, id: string): void {\n  // check that console is available\n  if (\n    (self.console && debugConfig === true) ||\n    typeof debugConfig === 'object'\n  ) {\n    exportLoggerFunctions(\n      debugConfig,\n      // Remove out from list here to hard-disable a log-level\n      // 'trace',\n      'debug',\n      'log',\n      'info',\n      'warn',\n      'error'\n    );\n    // Some browsers don't allow to use bind on console object anyway\n    // fallback to default if needed\n    try {\n      exportedLogger.log(\n        `Debug logs enabled for \"${id}\" in hls.js version ${__VERSION__}`\n      );\n    } catch (e) {\n      exportedLogger = fakeLogger;\n    }\n  } else {\n    exportedLogger = fakeLogger;\n  }\n}\n\nexport const logger: ILogger = exportedLogger;\n","export const isFiniteNumber =\n  Number.isFinite ||\n  function (value) {\n    return typeof value === 'number' && isFinite(value);\n  };\n\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n","// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX =\n    /^(?=((?:[a-zA-Z0-9+\\-.]+:)?))\\1(?=((?:\\/\\/[^\\/?#]*)?))\\2(?=((?:(?:[^?#\\/]*\\/)*[^;?#\\/]*)?))\\3((?:;[^?#]*)?)(\\?[^#]*)?(#[^]*)?$/;\n  var FIRST_SEGMENT_REGEX = /^(?=([^\\/?#]*))\\1([^]*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(\n          basePartsForNormalise.path\n        );\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment,\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath =\n              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n              relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize\n          ? URLToolkit.normalizePath(relativeParts.path)\n          : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || '',\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (\n        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n      ) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return (\n        parts.scheme +\n        parts.netLoc +\n        parts.path +\n        parts.params +\n        parts.query +\n        parts.fragment\n      );\n    },\n  };\n\n  if (typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if (typeof define === 'function' && define.amd)\n    define([], function () {\n      return URLToolkit;\n    });\n  else if (typeof exports === 'object') exports['URLToolkit'] = URLToolkit;\n  else root['URLToolkit'] = URLToolkit;\n})(this);\n","import { buildAbsoluteURL } from 'url-toolkit';\nimport { LevelKey } from './level-key';\nimport { LoadStats } from './load-stats';\nimport { AttrList } from '../utils/attr-list';\nimport type {\n  FragmentLoaderContext,\n  KeyLoaderContext,\n  Loader,\n  PlaylistLevelType,\n} from '../types/loader';\nimport type { KeySystemFormats } from '../utils/mediakeys-helper';\n\nexport const enum ElementaryStreamTypes {\n  AUDIO = 'audio',\n  VIDEO = 'video',\n  AUDIOVIDEO = 'audiovideo',\n}\n\nexport interface ElementaryStreamInfo {\n  startPTS: number;\n  endPTS: number;\n  startDTS: number;\n  endDTS: number;\n  partial?: boolean;\n}\n\nexport type ElementaryStreams = Record<\n  ElementaryStreamTypes,\n  ElementaryStreamInfo | null\n>;\n\nexport class BaseSegment {\n  private _byteRange: number[] | null = null;\n  private _url: string | null = null;\n\n  // baseurl is the URL to the playlist\n  public readonly baseurl: string;\n  // relurl is the portion of the URL that comes from inside the playlist.\n  public relurl?: string;\n  // Holds the types of data this fragment supports\n  public elementaryStreams: ElementaryStreams = {\n    [ElementaryStreamTypes.AUDIO]: null,\n    [ElementaryStreamTypes.VIDEO]: null,\n    [ElementaryStreamTypes.AUDIOVIDEO]: null,\n  };\n\n  constructor(baseurl: string) {\n    this.baseurl = baseurl;\n  }\n\n  // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array\n  setByteRange(value: string, previous?: BaseSegment) {\n    const params = value.split('@', 2);\n    const byteRange: number[] = [];\n    if (params.length === 1) {\n      byteRange[0] = previous ? previous.byteRangeEndOffset : 0;\n    } else {\n      byteRange[0] = parseInt(params[1]);\n    }\n    byteRange[1] = parseInt(params[0]) + byteRange[0];\n    this._byteRange = byteRange;\n  }\n\n  get byteRange(): number[] {\n    if (!this._byteRange) {\n      return [];\n    }\n\n    return this._byteRange;\n  }\n\n  get byteRangeStartOffset(): number {\n    return this.byteRange[0];\n  }\n\n  get byteRangeEndOffset(): number {\n    return this.byteRange[1];\n  }\n\n  get url(): string {\n    if (!this._url && this.baseurl && this.relurl) {\n      this._url = buildAbsoluteURL(this.baseurl, this.relurl, {\n        alwaysNormalize: true,\n      });\n    }\n    return this._url || '';\n  }\n\n  set url(value: string) {\n    this._url = value;\n  }\n}\n\n/**\n * Object representing parsed data from an HLS Segment. Found in {@link hls.js#LevelDetails.fragments}.\n */\nexport class Fragment extends BaseSegment {\n  private _decryptdata: LevelKey | null = null;\n\n  public rawProgramDateTime: string | null = null;\n  public programDateTime: number | null = null;\n  public tagList: Array<string[]> = [];\n\n  // EXTINF has to be present for a m3u8 to be considered valid\n  public duration: number = 0;\n  // sn notates the sequence number for a segment, and if set to a string can be 'initSegment'\n  public sn: number | 'initSegment' = 0;\n  // levelkeys are the EXT-X-KEY tags that apply to this segment for decryption\n  // core difference from the private field _decryptdata is the lack of the initialized IV\n  // _decryptdata will set the IV for this segment based on the segment number in the fragment\n  public levelkeys?: { [key: string]: LevelKey };\n  // A string representing the fragment type\n  public readonly type: PlaylistLevelType;\n  // A reference to the loader. Set while the fragment is loading, and removed afterwards. Used to abort fragment loading\n  public loader: Loader<FragmentLoaderContext> | null = null;\n  // A reference to the key loader. Set while the key is loading, and removed afterwards. Used to abort key loading\n  public keyLoader: Loader<KeyLoaderContext> | null = null;\n  // The level/track index to which the fragment belongs\n  public level: number = -1;\n  // The continuity counter of the fragment\n  public cc: number = 0;\n  // The starting Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.\n  public startPTS?: number;\n  // The ending Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.\n  public endPTS?: number;\n  // The starting Decode Time Stamp (DTS) of the fragment. Set after transmux complete.\n  public startDTS!: number;\n  // The ending Decode Time Stamp (DTS) of the fragment. Set after transmux complete.\n  public endDTS!: number;\n  // The start time of the fragment, as listed in the manifest. Updated after transmux complete.\n  public start: number = 0;\n  // Set by `updateFragPTSDTS` in level-helper\n  public deltaPTS?: number;\n  // The maximum starting Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.\n  public maxStartPTS?: number;\n  // The minimum ending Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.\n  public minEndPTS?: number;\n  // Load/parse timing information\n  public stats: LoadStats = new LoadStats();\n  public urlId: number = 0;\n  public data?: Uint8Array;\n  // A flag indicating whether the segment was downloaded in order to test bitrate, and was not buffered\n  public bitrateTest: boolean = false;\n  // #EXTINF  segment title\n  public title: string | null = null;\n  // The Media Initialization Section for this segment\n  public initSegment: Fragment | null = null;\n  // Fragment is the last fragment in the media playlist\n  public endList?: boolean;\n  // Fragment is marked by an EXT-X-GAP tag indicating that it does not contain media data and should not be loaded\n  public gap?: boolean;\n\n  constructor(type: PlaylistLevelType, baseurl: string) {\n    super(baseurl);\n    this.type = type;\n  }\n\n  get decryptdata(): LevelKey | null {\n    const { levelkeys } = this;\n    if (!levelkeys && !this._decryptdata) {\n      return null;\n    }\n\n    if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) {\n      const key = this.levelkeys.identity;\n      if (key) {\n        this._decryptdata = key.getDecryptData(this.sn);\n      } else {\n        const keyFormats = Object.keys(this.levelkeys);\n        if (keyFormats.length === 1) {\n          return (this._decryptdata = this.levelkeys[\n            keyFormats[0]\n          ].getDecryptData(this.sn));\n        } else {\n          // Multiple keys. key-loader to call Fragment.setKeyFormat based on selected key-system.\n        }\n      }\n    }\n\n    return this._decryptdata;\n  }\n\n  get end(): number {\n    return this.start + this.duration;\n  }\n\n  get endProgramDateTime() {\n    if (this.programDateTime === null) {\n      return null;\n    }\n\n    if (!Number.isFinite(this.programDateTime)) {\n      return null;\n    }\n\n    const duration = !Number.isFinite(this.duration) ? 0 : this.duration;\n\n    return this.programDateTime + duration * 1000;\n  }\n\n  get encrypted() {\n    // At the m3u8-parser level we need to add support for manifest signalled keyformats\n    // when we want the fragment to start reporting that it is encrypted.\n    // Currently, keyFormat will only be set for identity keys\n    if (this._decryptdata?.encrypted) {\n      return true;\n    } else if (this.levelkeys) {\n      const keyFormats = Object.keys(this.levelkeys);\n      const len = keyFormats.length;\n      if (len > 1 || (len === 1 && this.levelkeys[keyFormats[0]].encrypted)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  setKeyFormat(keyFormat: KeySystemFormats) {\n    if (this.levelkeys) {\n      const key = this.levelkeys[keyFormat];\n      if (key && !this._decryptdata) {\n        this._decryptdata = key.getDecryptData(this.sn);\n      }\n    }\n  }\n\n  abortRequests(): void {\n    this.loader?.abort();\n    this.keyLoader?.abort();\n  }\n\n  setElementaryStreamInfo(\n    type: ElementaryStreamTypes,\n    startPTS: number,\n    endPTS: number,\n    startDTS: number,\n    endDTS: number,\n    partial: boolean = false\n  ) {\n    const { elementaryStreams } = this;\n    const info = elementaryStreams[type];\n    if (!info) {\n      elementaryStreams[type] = {\n        startPTS,\n        endPTS,\n        startDTS,\n        endDTS,\n        partial,\n      };\n      return;\n    }\n\n    info.startPTS = Math.min(info.startPTS, startPTS);\n    info.endPTS = Math.max(info.endPTS, endPTS);\n    info.startDTS = Math.min(info.startDTS, startDTS);\n    info.endDTS = Math.max(info.endDTS, endDTS);\n  }\n\n  clearElementaryStreamInfo() {\n    const { elementaryStreams } = this;\n    elementaryStreams[ElementaryStreamTypes.AUDIO] = null;\n    elementaryStreams[ElementaryStreamTypes.VIDEO] = null;\n    elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO] = null;\n  }\n}\n\n/**\n * Object representing parsed data from an HLS Partial Segment. Found in {@link hls.js#LevelDetails.partList}.\n */\nexport class Part extends BaseSegment {\n  public readonly fragOffset: number = 0;\n  public readonly duration: number = 0;\n  public readonly gap: boolean = false;\n  public readonly independent: boolean = false;\n  public readonly relurl: string;\n  public readonly fragment: Fragment;\n  public readonly index: number;\n  public stats: LoadStats = new LoadStats();\n\n  constructor(\n    partAttrs: AttrList,\n    frag: Fragment,\n    baseurl: string,\n    index: number,\n    previous?: Part\n  ) {\n    super(baseurl);\n    this.duration = partAttrs.decimalFloatingPoint('DURATION');\n    this.gap = partAttrs.bool('GAP');\n    this.independent = partAttrs.bool('INDEPENDENT');\n    this.relurl = partAttrs.enumeratedString('URI') as string;\n    this.fragment = frag;\n    this.index = index;\n    const byteRange = partAttrs.enumeratedString('BYTERANGE');\n    if (byteRange) {\n      this.setByteRange(byteRange, previous);\n    }\n    if (previous) {\n      this.fragOffset = previous.fragOffset + previous.duration;\n    }\n  }\n\n  get start(): number {\n    return this.fragment.start + this.fragOffset;\n  }\n\n  get end(): number {\n    return this.start + this.duration;\n  }\n\n  get loaded(): boolean {\n    const { elementaryStreams } = this;\n    return !!(\n      elementaryStreams.audio ||\n      elementaryStreams.video ||\n      elementaryStreams.audiovideo\n    );\n  }\n}\n","type RawFrame = { type: string; size: number; data: Uint8Array };\n\n// breaking up those two types in order to clarify what is happening in the decoding path.\ntype DecodedFrame<T> = { key: string; data: T; info?: any };\nexport type Frame = DecodedFrame<ArrayBuffer | string>;\n\n/**\n * Returns true if an ID3 header can be found at offset in data\n * @param data - The data to search\n * @param offset - The offset at which to start searching\n */\nexport const isHeader = (data: Uint8Array, offset: number): boolean => {\n  /*\n   * http://id3.org/id3v2.3.0\n   * [0]     = 'I'\n   * [1]     = 'D'\n   * [2]     = '3'\n   * [3,4]   = {Version}\n   * [5]     = {Flags}\n   * [6-9]   = {ID3 Size}\n   *\n   * An ID3v2 tag can be detected with the following pattern:\n   *  $49 44 33 yy yy xx zz zz zz zz\n   * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80\n   */\n  if (offset + 10 <= data.length) {\n    // look for 'ID3' identifier\n    if (\n      data[offset] === 0x49 &&\n      data[offset + 1] === 0x44 &&\n      data[offset + 2] === 0x33\n    ) {\n      // check version is within range\n      if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {\n        // check size is within range\n        if (\n          data[offset + 6] < 0x80 &&\n          data[offset + 7] < 0x80 &&\n          data[offset + 8] < 0x80 &&\n          data[offset + 9] < 0x80\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\n/**\n * Returns true if an ID3 footer can be found at offset in data\n * @param data - The data to search\n * @param offset - The offset at which to start searching\n */\nexport const isFooter = (data: Uint8Array, offset: number): boolean => {\n  /*\n   * The footer is a copy of the header, but with a different identifier\n   */\n  if (offset + 10 <= data.length) {\n    // look for '3DI' identifier\n    if (\n      data[offset] === 0x33 &&\n      data[offset + 1] === 0x44 &&\n      data[offset + 2] === 0x49\n    ) {\n      // check version is within range\n      if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {\n        // check size is within range\n        if (\n          data[offset + 6] < 0x80 &&\n          data[offset + 7] < 0x80 &&\n          data[offset + 8] < 0x80 &&\n          data[offset + 9] < 0x80\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\n/**\n * Returns any adjacent ID3 tags found in data starting at offset, as one block of data\n * @param data - The data to search in\n * @param offset - The offset at which to start searching\n * @returns the block of data containing any ID3 tags found\n * or *undefined* if no header is found at the starting offset\n */\nexport const getID3Data = (\n  data: Uint8Array,\n  offset: number\n): Uint8Array | undefined => {\n  const front = offset;\n  let length = 0;\n\n  while (isHeader(data, offset)) {\n    // ID3 header is 10 bytes\n    length += 10;\n\n    const size = readSize(data, offset + 6);\n    length += size;\n\n    if (isFooter(data, offset + 10)) {\n      // ID3 footer is 10 bytes\n      length += 10;\n    }\n\n    offset += length;\n  }\n\n  if (length > 0) {\n    return data.subarray(front, front + length);\n  }\n\n  return undefined;\n};\n\nconst readSize = (data: Uint8Array, offset: number): number => {\n  let size = 0;\n  size = (data[offset] & 0x7f) << 21;\n  size |= (data[offset + 1] & 0x7f) << 14;\n  size |= (data[offset + 2] & 0x7f) << 7;\n  size |= data[offset + 3] & 0x7f;\n  return size;\n};\n\nexport const canParse = (data: Uint8Array, offset: number): boolean => {\n  return (\n    isHeader(data, offset) &&\n    readSize(data, offset + 6) + 10 <= data.length - offset\n  );\n};\n\n/**\n * Searches for the Elementary Stream timestamp found in the ID3 data chunk\n * @param data - Block of data containing one or more ID3 tags\n */\nexport const getTimeStamp = (data: Uint8Array): number | undefined => {\n  const frames: Frame[] = getID3Frames(data);\n\n  for (let i = 0; i < frames.length; i++) {\n    const frame = frames[i];\n\n    if (isTimeStampFrame(frame)) {\n      return readTimeStamp(frame as DecodedFrame<ArrayBuffer>);\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * Returns true if the ID3 frame is an Elementary Stream timestamp frame\n */\nexport const isTimeStampFrame = (frame: Frame): boolean => {\n  return (\n    frame &&\n    frame.key === 'PRIV' &&\n    frame.info === 'com.apple.streaming.transportStreamTimestamp'\n  );\n};\n\nconst getFrameData = (data: Uint8Array): RawFrame => {\n  /*\n  Frame ID       $xx xx xx xx (four characters)\n  Size           $xx xx xx xx\n  Flags          $xx xx\n  */\n  const type: string = String.fromCharCode(data[0], data[1], data[2], data[3]);\n  const size: number = readSize(data, 4);\n\n  // skip frame id, size, and flags\n  const offset = 10;\n\n  return { type, size, data: data.subarray(offset, offset + size) };\n};\n\n/**\n * Returns an array of ID3 frames found in all the ID3 tags in the id3Data\n * @param id3Data - The ID3 data containing one or more ID3 tags\n */\nexport const getID3Frames = (id3Data: Uint8Array): Frame[] => {\n  let offset = 0;\n  const frames: Frame[] = [];\n\n  while (isHeader(id3Data, offset)) {\n    const size = readSize(id3Data, offset + 6);\n    // skip past ID3 header\n    offset += 10;\n    const end = offset + size;\n    // loop through frames in the ID3 tag\n    while (offset + 8 < end) {\n      const frameData: RawFrame = getFrameData(id3Data.subarray(offset));\n      const frame: Frame | undefined = decodeFrame(frameData);\n      if (frame) {\n        frames.push(frame);\n      }\n\n      // skip frame header and frame data\n      offset += frameData.size + 10;\n    }\n\n    if (isFooter(id3Data, offset)) {\n      offset += 10;\n    }\n  }\n\n  return frames;\n};\n\nexport const decodeFrame = (frame: RawFrame): Frame | undefined => {\n  if (frame.type === 'PRIV') {\n    return decodePrivFrame(frame);\n  } else if (frame.type[0] === 'W') {\n    return decodeURLFrame(frame);\n  }\n\n  return decodeTextFrame(frame);\n};\n\nconst decodePrivFrame = (\n  frame: RawFrame\n): DecodedFrame<ArrayBuffer> | undefined => {\n  /*\n  Format: <text string>\\0<binary data>\n  */\n  if (frame.size < 2) {\n    return undefined;\n  }\n\n  const owner = utf8ArrayToStr(frame.data, true);\n  const privateData = new Uint8Array(frame.data.subarray(owner.length + 1));\n\n  return { key: frame.type, info: owner, data: privateData.buffer };\n};\n\nconst decodeTextFrame = (frame: RawFrame): DecodedFrame<string> | undefined => {\n  if (frame.size < 2) {\n    return undefined;\n  }\n\n  if (frame.type === 'TXXX') {\n    /*\n    Format:\n    [0]   = {Text Encoding}\n    [1-?] = {Description}\\0{Value}\n    */\n    let index = 1;\n    const description = utf8ArrayToStr(frame.data.subarray(index), true);\n\n    index += description.length + 1;\n    const value = utf8ArrayToStr(frame.data.subarray(index));\n\n    return { key: frame.type, info: description, data: value };\n  }\n  /*\n  Format:\n  [0]   = {Text Encoding}\n  [1-?] = {Value}\n  */\n  const text = utf8ArrayToStr(frame.data.subarray(1));\n  return { key: frame.type, data: text };\n};\n\nconst decodeURLFrame = (frame: RawFrame): DecodedFrame<string> | undefined => {\n  if (frame.type === 'WXXX') {\n    /*\n    Format:\n    [0]   = {Text Encoding}\n    [1-?] = {Description}\\0{URL}\n    */\n    if (frame.size < 2) {\n      return undefined;\n    }\n\n    let index = 1;\n    const description: string = utf8ArrayToStr(\n      frame.data.subarray(index),\n      true\n    );\n\n    index += description.length + 1;\n    const value: string = utf8ArrayToStr(frame.data.subarray(index));\n\n    return { key: frame.type, info: description, data: value };\n  }\n  /*\n  Format:\n  [0-?] = {URL}\n  */\n  const url: string = utf8ArrayToStr(frame.data);\n  return { key: frame.type, data: url };\n};\n\nconst readTimeStamp = (\n  timeStampFrame: DecodedFrame<ArrayBuffer>\n): number | undefined => {\n  if (timeStampFrame.data.byteLength === 8) {\n    const data = new Uint8Array(timeStampFrame.data);\n    // timestamp is 33 bit expressed as a big-endian eight-octet number,\n    // with the upper 31 bits set to zero.\n    const pts33Bit = data[3] & 0x1;\n    let timestamp =\n      (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];\n    timestamp /= 45;\n\n    if (pts33Bit) {\n      timestamp += 47721858.84;\n    } // 2^32 / 90\n\n    return Math.round(timestamp);\n  }\n\n  return undefined;\n};\n\n// http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197\n// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n/* utf.js - UTF-8 <=> UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */\nexport const utf8ArrayToStr = (\n  array: Uint8Array,\n  exitOnNull: boolean = false\n): string => {\n  const decoder = getTextDecoder();\n  if (decoder) {\n    const decoded = decoder.decode(array);\n\n    if (exitOnNull) {\n      // grab up to the first null\n      const idx = decoded.indexOf('\\0');\n      return idx !== -1 ? decoded.substring(0, idx) : decoded;\n    }\n\n    // remove any null characters\n    return decoded.replace(/\\0/g, '');\n  }\n\n  const len = array.length;\n  let c;\n  let char2;\n  let char3;\n  let out = '';\n  let i = 0;\n  while (i < len) {\n    c = array[i++];\n    if (c === 0x00 && exitOnNull) {\n      return out;\n    } else if (c === 0x00 || c === 0x03) {\n      // If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it\n      continue;\n    }\n    switch (c >> 4) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12:\n      case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(\n          ((c & 0x0f) << 12) | ((char2 & 0x3f) << 6) | ((char3 & 0x3f) << 0)\n        );\n        break;\n      default:\n    }\n  }\n  return out;\n};\n\nexport const testables = {\n  decodeTextFrame: decodeTextFrame,\n};\n\nlet decoder: TextDecoder;\n\nfunction getTextDecoder() {\n  if (!decoder && typeof self.TextDecoder !== 'undefined') {\n    decoder = new self.TextDecoder('utf-8');\n  }\n\n  return decoder;\n}\n","/**\n *  hex dump helper class\n */\n\nconst Hex = {\n  hexDump: function (array: Uint8Array) {\n    let str = '';\n    for (let i = 0; i < array.length; i++) {\n      let h = array[i].toString(16);\n      if (h.length < 2) {\n        h = '0' + h;\n      }\n\n      str += h;\n    }\n    return str;\n  },\n};\n\nexport default Hex;\n","import { ElementaryStreamTypes } from '../loader/fragment';\nimport { sliceUint8 } from './typed-array';\nimport { utf8ArrayToStr } from '../demux/id3';\nimport { logger } from '../utils/logger';\nimport Hex from './hex';\nimport type { PassthroughTrack, UserdataSample } from '../types/demuxer';\nimport type { DecryptData } from '../loader/level-key';\n\nconst UINT32_MAX = Math.pow(2, 32) - 1;\nconst push = [].push;\n\n// We are using fixed track IDs for driving the MP4 remuxer\n// instead of following the TS PIDs.\n// There is no reason not to do this and some browsers/SourceBuffer-demuxers\n// may not like if there are TrackID \"switches\"\n// See https://github.com/video-dev/hls.js/issues/1331\n// Here we are mapping our internal track types to constant MP4 track IDs\n// With MSE currently one can only have one track of each, and we are muxing\n// whatever video/audio rendition in them.\nexport const RemuxerTrackIdConfig = {\n  video: 1,\n  audio: 2,\n  id3: 3,\n  text: 4,\n};\n\nexport function bin2str(data: Uint8Array): string {\n  return String.fromCharCode.apply(null, data);\n}\n\nexport function readUint16(buffer: Uint8Array, offset: number): number {\n  const val = (buffer[offset] << 8) | buffer[offset + 1];\n  return val < 0 ? 65536 + val : val;\n}\n\nexport function readUint32(buffer: Uint8Array, offset: number): number {\n  const val = readSint32(buffer, offset);\n  return val < 0 ? 4294967296 + val : val;\n}\n\nexport function readSint32(buffer: Uint8Array, offset: number): number {\n  return (\n    (buffer[offset] << 24) |\n    (buffer[offset + 1] << 16) |\n    (buffer[offset + 2] << 8) |\n    buffer[offset + 3]\n  );\n}\n\nexport function writeUint32(buffer: Uint8Array, offset: number, value: number) {\n  buffer[offset] = value >> 24;\n  buffer[offset + 1] = (value >> 16) & 0xff;\n  buffer[offset + 2] = (value >> 8) & 0xff;\n  buffer[offset + 3] = value & 0xff;\n}\n\n// Find the data for a box specified by its path\nexport function findBox(data: Uint8Array, path: string[]): Uint8Array[] {\n  const results = [] as Uint8Array[];\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return results;\n  }\n  const end = data.byteLength;\n\n  for (let i = 0; i < end; ) {\n    const size = readUint32(data, i);\n    const type = bin2str(data.subarray(i + 4, i + 8));\n    const endbox = size > 1 ? i + size : end;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, endbox));\n      } else {\n        // recursively search for the next box along the path\n        const subresults = findBox(data.subarray(i + 8, endbox), path.slice(1));\n        if (subresults.length) {\n          push.apply(results, subresults);\n        }\n      }\n    }\n    i = endbox;\n  }\n\n  // we've finished searching all of data\n  return results;\n}\n\ntype SidxInfo = {\n  earliestPresentationTime: number;\n  timescale: number;\n  version: number;\n  referencesCount: number;\n  references: any[];\n};\n\nexport function parseSegmentIndex(sidx: Uint8Array): SidxInfo | null {\n  const references: any[] = [];\n\n  const version = sidx[0];\n\n  // set initial offset, we skip the reference ID (not needed)\n  let index = 8;\n\n  const timescale = readUint32(sidx, index);\n  index += 4;\n\n  // TODO: parse earliestPresentationTime and firstOffset\n  // usually zero in our case\n  const earliestPresentationTime = 0;\n  const firstOffset = 0;\n\n  if (version === 0) {\n    index += 8;\n  } else {\n    index += 16;\n  }\n\n  // skip reserved\n  index += 2;\n\n  let startByte = sidx.length + firstOffset;\n\n  const referencesCount = readUint16(sidx, index);\n  index += 2;\n\n  for (let i = 0; i < referencesCount; i++) {\n    let referenceIndex = index;\n\n    const referenceInfo = readUint32(sidx, referenceIndex);\n    referenceIndex += 4;\n\n    const referenceSize = referenceInfo & 0x7fffffff;\n    const referenceType = (referenceInfo & 0x80000000) >>> 31;\n\n    if (referenceType === 1) {\n      logger.warn('SIDX has hierarchical references (not supported)');\n      return null;\n    }\n\n    const subsegmentDuration = readUint32(sidx, referenceIndex);\n    referenceIndex += 4;\n\n    references.push({\n      referenceSize,\n      subsegmentDuration, // unscaled\n      info: {\n        duration: subsegmentDuration / timescale,\n        start: startByte,\n        end: startByte + referenceSize - 1,\n      },\n    });\n\n    startByte += referenceSize;\n\n    // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits\n    // for |sapDelta|.\n    referenceIndex += 4;\n\n    // skip to next ref\n    index = referenceIndex;\n  }\n\n  return {\n    earliestPresentationTime,\n    timescale,\n    version,\n    referencesCount,\n    references,\n  };\n}\n\n/**\n * Parses an MP4 initialization segment and extracts stream type and\n * timescale values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * moov > trak > mdia > hdlr\n * ```\n * @param initSegment the bytes of the init segment\n * @returns a hash of track type to timescale values or null if\n * the init segment is malformed.\n */\n\nexport interface InitDataTrack {\n  timescale: number;\n  id: number;\n  codec: string;\n}\n\ntype HdlrType = ElementaryStreamTypes.AUDIO | ElementaryStreamTypes.VIDEO;\n\nexport interface InitData extends Array<any> {\n  [index: number]:\n    | {\n        timescale: number;\n        type: HdlrType;\n        default?: {\n          duration: number;\n          flags: number;\n        };\n      }\n    | undefined;\n  audio?: InitDataTrack;\n  video?: InitDataTrack;\n  caption?: InitDataTrack;\n}\n\nexport function parseInitSegment(initSegment: Uint8Array): InitData {\n  const result: InitData = [];\n  const traks = findBox(initSegment, ['moov', 'trak']);\n  for (let i = 0; i < traks.length; i++) {\n    const trak = traks[i];\n    const tkhd = findBox(trak, ['tkhd'])[0];\n    if (tkhd) {\n      let version = tkhd[0];\n      let index = version === 0 ? 12 : 20;\n      const trackId = readUint32(tkhd, index);\n      const mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n      if (mdhd) {\n        version = mdhd[0];\n        index = version === 0 ? 12 : 20;\n        const timescale = readUint32(mdhd, index);\n        const hdlr = findBox(trak, ['mdia', 'hdlr'])[0];\n        if (hdlr) {\n          const hdlrType = bin2str(hdlr.subarray(8, 12));\n          const type: HdlrType | undefined = {\n            soun: ElementaryStreamTypes.AUDIO as const,\n            vide: ElementaryStreamTypes.VIDEO as const,\n          }[hdlrType];\n          if (type) {\n            // Parse codec details\n            const stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n            let codec;\n            if (stsd) {\n              codec = bin2str(stsd.subarray(12, 16));\n              // TODO: Parse codec details to be able to build MIME type.\n              // stsd.start += 8;\n              // const codecBox = findBox(stsd, [codec])[0];\n              // if (codecBox) {\n              //   TODO: Codec parsing support for avc1, mp4a, hevc, av01...\n              // }\n            }\n            result[trackId] = { timescale, type };\n            result[type] = { timescale, id: trackId, codec };\n          }\n        }\n      }\n    }\n  }\n\n  const trex = findBox(initSegment, ['moov', 'mvex', 'trex']);\n  trex.forEach((trex) => {\n    const trackId = readUint32(trex, 4);\n    const track = result[trackId];\n    if (track) {\n      track.default = {\n        duration: readUint32(trex, 12),\n        flags: readUint32(trex, 20),\n      };\n    }\n  });\n\n  return result;\n}\n\nexport function patchEncyptionData(\n  initSegment: Uint8Array | undefined,\n  decryptdata: DecryptData | null\n): Uint8Array | undefined {\n  if (!initSegment || !decryptdata) {\n    return initSegment;\n  }\n  const keyId = decryptdata.keyId;\n  if (keyId && decryptdata.isCommonEncryption) {\n    const traks = findBox(initSegment, ['moov', 'trak']);\n    traks.forEach((trak) => {\n      const stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n\n      // skip the sample entry count\n      const sampleEntries = stsd.subarray(8);\n      let encBoxes = findBox(sampleEntries, ['enca']);\n      const isAudio = encBoxes.length > 0;\n      if (!isAudio) {\n        encBoxes = findBox(sampleEntries, ['encv']);\n      }\n      encBoxes.forEach((enc) => {\n        const encBoxChildren = isAudio ? enc.subarray(28) : enc.subarray(78);\n        const sinfBoxes = findBox(encBoxChildren, ['sinf']);\n        sinfBoxes.forEach((sinf) => {\n          const tenc = parseSinf(sinf);\n          if (tenc) {\n            // Look for default key id (keyID offset is always 8 within the tenc box):\n            const tencKeyId = tenc.subarray(8, 24);\n            if (!tencKeyId.some((b) => b !== 0)) {\n              logger.log(\n                `[eme] Patching keyId in 'enc${\n                  isAudio ? 'a' : 'v'\n                }>sinf>>tenc' box: ${Hex.hexDump(tencKeyId)} -> ${Hex.hexDump(\n                  keyId\n                )}`\n              );\n              tenc.set(keyId, 8);\n            }\n          }\n        });\n      });\n    });\n  }\n\n  return initSegment;\n}\n\nexport function parseSinf(sinf: Uint8Array): Uint8Array | null {\n  const schm = findBox(sinf, ['schm'])[0];\n  if (schm) {\n    const scheme = bin2str(schm.subarray(4, 8));\n    if (scheme === 'cbcs' || scheme === 'cenc') {\n      return findBox(sinf, ['schi', 'tenc'])[0];\n    }\n  }\n  logger.error(`[eme] missing 'schm' box`);\n  return null;\n}\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param initData - a hash of track type to timescale values\n * @param fmp4 - the bytes of the mp4 fragment\n * @returns the earliest base media decode start time for the\n * fragment, in seconds\n */\nexport function getStartDTS(\n  initData: InitData,\n  fmp4: Uint8Array\n): number | null {\n  // we need info from two children of each track fragment box\n  return findBox(fmp4, ['moof', 'traf']).reduce(\n    (result: number | null, traf) => {\n      const tfdt = findBox(traf, ['tfdt'])[0];\n      const version = tfdt[0];\n      const start = findBox(traf, ['tfhd']).reduce(\n        (result: number | null, tfhd) => {\n          // get the track id from the tfhd\n          const id = readUint32(tfhd, 4);\n          const track = initData[id];\n          if (track) {\n            let baseTime = readUint32(tfdt, 4);\n            if (version === 1) {\n              // If value is too large, assume signed 64-bit. Negative track fragment decode times are invalid, but they exist in the wild.\n              // This prevents large values from being used for initPTS, which can cause playlist sync issues.\n              // https://github.com/video-dev/hls.js/issues/5303\n              if (baseTime === UINT32_MAX) {\n                logger.warn(\n                  `[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time`\n                );\n                return result;\n              }\n              baseTime *= UINT32_MAX + 1;\n              baseTime += readUint32(tfdt, 8);\n            }\n            // assume a 90kHz clock if no timescale was specified\n            const scale = track.timescale || 90e3;\n            // convert base time to seconds\n            const startTime = baseTime / scale;\n            if (\n              isFinite(startTime) &&\n              (result === null || startTime < result)\n            ) {\n              return startTime;\n            }\n          }\n          return result;\n        },\n        null\n      );\n      if (\n        start !== null &&\n        isFinite(start) &&\n        (result === null || start < result)\n      ) {\n        return start;\n      }\n      return result;\n    },\n    null\n  );\n}\n\n/*\n  For Reference:\n  aligned(8) class TrackFragmentHeaderBox\n           extends FullBox(‘tfhd’, 0, tf_flags){\n     unsigned int(32)  track_ID;\n     // all the following are optional fields\n     unsigned int(64)  base_data_offset;\n     unsigned int(32)  sample_description_index;\n     unsigned int(32)  default_sample_duration;\n     unsigned int(32)  default_sample_size;\n     unsigned int(32)  default_sample_flags\n  }\n */\nexport function getDuration(data: Uint8Array, initData: InitData) {\n  let rawDuration = 0;\n  let videoDuration = 0;\n  let audioDuration = 0;\n  const trafs = findBox(data, ['moof', 'traf']);\n  for (let i = 0; i < trafs.length; i++) {\n    const traf = trafs[i];\n    // There is only one tfhd & trun per traf\n    // This is true for CMAF style content, and we should perhaps check the ftyp\n    // and only look for a single trun then, but for ISOBMFF we should check\n    // for multiple track runs.\n    const tfhd = findBox(traf, ['tfhd'])[0];\n    // get the track id from the tfhd\n    const id = readUint32(tfhd, 4);\n    const track = initData[id];\n    if (!track) {\n      continue;\n    }\n    const trackDefault = track.default;\n    const tfhdFlags = readUint32(tfhd, 0) | trackDefault?.flags!;\n    let sampleDuration: number | undefined = trackDefault?.duration;\n    if (tfhdFlags & 0x000008) {\n      // 0x000008 indicates the presence of the default_sample_duration field\n      if (tfhdFlags & 0x000002) {\n        // 0x000002 indicates the presence of the sample_description_index field, which precedes default_sample_duration\n        // If present, the default_sample_duration exists at byte offset 12\n        sampleDuration = readUint32(tfhd, 12);\n      } else {\n        // Otherwise, the duration is at byte offset 8\n        sampleDuration = readUint32(tfhd, 8);\n      }\n    }\n    // assume a 90kHz clock if no timescale was specified\n    const timescale = track.timescale || 90e3;\n    const truns = findBox(traf, ['trun']);\n    for (let j = 0; j < truns.length; j++) {\n      rawDuration = computeRawDurationFromSamples(truns[j]);\n      if (!rawDuration && sampleDuration) {\n        const sampleCount = readUint32(truns[j], 4);\n        rawDuration = sampleDuration * sampleCount;\n      }\n      if (track.type === ElementaryStreamTypes.VIDEO) {\n        videoDuration += rawDuration / timescale;\n      } else if (track.type === ElementaryStreamTypes.AUDIO) {\n        audioDuration += rawDuration / timescale;\n      }\n    }\n  }\n  if (videoDuration === 0 && audioDuration === 0) {\n    // If duration samples are not available in the traf use sidx subsegment_duration\n    let sidxDuration = 0;\n    const sidxs = findBox(data, ['sidx']);\n    for (let i = 0; i < sidxs.length; i++) {\n      const sidx = parseSegmentIndex(sidxs[i]);\n      if (sidx?.references) {\n        sidxDuration += sidx.references.reduce(\n          (dur, ref) => dur + ref.info.duration || 0,\n          0\n        );\n      }\n    }\n\n    return sidxDuration;\n  }\n  if (videoDuration) {\n    return videoDuration;\n  }\n  return audioDuration;\n}\n\n/*\n  For Reference:\n  aligned(8) class TrackRunBox\n           extends FullBox(‘trun’, version, tr_flags) {\n     unsigned int(32)  sample_count;\n     // the following are optional fields\n     signed int(32) data_offset;\n     unsigned int(32)  first_sample_flags;\n     // all fields in the following array are optional\n     {\n        unsigned int(32)  sample_duration;\n        unsigned int(32)  sample_size;\n        unsigned int(32)  sample_flags\n        if (version == 0)\n           { unsigned int(32)\n        else\n           { signed int(32)\n     }[ sample_count ]\n  }\n */\nexport function computeRawDurationFromSamples(trun): number {\n  const flags = readUint32(trun, 0);\n  // Flags are at offset 0, non-optional sample_count is at offset 4. Therefore we start 8 bytes in.\n  // Each field is an int32, which is 4 bytes\n  let offset = 8;\n  // data-offset-present flag\n  if (flags & 0x000001) {\n    offset += 4;\n  }\n  // first-sample-flags-present flag\n  if (flags & 0x000004) {\n    offset += 4;\n  }\n\n  let duration = 0;\n  const sampleCount = readUint32(trun, 4);\n  for (let i = 0; i < sampleCount; i++) {\n    // sample-duration-present flag\n    if (flags & 0x000100) {\n      const sampleDuration = readUint32(trun, offset);\n      duration += sampleDuration;\n      offset += 4;\n    }\n    // sample-size-present flag\n    if (flags & 0x000200) {\n      offset += 4;\n    }\n    // sample-flags-present flag\n    if (flags & 0x000400) {\n      offset += 4;\n    }\n    // sample-composition-time-offsets-present flag\n    if (flags & 0x000800) {\n      offset += 4;\n    }\n  }\n  return duration;\n}\n\nexport function offsetStartDTS(\n  initData: InitData,\n  fmp4: Uint8Array,\n  timeOffset: number\n) {\n  findBox(fmp4, ['moof', 'traf']).forEach((traf) => {\n    findBox(traf, ['tfhd']).forEach((tfhd) => {\n      // get the track id from the tfhd\n      const id = readUint32(tfhd, 4);\n      const track = initData[id];\n      if (!track) {\n        return;\n      }\n      // assume a 90kHz clock if no timescale was specified\n      const timescale = track.timescale || 90e3;\n      // get the base media decode time from the tfdt\n      findBox(traf, ['tfdt']).forEach((tfdt) => {\n        const version = tfdt[0];\n        let baseMediaDecodeTime = readUint32(tfdt, 4);\n\n        if (version === 0) {\n          baseMediaDecodeTime -= timeOffset * timescale;\n          baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);\n          writeUint32(tfdt, 4, baseMediaDecodeTime);\n        } else {\n          baseMediaDecodeTime *= Math.pow(2, 32);\n          baseMediaDecodeTime += readUint32(tfdt, 8);\n          baseMediaDecodeTime -= timeOffset * timescale;\n          baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);\n          const upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));\n          const lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n          writeUint32(tfdt, 4, upper);\n          writeUint32(tfdt, 8, lower);\n        }\n      });\n    });\n  });\n}\n\n// TODO: Check if the last moof+mdat pair is part of the valid range\nexport function segmentValidRange(data: Uint8Array): SegmentedRange {\n  const segmentedRange: SegmentedRange = {\n    valid: null,\n    remainder: null,\n  };\n\n  const moofs = findBox(data, ['moof']);\n  if (!moofs) {\n    return segmentedRange;\n  } else if (moofs.length < 2) {\n    segmentedRange.remainder = data;\n    return segmentedRange;\n  }\n  const last = moofs[moofs.length - 1];\n  // Offset by 8 bytes; findBox offsets the start by as much\n  segmentedRange.valid = sliceUint8(data, 0, last.byteOffset - 8);\n  segmentedRange.remainder = sliceUint8(data, last.byteOffset - 8);\n  return segmentedRange;\n}\n\nexport interface SegmentedRange {\n  valid: Uint8Array | null;\n  remainder: Uint8Array | null;\n}\n\nexport function appendUint8Array(\n  data1: Uint8Array,\n  data2: Uint8Array\n): Uint8Array {\n  const temp = new Uint8Array(data1.length + data2.length);\n  temp.set(data1);\n  temp.set(data2, data1.length);\n\n  return temp;\n}\n\nexport interface IEmsgParsingData {\n  schemeIdUri: string;\n  value: string;\n  timeScale: number;\n  presentationTimeDelta?: number;\n  presentationTime?: number;\n  eventDuration: number;\n  id: number;\n  payload: Uint8Array;\n}\n\nexport function parseSamples(\n  timeOffset: number,\n  track: PassthroughTrack\n): UserdataSample[] {\n  const seiSamples = [] as UserdataSample[];\n  const videoData = track.samples;\n  const timescale = track.timescale;\n  const trackId = track.id;\n  let isHEVCFlavor = false;\n\n  const moofs = findBox(videoData, ['moof']);\n  moofs.map((moof) => {\n    const moofOffset = moof.byteOffset - 8;\n    const trafs = findBox(moof, ['traf']);\n    trafs.map((traf) => {\n      // get the base media decode time from the tfdt\n      const baseTime = findBox(traf, ['tfdt']).map((tfdt) => {\n        const version = tfdt[0];\n        let result = readUint32(tfdt, 4);\n        if (version === 1) {\n          result *= Math.pow(2, 32);\n          result += readUint32(tfdt, 8);\n        }\n        return result / timescale;\n      })[0];\n\n      if (baseTime !== undefined) {\n        timeOffset = baseTime;\n      }\n\n      return findBox(traf, ['tfhd']).map((tfhd) => {\n        const id = readUint32(tfhd, 4);\n        const tfhdFlags = readUint32(tfhd, 0) & 0xffffff;\n        const baseDataOffsetPresent = (tfhdFlags & 0x000001) !== 0;\n        const sampleDescriptionIndexPresent = (tfhdFlags & 0x000002) !== 0;\n        const defaultSampleDurationPresent = (tfhdFlags & 0x000008) !== 0;\n        let defaultSampleDuration = 0;\n        const defaultSampleSizePresent = (tfhdFlags & 0x000010) !== 0;\n        let defaultSampleSize = 0;\n        const defaultSampleFlagsPresent = (tfhdFlags & 0x000020) !== 0;\n        let tfhdOffset = 8;\n\n        if (id === trackId) {\n          if (baseDataOffsetPresent) {\n            tfhdOffset += 8;\n          }\n          if (sampleDescriptionIndexPresent) {\n            tfhdOffset += 4;\n          }\n          if (defaultSampleDurationPresent) {\n            defaultSampleDuration = readUint32(tfhd, tfhdOffset);\n            tfhdOffset += 4;\n          }\n          if (defaultSampleSizePresent) {\n            defaultSampleSize = readUint32(tfhd, tfhdOffset);\n            tfhdOffset += 4;\n          }\n          if (defaultSampleFlagsPresent) {\n            tfhdOffset += 4;\n          }\n          if (track.type === 'video') {\n            isHEVCFlavor = isHEVC(track.codec);\n          }\n\n          findBox(traf, ['trun']).map((trun) => {\n            const version = trun[0];\n            const flags = readUint32(trun, 0) & 0xffffff;\n            const dataOffsetPresent = (flags & 0x000001) !== 0;\n            let dataOffset = 0;\n            const firstSampleFlagsPresent = (flags & 0x000004) !== 0;\n            const sampleDurationPresent = (flags & 0x000100) !== 0;\n            let sampleDuration = 0;\n            const sampleSizePresent = (flags & 0x000200) !== 0;\n            let sampleSize = 0;\n            const sampleFlagsPresent = (flags & 0x000400) !== 0;\n            const sampleCompositionOffsetsPresent = (flags & 0x000800) !== 0;\n            let compositionOffset = 0;\n            const sampleCount = readUint32(trun, 4);\n            let trunOffset = 8; // past version, flags, and sample count\n\n            if (dataOffsetPresent) {\n              dataOffset = readUint32(trun, trunOffset);\n              trunOffset += 4;\n            }\n            if (firstSampleFlagsPresent) {\n              trunOffset += 4;\n            }\n\n            let sampleOffset = dataOffset + moofOffset;\n\n            for (let ix = 0; ix < sampleCount; ix++) {\n              if (sampleDurationPresent) {\n                sampleDuration = readUint32(trun, trunOffset);\n                trunOffset += 4;\n              } else {\n                sampleDuration = defaultSampleDuration;\n              }\n              if (sampleSizePresent) {\n                sampleSize = readUint32(trun, trunOffset);\n                trunOffset += 4;\n              } else {\n                sampleSize = defaultSampleSize;\n              }\n              if (sampleFlagsPresent) {\n                trunOffset += 4;\n              }\n              if (sampleCompositionOffsetsPresent) {\n                if (version === 0) {\n                  compositionOffset = readUint32(trun, trunOffset);\n                } else {\n                  compositionOffset = readSint32(trun, trunOffset);\n                }\n                trunOffset += 4;\n              }\n              if (track.type === ElementaryStreamTypes.VIDEO) {\n                let naluTotalSize = 0;\n                while (naluTotalSize < sampleSize) {\n                  const naluSize = readUint32(videoData, sampleOffset);\n                  sampleOffset += 4;\n                  if (isSEIMessage(isHEVCFlavor, videoData[sampleOffset])) {\n                    const data = videoData.subarray(\n                      sampleOffset,\n                      sampleOffset + naluSize\n                    );\n                    parseSEIMessageFromNALu(\n                      data,\n                      isHEVCFlavor ? 2 : 1,\n                      timeOffset + compositionOffset / timescale,\n                      seiSamples\n                    );\n                  }\n                  sampleOffset += naluSize;\n                  naluTotalSize += naluSize + 4;\n                }\n              }\n\n              timeOffset += sampleDuration / timescale;\n            }\n          });\n        }\n      });\n    });\n  });\n  return seiSamples;\n}\n\nfunction isHEVC(codec: string) {\n  if (!codec) {\n    return false;\n  }\n  const delimit = codec.indexOf('.');\n  const baseCodec = delimit < 0 ? codec : codec.substring(0, delimit);\n  return (\n    baseCodec === 'hvc1' ||\n    baseCodec === 'hev1' ||\n    // Dolby Vision\n    baseCodec === 'dvh1' ||\n    baseCodec === 'dvhe'\n  );\n}\n\nfunction isSEIMessage(isHEVCFlavor: boolean, naluHeader: number) {\n  if (isHEVCFlavor) {\n    const naluType = (naluHeader >> 1) & 0x3f;\n    return naluType === 39 || naluType === 40;\n  } else {\n    const naluType = naluHeader & 0x1f;\n    return naluType === 6;\n  }\n}\n\nexport function parseSEIMessageFromNALu(\n  unescapedData: Uint8Array,\n  headerSize: number,\n  pts: number,\n  samples: UserdataSample[]\n) {\n  const data = discardEPB(unescapedData);\n  let seiPtr = 0;\n  // skip nal header\n  seiPtr += headerSize;\n  let payloadType = 0;\n  let payloadSize = 0;\n  let endOfCaptions = false;\n  let b = 0;\n\n  while (seiPtr < data.length) {\n    payloadType = 0;\n    do {\n      if (seiPtr >= data.length) {\n        break;\n      }\n      b = data[seiPtr++];\n      payloadType += b;\n    } while (b === 0xff);\n\n    // Parse payload size.\n    payloadSize = 0;\n    do {\n      if (seiPtr >= data.length) {\n        break;\n      }\n      b = data[seiPtr++];\n      payloadSize += b;\n    } while (b === 0xff);\n\n    const leftOver = data.length - seiPtr;\n\n    if (!endOfCaptions && payloadType === 4 && seiPtr < data.length) {\n      endOfCaptions = true;\n\n      const countryCode = data[seiPtr++];\n      if (countryCode === 181) {\n        const providerCode = readUint16(data, seiPtr);\n        seiPtr += 2;\n\n        if (providerCode === 49) {\n          const userStructure = readUint32(data, seiPtr);\n          seiPtr += 4;\n\n          if (userStructure === 0x47413934) {\n            const userDataType = data[seiPtr++];\n\n            // Raw CEA-608 bytes wrapped in CEA-708 packet\n            if (userDataType === 3) {\n              const firstByte = data[seiPtr++];\n              const totalCCs = 0x1f & firstByte;\n              const enabled = 0x40 & firstByte;\n              const totalBytes = enabled ? 2 + totalCCs * 3 : 0;\n              const byteArray = new Uint8Array(totalBytes);\n              if (enabled) {\n                byteArray[0] = firstByte;\n                for (let i = 1; i < totalBytes; i++) {\n                  byteArray[i] = data[seiPtr++];\n                }\n              }\n\n              samples.push({\n                type: userDataType,\n                payloadType,\n                pts,\n                bytes: byteArray,\n              });\n            }\n          }\n        }\n      }\n    } else if (payloadType === 5 && payloadSize < leftOver) {\n      endOfCaptions = true;\n\n      if (payloadSize > 16) {\n        const uuidStrArray: Array<string> = [];\n        for (let i = 0; i < 16; i++) {\n          const b = data[seiPtr++].toString(16);\n          uuidStrArray.push(b.length == 1 ? '0' + b : b);\n\n          if (i === 3 || i === 5 || i === 7 || i === 9) {\n            uuidStrArray.push('-');\n          }\n        }\n        const length = payloadSize - 16;\n        const userDataBytes = new Uint8Array(length);\n        for (let i = 0; i < length; i++) {\n          userDataBytes[i] = data[seiPtr++];\n        }\n\n        samples.push({\n          payloadType,\n          pts,\n          uuid: uuidStrArray.join(''),\n          userData: utf8ArrayToStr(userDataBytes),\n          userDataBytes,\n        });\n      }\n    } else if (payloadSize < leftOver) {\n      seiPtr += payloadSize;\n    } else if (payloadSize > leftOver) {\n      break;\n    }\n  }\n}\n\n/**\n * remove Emulation Prevention bytes from a RBSP\n */\nexport function discardEPB(data: Uint8Array): Uint8Array {\n  const length = data.byteLength;\n  const EPBPositions = [] as Array<number>;\n  let i = 1;\n\n  // Find all `Emulation Prevention Bytes`\n  while (i < length - 2) {\n    if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n      EPBPositions.push(i + 2);\n      i += 2;\n    } else {\n      i++;\n    }\n  }\n\n  // If no Emulation Prevention Bytes were found just return the original\n  // array\n  if (EPBPositions.length === 0) {\n    return data;\n  }\n\n  // Create a new array to hold the NAL unit data\n  const newLength = length - EPBPositions.length;\n  const newData = new Uint8Array(newLength);\n  let sourceIndex = 0;\n\n  for (i = 0; i < newLength; sourceIndex++, i++) {\n    if (sourceIndex === EPBPositions[0]) {\n      // Skip this byte\n      sourceIndex++;\n      // Remove this position index\n      EPBPositions.shift();\n    }\n    newData[i] = data[sourceIndex];\n  }\n  return newData;\n}\n\nexport function parseEmsg(data: Uint8Array): IEmsgParsingData {\n  const version = data[0];\n  let schemeIdUri: string = '';\n  let value: string = '';\n  let timeScale: number = 0;\n  let presentationTimeDelta: number = 0;\n  let presentationTime: number = 0;\n  let eventDuration: number = 0;\n  let id: number = 0;\n  let offset: number = 0;\n\n  if (version === 0) {\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      value += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    value += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    timeScale = readUint32(data, 12);\n    presentationTimeDelta = readUint32(data, 16);\n    eventDuration = readUint32(data, 20);\n    id = readUint32(data, 24);\n    offset = 28;\n  } else if (version === 1) {\n    offset += 4;\n    timeScale = readUint32(data, offset);\n    offset += 4;\n    const leftPresentationTime = readUint32(data, offset);\n    offset += 4;\n    const rightPresentationTime = readUint32(data, offset);\n    offset += 4;\n    presentationTime = 2 ** 32 * leftPresentationTime + rightPresentationTime;\n    if (!Number.isSafeInteger(presentationTime)) {\n      presentationTime = Number.MAX_SAFE_INTEGER;\n      logger.warn(\n        'Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box'\n      );\n    }\n\n    eventDuration = readUint32(data, offset);\n    offset += 4;\n    id = readUint32(data, offset);\n    offset += 4;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      value += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    value += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n  }\n  const payload = data.subarray(offset, data.byteLength);\n\n  return {\n    schemeIdUri,\n    value,\n    timeScale,\n    presentationTime,\n    presentationTimeDelta,\n    eventDuration,\n    id,\n    payload,\n  };\n}\n\nexport function mp4Box(type: ArrayLike<number>, ...payload: Uint8Array[]) {\n  const len = payload.length;\n  let size = 8;\n  let i = len;\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  const result = new Uint8Array(size);\n  result[0] = (size >> 24) & 0xff;\n  result[1] = (size >> 16) & 0xff;\n  result[2] = (size >> 8) & 0xff;\n  result[3] = size & 0xff;\n  result.set(type, 4);\n  for (i = 0, size = 8; i < len; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n}\n\nexport function mp4pssh(\n  systemId: Uint8Array,\n  keyids: Array<Uint8Array> | null,\n  data: Uint8Array\n) {\n  if (systemId.byteLength !== 16) {\n    throw new RangeError('Invalid system id');\n  }\n  let version;\n  let kids;\n  if (keyids) {\n    version = 1;\n    kids = new Uint8Array(keyids.length * 16);\n    for (let ix = 0; ix < keyids.length; ix++) {\n      const k = keyids[ix]; // uint8array\n      if (k.byteLength !== 16) {\n        throw new RangeError('Invalid key');\n      }\n      kids.set(k, ix * 16);\n    }\n  } else {\n    version = 0;\n    kids = new Uint8Array();\n  }\n  let kidCount;\n  if (version > 0) {\n    kidCount = new Uint8Array(4);\n    if (keyids!.length > 0) {\n      new DataView(kidCount.buffer).setUint32(0, keyids!.length, false);\n    }\n  } else {\n    kidCount = new Uint8Array();\n  }\n  const dataSize = new Uint8Array(4);\n  if (data && data.byteLength > 0) {\n    new DataView(dataSize.buffer).setUint32(0, data.byteLength, false);\n  }\n  return mp4Box(\n    [112, 115, 115, 104],\n    new Uint8Array([\n      version,\n      0x00,\n      0x00,\n      0x00, // Flags\n    ]),\n    systemId, // 16 bytes\n    kidCount,\n    kids,\n    dataSize,\n    data || new Uint8Array()\n  );\n}\n\nexport function parsePssh(initData: ArrayBuffer) {\n  if (!(initData instanceof ArrayBuffer) || initData.byteLength < 32) {\n    return null;\n  }\n  const result = {\n    version: 0,\n    systemId: '',\n    kids: null as null | Uint8Array[],\n    data: null as null | Uint8Array,\n  };\n  const view = new DataView(initData);\n  const boxSize = view.getUint32(0);\n  if (initData.byteLength !== boxSize && boxSize > 44) {\n    return null;\n  }\n  const type = view.getUint32(4);\n  if (type !== 0x70737368) {\n    return null;\n  }\n  result.version = view.getUint32(8) >>> 24;\n  if (result.version > 1) {\n    return null;\n  }\n  result.systemId = Hex.hexDump(new Uint8Array(initData, 12, 16));\n  const dataSizeOrKidCount = view.getUint32(28);\n  if (result.version === 0) {\n    if (boxSize - 32 < dataSizeOrKidCount) {\n      return null;\n    }\n    result.data = new Uint8Array(initData, 32, dataSizeOrKidCount);\n  } else if (result.version === 1) {\n    result.kids = [];\n    for (let i = 0; i < dataSizeOrKidCount; i++) {\n      result.kids.push(new Uint8Array(initData, 32 + i * 16, 16));\n    }\n  }\n  return result;\n}\n","import AESCrypto from './aes-crypto';\nimport FastAESKey from './fast-aes-key';\nimport AESDecryptor, { removePadding } from './aes-decryptor';\nimport { logger } from '../utils/logger';\nimport { appendUint8Array } from '../utils/mp4-tools';\nimport { sliceUint8 } from '../utils/typed-array';\nimport type { HlsConfig } from '../config';\n\nconst CHUNK_SIZE = 16; // 16 bytes, 128 bits\n\nexport default class Decrypter {\n  private logEnabled: boolean = true;\n  private removePKCS7Padding: boolean;\n  private subtle: SubtleCrypto | null = null;\n  private softwareDecrypter: AESDecryptor | null = null;\n  private key: ArrayBuffer | null = null;\n  private fastAesKey: FastAESKey | null = null;\n  private remainderData: Uint8Array | null = null;\n  private currentIV: ArrayBuffer | null = null;\n  private currentResult: ArrayBuffer | null = null;\n  private useSoftware: boolean;\n\n  constructor(config: HlsConfig, { removePKCS7Padding = true } = {}) {\n    this.useSoftware = config.enableSoftwareAES;\n    this.removePKCS7Padding = removePKCS7Padding;\n    // built in decryptor expects PKCS7 padding\n    if (removePKCS7Padding) {\n      try {\n        const browserCrypto = self.crypto;\n        if (browserCrypto) {\n          this.subtle =\n            browserCrypto.subtle ||\n            ((browserCrypto as any).webkitSubtle as SubtleCrypto);\n        }\n      } catch (e) {\n        /* no-op */\n      }\n    }\n    if (this.subtle === null) {\n      this.useSoftware = true;\n    }\n  }\n\n  destroy() {\n    this.subtle = null;\n    this.softwareDecrypter = null;\n    this.key = null;\n    this.fastAesKey = null;\n    this.remainderData = null;\n    this.currentIV = null;\n    this.currentResult = null;\n  }\n\n  public isSync() {\n    return this.useSoftware;\n  }\n\n  public flush(): Uint8Array | null {\n    const { currentResult, remainderData } = this;\n    if (!currentResult || remainderData) {\n      this.reset();\n      return null;\n    }\n    const data = new Uint8Array(currentResult);\n    this.reset();\n    if (this.removePKCS7Padding) {\n      return removePadding(data);\n    }\n    return data;\n  }\n\n  public reset() {\n    this.currentResult = null;\n    this.currentIV = null;\n    this.remainderData = null;\n    if (this.softwareDecrypter) {\n      this.softwareDecrypter = null;\n    }\n  }\n\n  public decrypt(\n    data: Uint8Array | ArrayBuffer,\n    key: ArrayBuffer,\n    iv: ArrayBuffer\n  ): Promise<ArrayBuffer> {\n    if (this.useSoftware) {\n      return new Promise((resolve, reject) => {\n        this.softwareDecrypt(new Uint8Array(data), key, iv);\n        const decryptResult = this.flush();\n        if (decryptResult) {\n          resolve(decryptResult.buffer);\n        } else {\n          reject(new Error('[softwareDecrypt] Failed to decrypt data'));\n        }\n      });\n    }\n    return this.webCryptoDecrypt(new Uint8Array(data), key, iv);\n  }\n\n  // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached\n  // data is handled in the flush() call\n  public softwareDecrypt(\n    data: Uint8Array,\n    key: ArrayBuffer,\n    iv: ArrayBuffer\n  ): ArrayBuffer | null {\n    const { currentIV, currentResult, remainderData } = this;\n    this.logOnce('JS AES decrypt');\n    // The output is staggered during progressive parsing - the current result is cached, and emitted on the next call\n    // This is done in order to strip PKCS7 padding, which is found at the end of each segment. We only know we've reached\n    // the end on flush(), but by that time we have already received all bytes for the segment.\n    // Progressive decryption does not work with WebCrypto\n\n    if (remainderData) {\n      data = appendUint8Array(remainderData, data);\n      this.remainderData = null;\n    }\n\n    // Byte length must be a multiple of 16 (AES-128 = 128 bit blocks = 16 bytes)\n    const currentChunk = this.getValidChunk(data);\n    if (!currentChunk.length) {\n      return null;\n    }\n\n    if (currentIV) {\n      iv = currentIV;\n    }\n\n    let softwareDecrypter = this.softwareDecrypter;\n    if (!softwareDecrypter) {\n      softwareDecrypter = this.softwareDecrypter = new AESDecryptor();\n    }\n    softwareDecrypter.expandKey(key);\n\n    const result = currentResult;\n\n    this.currentResult = softwareDecrypter.decrypt(currentChunk.buffer, 0, iv);\n    this.currentIV = sliceUint8(currentChunk, -16).buffer;\n\n    if (!result) {\n      return null;\n    }\n    return result;\n  }\n\n  public webCryptoDecrypt(\n    data: Uint8Array,\n    key: ArrayBuffer,\n    iv: ArrayBuffer\n  ): Promise<ArrayBuffer> {\n    const subtle = this.subtle;\n    if (this.key !== key || !this.fastAesKey) {\n      this.key = key;\n      this.fastAesKey = new FastAESKey(subtle, key);\n    }\n    return this.fastAesKey\n      .expandKey()\n      .then((aesKey) => {\n        // decrypt using web crypto\n        if (!subtle) {\n          return Promise.reject(new Error('web crypto not initialized'));\n        }\n        this.logOnce('WebCrypto AES decrypt');\n        const crypto = new AESCrypto(subtle, new Uint8Array(iv));\n        return crypto.decrypt(data.buffer, aesKey);\n      })\n      .catch((err) => {\n        logger.warn(\n          `[decrypter]: WebCrypto Error, disable WebCrypto API, ${err.name}: ${err.message}`\n        );\n\n        return this.onWebCryptoError(data, key, iv);\n      });\n  }\n\n  private onWebCryptoError(data, key, iv): ArrayBuffer | never {\n    this.useSoftware = true;\n    this.logEnabled = true;\n    this.softwareDecrypt(data, key, iv);\n    const decryptResult = this.flush();\n    if (decryptResult) {\n      return decryptResult.buffer;\n    }\n    throw new Error('WebCrypto and softwareDecrypt: failed to decrypt data');\n  }\n\n  private getValidChunk(data: Uint8Array): Uint8Array {\n    let currentChunk = data;\n    const splitPoint = data.length - (data.length % CHUNK_SIZE);\n    if (splitPoint !== data.length) {\n      currentChunk = sliceUint8(data, 0, splitPoint);\n      this.remainderData = sliceUint8(data, splitPoint);\n    }\n    return currentChunk;\n  }\n\n  private logOnce(msg: string) {\n    if (!this.logEnabled) {\n      return;\n    }\n    logger.log(`[decrypter]: ${msg}`);\n    this.logEnabled = false;\n  }\n}\n","import type { RationalTimestamp } from '../utils/timescale-conversion';\n\nexport interface Demuxer {\n  demux(\n    data: Uint8Array,\n    timeOffset: number,\n    isSampleAes?: boolean,\n    flush?: boolean\n  ): DemuxerResult;\n  demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number\n  ): Promise<DemuxerResult>;\n  flush(timeOffset?: number): DemuxerResult | Promise<DemuxerResult>;\n  destroy(): void;\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number\n  );\n  resetTimeStamp(defaultInitPTS?: RationalTimestamp | null): void;\n  resetContiguity(): void;\n}\n\nexport interface DemuxerResult {\n  audioTrack: DemuxedAudioTrack;\n  videoTrack: DemuxedVideoTrack;\n  id3Track: DemuxedMetadataTrack;\n  textTrack: DemuxedUserdataTrack;\n}\n\nexport interface DemuxedTrack {\n  type: string;\n  id: number;\n  pid: number;\n  inputTimeScale: number;\n  sequenceNumber: number;\n  samples:\n    | AudioSample[]\n    | AvcSample[]\n    | MetadataSample[]\n    | UserdataSample[]\n    | Uint8Array;\n  timescale?: number;\n  container?: string;\n  dropped: number;\n  duration?: number;\n  pesData?: ElementaryStreamData | null;\n  codec?: string;\n}\n\nexport interface PassthroughTrack extends DemuxedTrack {\n  sampleDuration: number;\n  samples: Uint8Array;\n  timescale: number;\n  duration: number;\n  codec: string;\n}\nexport interface DemuxedAudioTrack extends DemuxedTrack {\n  config?: number[];\n  samplerate?: number;\n  segmentCodec?: string;\n  channelCount?: number;\n  manifestCodec?: string;\n  samples: AudioSample[];\n}\n\nexport interface DemuxedVideoTrack extends DemuxedTrack {\n  width?: number;\n  height?: number;\n  pixelRatio?: [number, number];\n  audFound?: boolean;\n  pps?: Uint8Array[];\n  sps?: Uint8Array[];\n  naluState?: number;\n  samples: AvcSample[] | Uint8Array;\n}\n\nexport interface DemuxedAvcTrack extends DemuxedVideoTrack {\n  samples: AvcSample[];\n}\n\nexport interface DemuxedMetadataTrack extends DemuxedTrack {\n  samples: MetadataSample[];\n}\n\nexport interface DemuxedUserdataTrack extends DemuxedTrack {\n  samples: UserdataSample[];\n}\n\nexport const enum MetadataSchema {\n  audioId3 = 'org.id3',\n  dateRange = 'com.apple.quicktime.HLS',\n  emsg = 'https://aomedia.org/emsg/ID3',\n}\nexport interface MetadataSample {\n  pts: number;\n  dts: number;\n  duration: number;\n  len?: number;\n  data: Uint8Array;\n  type: MetadataSchema;\n}\n\nexport interface UserdataSample {\n  pts: number;\n  bytes?: Uint8Array;\n  type?: number;\n  payloadType?: number;\n  uuid?: string;\n  userData?: string;\n  userDataBytes?: Uint8Array;\n}\n\nexport interface AvcSample {\n  dts: number;\n  pts: number;\n  key: boolean;\n  frame: boolean;\n  units: AvcSampleUnit[];\n  debug: string;\n  length: number;\n}\n\nexport interface AvcSampleUnit {\n  data: Uint8Array;\n  type: number;\n}\n\nexport type AudioSample = {\n  unit: Uint8Array;\n  pts: number;\n};\n\nexport type AudioFrame = {\n  sample: AudioSample;\n  length: number;\n  missing: number;\n};\n\nexport interface ElementaryStreamData {\n  data: Uint8Array[];\n  size: number;\n}\n\nexport interface KeyData {\n  method: string;\n  key: Uint8Array;\n  iv: Uint8Array;\n}\n","import type { DemuxedTrack } from '../types/demuxer';\n\nexport function dummyTrack(type = '', inputTimeScale = 90000): DemuxedTrack {\n  return {\n    type,\n    id: -1,\n    pid: -1,\n    inputTimeScale,\n    sequenceNumber: -1,\n    samples: [],\n    dropped: 0,\n  };\n}\n","import * as ID3 from '../demux/id3';\nimport {\n  DemuxerResult,\n  Demuxer,\n  DemuxedAudioTrack,\n  AudioFrame,\n  DemuxedMetadataTrack,\n  DemuxedVideoTrack,\n  DemuxedUserdataTrack,\n  KeyData,\n  MetadataSchema,\n} from '../types/demuxer';\nimport { dummyTrack } from './dummy-demuxed-track';\nimport { appendUint8Array } from '../utils/mp4-tools';\nimport { sliceUint8 } from '../utils/typed-array';\nimport { RationalTimestamp } from '../utils/timescale-conversion';\n\nclass BaseAudioDemuxer implements Demuxer {\n  protected _audioTrack!: DemuxedAudioTrack;\n  protected _id3Track!: DemuxedMetadataTrack;\n  protected frameIndex: number = 0;\n  protected cachedData: Uint8Array | null = null;\n  protected basePTS: number | null = null;\n  protected initPTS: RationalTimestamp | null = null;\n  protected lastPTS: number | null = null;\n\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number\n  ) {\n    this._id3Track = {\n      type: 'id3',\n      id: 3,\n      pid: -1,\n      inputTimeScale: 90000,\n      sequenceNumber: 0,\n      samples: [],\n      dropped: 0,\n    };\n  }\n\n  resetTimeStamp(deaultTimestamp: RationalTimestamp | null) {\n    this.initPTS = deaultTimestamp;\n    this.resetContiguity();\n  }\n\n  resetContiguity(): void {\n    this.basePTS = null;\n    this.lastPTS = null;\n    this.frameIndex = 0;\n  }\n\n  canParse(data: Uint8Array, offset: number): boolean {\n    return false;\n  }\n\n  appendFrame(\n    track: DemuxedAudioTrack,\n    data: Uint8Array,\n    offset: number\n  ): AudioFrame | void {}\n\n  // feed incoming data to the front of the parsing pipeline\n  demux(data: Uint8Array, timeOffset: number): DemuxerResult {\n    if (this.cachedData) {\n      data = appendUint8Array(this.cachedData, data);\n      this.cachedData = null;\n    }\n\n    let id3Data: Uint8Array | undefined = ID3.getID3Data(data, 0);\n    let offset = id3Data ? id3Data.length : 0;\n    let lastDataIndex;\n    const track = this._audioTrack;\n    const id3Track = this._id3Track;\n    const timestamp = id3Data ? ID3.getTimeStamp(id3Data) : undefined;\n    const length = data.length;\n\n    if (\n      this.basePTS === null ||\n      (this.frameIndex === 0 && Number.isFinite(timestamp))\n    ) {\n      this.basePTS = initPTSFn(timestamp, timeOffset, this.initPTS);\n      this.lastPTS = this.basePTS;\n    }\n\n    if (this.lastPTS === null) {\n      this.lastPTS = this.basePTS;\n    }\n\n    // more expressive than alternative: id3Data?.length\n    if (id3Data && id3Data.length > 0) {\n      id3Track.samples.push({\n        pts: this.lastPTS,\n        dts: this.lastPTS,\n        data: id3Data,\n        type: MetadataSchema.audioId3,\n        duration: Number.POSITIVE_INFINITY,\n      });\n    }\n\n    while (offset < length) {\n      if (this.canParse(data, offset)) {\n        const frame = this.appendFrame(track, data, offset);\n        if (frame) {\n          this.frameIndex++;\n          this.lastPTS = frame.sample.pts;\n          offset += frame.length;\n          lastDataIndex = offset;\n        } else {\n          offset = length;\n        }\n      } else if (ID3.canParse(data, offset)) {\n        // after a ID3.canParse, a call to ID3.getID3Data *should* always returns some data\n        id3Data = ID3.getID3Data(data, offset)!;\n        id3Track.samples.push({\n          pts: this.lastPTS,\n          dts: this.lastPTS,\n          data: id3Data,\n          type: MetadataSchema.audioId3,\n          duration: Number.POSITIVE_INFINITY,\n        });\n        offset += id3Data.length;\n        lastDataIndex = offset;\n      } else {\n        offset++;\n      }\n      if (offset === length && lastDataIndex !== length) {\n        const partialData = sliceUint8(data, lastDataIndex);\n        if (this.cachedData) {\n          this.cachedData = appendUint8Array(this.cachedData, partialData);\n        } else {\n          this.cachedData = partialData;\n        }\n      }\n    }\n\n    return {\n      audioTrack: track,\n      videoTrack: dummyTrack() as DemuxedVideoTrack,\n      id3Track,\n      textTrack: dummyTrack() as DemuxedUserdataTrack,\n    };\n  }\n\n  demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number\n  ): Promise<DemuxerResult> {\n    return Promise.reject(\n      new Error(`[${this}] This demuxer does not support Sample-AES decryption`)\n    );\n  }\n\n  flush(timeOffset: number): DemuxerResult {\n    // Parse cache in case of remaining frames.\n    const cachedData = this.cachedData;\n    if (cachedData) {\n      this.cachedData = null;\n      this.demux(cachedData, 0);\n    }\n\n    return {\n      audioTrack: this._audioTrack,\n      videoTrack: dummyTrack() as DemuxedVideoTrack,\n      id3Track: this._id3Track,\n      textTrack: dummyTrack() as DemuxedUserdataTrack,\n    };\n  }\n\n  destroy() {}\n}\n\n/**\n * Initialize PTS\n * <p>\n *    use timestamp unless it is undefined, NaN or Infinity\n * </p>\n */\nexport const initPTSFn = (\n  timestamp: number | undefined,\n  timeOffset: number,\n  initPTS: RationalTimestamp | null\n): number => {\n  if (Number.isFinite(timestamp as number)) {\n    return timestamp! * 90;\n  }\n  const init90kHz = initPTS\n    ? (initPTS.baseTime * 90000) / initPTS.timescale\n    : 0;\n  return timeOffset * 90000 + init90kHz;\n};\nexport default BaseAudioDemuxer;\n","/**\n * ADTS parser helper\n * @link https://wiki.multimedia.cx/index.php?title=ADTS\n */\nimport { logger } from '../utils/logger';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport type { HlsEventEmitter } from '../events';\nimport { Events } from '../events';\nimport type {\n  DemuxedAudioTrack,\n  AudioFrame,\n  AudioSample,\n} from '../types/demuxer';\n\ntype AudioConfig = {\n  config: number[];\n  samplerate: number;\n  channelCount: number;\n  codec: string;\n  manifestCodec: string;\n};\n\ntype FrameHeader = {\n  headerLength: number;\n  frameLength: number;\n};\n\nexport function getAudioConfig(\n  observer,\n  data: Uint8Array,\n  offset: number,\n  audioCodec: string\n): AudioConfig | void {\n  let adtsObjectType: number;\n  let adtsExtensionSamplingIndex: number;\n  let adtsChannelConfig: number;\n  let config: number[];\n  const userAgent = navigator.userAgent.toLowerCase();\n  const manifestCodec = audioCodec;\n  const adtsSamplingRates = [\n    96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025,\n    8000, 7350,\n  ];\n  // byte 2\n  adtsObjectType = ((data[offset + 2] & 0xc0) >>> 6) + 1;\n  const adtsSamplingIndex = (data[offset + 2] & 0x3c) >>> 2;\n  if (adtsSamplingIndex > adtsSamplingRates.length - 1) {\n    observer.trigger(Events.ERROR, {\n      type: ErrorTypes.MEDIA_ERROR,\n      details: ErrorDetails.FRAG_PARSING_ERROR,\n      fatal: true,\n      reason: `invalid ADTS sampling index:${adtsSamplingIndex}`,\n    });\n    return;\n  }\n  adtsChannelConfig = (data[offset + 2] & 0x01) << 2;\n  // byte 3\n  adtsChannelConfig |= (data[offset + 3] & 0xc0) >>> 6;\n  logger.log(\n    `manifest codec:${audioCodec}, ADTS type:${adtsObjectType}, samplingIndex:${adtsSamplingIndex}`\n  );\n  // firefox: freq less than 24kHz = AAC SBR (HE-AAC)\n  if (/firefox/i.test(userAgent)) {\n    if (adtsSamplingIndex >= 6) {\n      adtsObjectType = 5;\n      config = new Array(4);\n      // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table below, equivalent to substract 3)\n      adtsExtensionSamplingIndex = adtsSamplingIndex - 3;\n    } else {\n      adtsObjectType = 2;\n      config = new Array(2);\n      adtsExtensionSamplingIndex = adtsSamplingIndex;\n    }\n    // Android : always use AAC\n  } else if (userAgent.indexOf('android') !== -1) {\n    adtsObjectType = 2;\n    config = new Array(2);\n    adtsExtensionSamplingIndex = adtsSamplingIndex;\n  } else {\n    /*  for other browsers (Chrome/Vivaldi/Opera ...)\n        always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)\n    */\n    adtsObjectType = 5;\n    config = new Array(4);\n    // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)\n    if (\n      (audioCodec &&\n        (audioCodec.indexOf('mp4a.40.29') !== -1 ||\n          audioCodec.indexOf('mp4a.40.5') !== -1)) ||\n      (!audioCodec && adtsSamplingIndex >= 6)\n    ) {\n      // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table below, equivalent to substract 3)\n      adtsExtensionSamplingIndex = adtsSamplingIndex - 3;\n    } else {\n      // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)\n      // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.\n      if (\n        (audioCodec &&\n          audioCodec.indexOf('mp4a.40.2') !== -1 &&\n          ((adtsSamplingIndex >= 6 && adtsChannelConfig === 1) ||\n            /vivaldi/i.test(userAgent))) ||\n        (!audioCodec && adtsChannelConfig === 1)\n      ) {\n        adtsObjectType = 2;\n        config = new Array(2);\n      }\n      adtsExtensionSamplingIndex = adtsSamplingIndex;\n    }\n  }\n  /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n      ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()\n    Audio Profile / Audio Object Type\n    0: Null\n    1: AAC Main\n    2: AAC LC (Low Complexity)\n    3: AAC SSR (Scalable Sample Rate)\n    4: AAC LTP (Long Term Prediction)\n    5: SBR (Spectral Band Replication)\n    6: AAC Scalable\n   sampling freq\n    0: 96000 Hz\n    1: 88200 Hz\n    2: 64000 Hz\n    3: 48000 Hz\n    4: 44100 Hz\n    5: 32000 Hz\n    6: 24000 Hz\n    7: 22050 Hz\n    8: 16000 Hz\n    9: 12000 Hz\n    10: 11025 Hz\n    11: 8000 Hz\n    12: 7350 Hz\n    13: Reserved\n    14: Reserved\n    15: frequency is written explictly\n    Channel Configurations\n    These are the channel configurations:\n    0: Defined in AOT Specifc Config\n    1: 1 channel: front-center\n    2: 2 channels: front-left, front-right\n  */\n  // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n  config[0] = adtsObjectType << 3;\n  // samplingFrequencyIndex\n  config[0] |= (adtsSamplingIndex & 0x0e) >> 1;\n  config[1] |= (adtsSamplingIndex & 0x01) << 7;\n  // channelConfiguration\n  config[1] |= adtsChannelConfig << 3;\n  if (adtsObjectType === 5) {\n    // adtsExtensionSamplingIndex\n    config[1] |= (adtsExtensionSamplingIndex & 0x0e) >> 1;\n    config[2] = (adtsExtensionSamplingIndex & 0x01) << 7;\n    // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???\n    //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc\n    config[2] |= 2 << 2;\n    config[3] = 0;\n  }\n  return {\n    config,\n    samplerate: adtsSamplingRates[adtsSamplingIndex],\n    channelCount: adtsChannelConfig,\n    codec: 'mp4a.40.' + adtsObjectType,\n    manifestCodec,\n  };\n}\n\nexport function isHeaderPattern(data: Uint8Array, offset: number): boolean {\n  return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;\n}\n\nexport function getHeaderLength(data: Uint8Array, offset: number): number {\n  return data[offset + 1] & 0x01 ? 7 : 9;\n}\n\nexport function getFullFrameLength(data: Uint8Array, offset: number): number {\n  return (\n    ((data[offset + 3] & 0x03) << 11) |\n    (data[offset + 4] << 3) |\n    ((data[offset + 5] & 0xe0) >>> 5)\n  );\n}\n\nexport function canGetFrameLength(data: Uint8Array, offset: number): boolean {\n  return offset + 5 < data.length;\n}\n\nexport function isHeader(data: Uint8Array, offset: number): boolean {\n  // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n  // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n  // More info https://wiki.multimedia.cx/index.php?title=ADTS\n  return offset + 1 < data.length && isHeaderPattern(data, offset);\n}\n\nexport function canParse(data: Uint8Array, offset: number): boolean {\n  return (\n    canGetFrameLength(data, offset) &&\n    isHeaderPattern(data, offset) &&\n    getFullFrameLength(data, offset) <= data.length - offset\n  );\n}\n\nexport function probe(data: Uint8Array, offset: number): boolean {\n  // same as isHeader but we also check that ADTS frame follows last ADTS frame\n  // or end of data is reached\n  if (isHeader(data, offset)) {\n    // ADTS header Length\n    const headerLength = getHeaderLength(data, offset);\n    if (offset + headerLength >= data.length) {\n      return false;\n    }\n    // ADTS frame Length\n    const frameLength = getFullFrameLength(data, offset);\n    if (frameLength <= headerLength) {\n      return false;\n    }\n\n    const newOffset = offset + frameLength;\n    return newOffset === data.length || isHeader(data, newOffset);\n  }\n  return false;\n}\n\nexport function initTrackConfig(\n  track: DemuxedAudioTrack,\n  observer: HlsEventEmitter,\n  data: Uint8Array,\n  offset: number,\n  audioCodec: string\n) {\n  if (!track.samplerate) {\n    const config = getAudioConfig(observer, data, offset, audioCodec);\n    if (!config) {\n      return;\n    }\n    track.config = config.config;\n    track.samplerate = config.samplerate;\n    track.channelCount = config.channelCount;\n    track.codec = config.codec;\n    track.manifestCodec = config.manifestCodec;\n    logger.log(\n      `parsed codec:${track.codec}, rate:${config.samplerate}, channels:${config.channelCount}`\n    );\n  }\n}\n\nexport function getFrameDuration(samplerate: number): number {\n  return (1024 * 90000) / samplerate;\n}\n\nexport function parseFrameHeader(\n  data: Uint8Array,\n  offset: number\n): FrameHeader | void {\n  // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n  const headerLength = getHeaderLength(data, offset);\n  if (offset + headerLength <= data.length) {\n    // retrieve frame size\n    const frameLength = getFullFrameLength(data, offset) - headerLength;\n    if (frameLength > 0) {\n      // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}`);\n      return { headerLength, frameLength };\n    }\n  }\n}\n\nexport function appendFrame(\n  track: DemuxedAudioTrack,\n  data: Uint8Array,\n  offset: number,\n  pts: number,\n  frameIndex: number\n): AudioFrame {\n  const frameDuration = getFrameDuration(track.samplerate as number);\n  const stamp = pts + frameIndex * frameDuration;\n  const header = parseFrameHeader(data, offset);\n  let unit: Uint8Array;\n  if (header) {\n    const { frameLength, headerLength } = header;\n    const length = headerLength + frameLength;\n    const missing = Math.max(0, offset + length - data.length);\n    // logger.log(`AAC frame ${frameIndex}, pts:${stamp} length@offset/total: ${frameLength}@${offset+headerLength}/${data.byteLength} missing: ${missing}`);\n    if (missing) {\n      unit = new Uint8Array(length - headerLength);\n      unit.set(data.subarray(offset + headerLength, data.length), 0);\n    } else {\n      unit = data.subarray(offset + headerLength, offset + length);\n    }\n\n    const sample: AudioSample = {\n      unit,\n      pts: stamp,\n    };\n    if (!missing) {\n      track.samples.push(sample as AudioSample);\n    }\n\n    return { sample, length, missing };\n  }\n  // overflow incomplete header\n  const length = data.length - offset;\n  unit = new Uint8Array(length);\n  unit.set(data.subarray(offset, data.length), 0);\n  const sample: AudioSample = {\n    unit,\n    pts: stamp,\n  };\n  return { sample, length, missing: -1 };\n}\n","/**\n * AAC demuxer\n */\nimport BaseAudioDemuxer from './base-audio-demuxer';\nimport * as ADTS from './adts';\nimport { logger } from '../utils/logger';\nimport * as ID3 from '../demux/id3';\nimport type { HlsEventEmitter } from '../events';\nimport type { HlsConfig } from '../config';\n\nclass AACDemuxer extends BaseAudioDemuxer {\n  private readonly observer: HlsEventEmitter;\n  private readonly config: HlsConfig;\n\n  constructor(observer, config) {\n    super();\n    this.observer = observer;\n    this.config = config;\n  }\n\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number\n  ) {\n    super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);\n    this._audioTrack = {\n      container: 'audio/adts',\n      type: 'audio',\n      id: 2,\n      pid: -1,\n      sequenceNumber: 0,\n      segmentCodec: 'aac',\n      samples: [],\n      manifestCodec: audioCodec,\n      duration: trackDuration,\n      inputTimeScale: 90000,\n      dropped: 0,\n    };\n  }\n\n  // Source for probe info - https://wiki.multimedia.cx/index.php?title=ADTS\n  static probe(data): boolean {\n    if (!data) {\n      return false;\n    }\n\n    // Check for the ADTS sync word\n    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n    // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n    // More info https://wiki.multimedia.cx/index.php?title=ADTS\n    const id3Data = ID3.getID3Data(data, 0) || [];\n    let offset = id3Data.length;\n\n    for (let length = data.length; offset < length; offset++) {\n      if (ADTS.probe(data, offset)) {\n        logger.log('ADTS sync word found !');\n        return true;\n      }\n    }\n    return false;\n  }\n\n  canParse(data, offset) {\n    return ADTS.canParse(data, offset);\n  }\n\n  appendFrame(track, data, offset) {\n    ADTS.initTrackConfig(\n      track,\n      this.observer,\n      data,\n      offset,\n      track.manifestCodec\n    );\n    const frame = ADTS.appendFrame(\n      track,\n      data,\n      offset,\n      this.basePTS as number,\n      this.frameIndex\n    );\n    if (frame && frame.missing === 0) {\n      return frame;\n    }\n  }\n}\n\nexport default AACDemuxer;\n","/**\n * MP4 demuxer\n */\nimport {\n  Demuxer,\n  DemuxerResult,\n  PassthroughTrack,\n  DemuxedAudioTrack,\n  DemuxedUserdataTrack,\n  DemuxedMetadataTrack,\n  KeyData,\n  MetadataSchema,\n} from '../types/demuxer';\nimport {\n  findBox,\n  segmentValidRange,\n  appendUint8Array,\n  parseEmsg,\n  parseSamples,\n  parseInitSegment,\n  RemuxerTrackIdConfig,\n} from '../utils/mp4-tools';\nimport { dummyTrack } from './dummy-demuxed-track';\nimport type { HlsEventEmitter } from '../events';\nimport type { HlsConfig } from '../config';\n\nconst emsgSchemePattern = /\\/emsg[-/]ID3/i;\n\nclass MP4Demuxer implements Demuxer {\n  private remainderData: Uint8Array | null = null;\n  private timeOffset: number = 0;\n  private config: HlsConfig;\n  private videoTrack?: PassthroughTrack;\n  private audioTrack?: DemuxedAudioTrack;\n  private id3Track?: DemuxedMetadataTrack;\n  private txtTrack?: DemuxedUserdataTrack;\n\n  constructor(observer: HlsEventEmitter, config: HlsConfig) {\n    this.config = config;\n  }\n\n  public resetTimeStamp() {}\n\n  public resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number\n  ) {\n    const videoTrack = (this.videoTrack = dummyTrack(\n      'video',\n      1\n    ) as PassthroughTrack);\n    const audioTrack = (this.audioTrack = dummyTrack(\n      'audio',\n      1\n    ) as DemuxedAudioTrack);\n    const captionTrack = (this.txtTrack = dummyTrack(\n      'text',\n      1\n    ) as DemuxedUserdataTrack);\n\n    this.id3Track = dummyTrack('id3', 1) as DemuxedMetadataTrack;\n    this.timeOffset = 0;\n\n    if (!initSegment?.byteLength) {\n      return;\n    }\n    const initData = parseInitSegment(initSegment);\n\n    if (initData.video) {\n      const { id, timescale, codec } = initData.video;\n      videoTrack.id = id;\n      videoTrack.timescale = captionTrack.timescale = timescale;\n      videoTrack.codec = codec;\n    }\n\n    if (initData.audio) {\n      const { id, timescale, codec } = initData.audio;\n      audioTrack.id = id;\n      audioTrack.timescale = timescale;\n      audioTrack.codec = codec;\n    }\n\n    captionTrack.id = RemuxerTrackIdConfig.text;\n    videoTrack.sampleDuration = 0;\n    videoTrack.duration = audioTrack.duration = trackDuration;\n  }\n\n  public resetContiguity(): void {}\n\n  static probe(data: Uint8Array) {\n    // ensure we find a moof box in the first 16 kB\n    data = data.length > 16384 ? data.subarray(0, 16384) : data;\n    return findBox(data, ['moof']).length > 0;\n  }\n\n  public demux(data: Uint8Array, timeOffset: number): DemuxerResult {\n    this.timeOffset = timeOffset;\n    // Load all data into the avc track. The CMAF remuxer will look for the data in the samples object; the rest of the fields do not matter\n    let videoSamples = data;\n    const videoTrack = this.videoTrack as PassthroughTrack;\n    const textTrack = this.txtTrack as DemuxedUserdataTrack;\n    if (this.config.progressive) {\n      // Split the bytestream into two ranges: one encompassing all data up until the start of the last moof, and everything else.\n      // This is done to guarantee that we're sending valid data to MSE - when demuxing progressively, we have no guarantee\n      // that the fetch loader gives us flush moof+mdat pairs. If we push jagged data to MSE, it will throw an exception.\n      if (this.remainderData) {\n        videoSamples = appendUint8Array(this.remainderData, data);\n      }\n      const segmentedData = segmentValidRange(videoSamples);\n      this.remainderData = segmentedData.remainder;\n      videoTrack.samples = segmentedData.valid || new Uint8Array();\n    } else {\n      videoTrack.samples = videoSamples;\n    }\n\n    const id3Track = this.extractID3Track(videoTrack, timeOffset);\n    textTrack.samples = parseSamples(timeOffset, videoTrack);\n\n    return {\n      videoTrack,\n      audioTrack: this.audioTrack as DemuxedAudioTrack,\n      id3Track,\n      textTrack: this.txtTrack as DemuxedUserdataTrack,\n    };\n  }\n\n  public flush() {\n    const timeOffset = this.timeOffset;\n    const videoTrack = this.videoTrack as PassthroughTrack;\n    const textTrack = this.txtTrack as DemuxedUserdataTrack;\n    videoTrack.samples = this.remainderData || new Uint8Array();\n    this.remainderData = null;\n\n    const id3Track = this.extractID3Track(videoTrack, this.timeOffset);\n    textTrack.samples = parseSamples(timeOffset, videoTrack);\n\n    return {\n      videoTrack,\n      audioTrack: dummyTrack() as DemuxedAudioTrack,\n      id3Track,\n      textTrack: dummyTrack() as DemuxedUserdataTrack,\n    };\n  }\n\n  private extractID3Track(\n    videoTrack: PassthroughTrack,\n    timeOffset: number\n  ): DemuxedMetadataTrack {\n    const id3Track = this.id3Track as DemuxedMetadataTrack;\n    if (videoTrack.samples.length) {\n      const emsgs = findBox(videoTrack.samples, ['emsg']);\n      if (emsgs) {\n        emsgs.forEach((data: Uint8Array) => {\n          const emsgInfo = parseEmsg(data);\n          if (emsgSchemePattern.test(emsgInfo.schemeIdUri)) {\n            const pts = Number.isFinite(emsgInfo.presentationTime)\n              ? emsgInfo.presentationTime! / emsgInfo.timeScale\n              : timeOffset +\n                emsgInfo.presentationTimeDelta! / emsgInfo.timeScale;\n            let duration =\n              emsgInfo.eventDuration === 0xffffffff\n                ? Number.POSITIVE_INFINITY\n                : emsgInfo.eventDuration / emsgInfo.timeScale;\n            // Safari takes anything <= 0.001 seconds and maps it to Infinity\n            if (duration <= 0.001) {\n              duration = Number.POSITIVE_INFINITY;\n            }\n            const payload = emsgInfo.payload;\n            id3Track.samples.push({\n              data: payload,\n              len: payload.byteLength,\n              dts: pts,\n              pts: pts,\n              type: MetadataSchema.emsg,\n              duration: duration,\n            });\n          }\n        });\n      }\n    }\n    return id3Track;\n  }\n\n  demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number\n  ): Promise<DemuxerResult> {\n    return Promise.reject(\n      new Error('The MP4 demuxer does not support SAMPLE-AES decryption')\n    );\n  }\n\n  destroy() {}\n}\n\nexport default MP4Demuxer;\n","/**\n *  MPEG parser helper\n */\nimport { DemuxedAudioTrack } from '../types/demuxer';\n\nlet chromeVersion: number | null = null;\n\nconst BitratesMap = [\n  32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56,\n  64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80,\n  96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144,\n  160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144,\n  160,\n];\n\nconst SamplingRateMap = [\n  44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000,\n];\n\nconst SamplesCoefficients = [\n  // MPEG 2.5\n  [\n    0, // Reserved\n    72, // Layer3\n    144, // Layer2\n    12, // Layer1\n  ],\n  // Reserved\n  [\n    0, // Reserved\n    0, // Layer3\n    0, // Layer2\n    0, // Layer1\n  ],\n  // MPEG 2\n  [\n    0, // Reserved\n    72, // Layer3\n    144, // Layer2\n    12, // Layer1\n  ],\n  // MPEG 1\n  [\n    0, // Reserved\n    144, // Layer3\n    144, // Layer2\n    12, // Layer1\n  ],\n];\n\nconst BytesInSlot = [\n  0, // Reserved\n  1, // Layer3\n  1, // Layer2\n  4, // Layer1\n];\n\nexport function appendFrame(\n  track: DemuxedAudioTrack,\n  data: Uint8Array,\n  offset: number,\n  pts: number,\n  frameIndex: number\n) {\n  // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference\n  if (offset + 24 > data.length) {\n    return;\n  }\n\n  const header = parseHeader(data, offset);\n  if (header && offset + header.frameLength <= data.length) {\n    const frameDuration = (header.samplesPerFrame * 90000) / header.sampleRate;\n    const stamp = pts + frameIndex * frameDuration;\n    const sample = {\n      unit: data.subarray(offset, offset + header.frameLength),\n      pts: stamp,\n      dts: stamp,\n    };\n\n    track.config = [];\n    track.channelCount = header.channelCount;\n    track.samplerate = header.sampleRate;\n    track.samples.push(sample);\n\n    return { sample, length: header.frameLength, missing: 0 };\n  }\n}\n\nexport function parseHeader(data: Uint8Array, offset: number) {\n  const mpegVersion = (data[offset + 1] >> 3) & 3;\n  const mpegLayer = (data[offset + 1] >> 1) & 3;\n  const bitRateIndex = (data[offset + 2] >> 4) & 15;\n  const sampleRateIndex = (data[offset + 2] >> 2) & 3;\n  if (\n    mpegVersion !== 1 &&\n    bitRateIndex !== 0 &&\n    bitRateIndex !== 15 &&\n    sampleRateIndex !== 3\n  ) {\n    const paddingBit = (data[offset + 2] >> 1) & 1;\n    const channelMode = data[offset + 3] >> 6;\n    const columnInBitrates =\n      mpegVersion === 3 ? 3 - mpegLayer : mpegLayer === 3 ? 3 : 4;\n    const bitRate =\n      BitratesMap[columnInBitrates * 14 + bitRateIndex - 1] * 1000;\n    const columnInSampleRates =\n      mpegVersion === 3 ? 0 : mpegVersion === 2 ? 1 : 2;\n    const sampleRate =\n      SamplingRateMap[columnInSampleRates * 3 + sampleRateIndex];\n    const channelCount = channelMode === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)\n    const sampleCoefficient = SamplesCoefficients[mpegVersion][mpegLayer];\n    const bytesInSlot = BytesInSlot[mpegLayer];\n    const samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;\n    const frameLength =\n      Math.floor((sampleCoefficient * bitRate) / sampleRate + paddingBit) *\n      bytesInSlot;\n\n    if (chromeVersion === null) {\n      const userAgent = navigator.userAgent || '';\n      const result = userAgent.match(/Chrome\\/(\\d+)/i);\n      chromeVersion = result ? parseInt(result[1]) : 0;\n    }\n    const needChromeFix = !!chromeVersion && chromeVersion <= 87;\n\n    if (\n      needChromeFix &&\n      mpegLayer === 2 &&\n      bitRate >= 224000 &&\n      channelMode === 0\n    ) {\n      // Work around bug in Chromium by setting channelMode to dual-channel (01) instead of stereo (00)\n      data[offset + 3] = data[offset + 3] | 0x80;\n    }\n\n    return { sampleRate, channelCount, frameLength, samplesPerFrame };\n  }\n}\n\nexport function isHeaderPattern(data: Uint8Array, offset: number): boolean {\n  return (\n    data[offset] === 0xff &&\n    (data[offset + 1] & 0xe0) === 0xe0 &&\n    (data[offset + 1] & 0x06) !== 0x00\n  );\n}\n\nexport function isHeader(data: Uint8Array, offset: number): boolean {\n  // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n  // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n  // More info http://www.mp3-tech.org/programmer/frame_header.html\n  return offset + 1 < data.length && isHeaderPattern(data, offset);\n}\n\nexport function canParse(data: Uint8Array, offset: number): boolean {\n  const headerSize = 4;\n\n  return isHeaderPattern(data, offset) && headerSize <= data.length - offset;\n}\n\nexport function probe(data: Uint8Array, offset: number): boolean {\n  // same as isHeader but we also check that MPEG frame follows last MPEG frame\n  // or end of data is reached\n  if (offset + 1 < data.length && isHeaderPattern(data, offset)) {\n    // MPEG header Length\n    const headerLength = 4;\n    // MPEG frame Length\n    const header = parseHeader(data, offset);\n    let frameLength = headerLength;\n    if (header?.frameLength) {\n      frameLength = header.frameLength;\n    }\n\n    const newOffset = offset + frameLength;\n    return newOffset === data.length || isHeader(data, newOffset);\n  }\n  return false;\n}\n","/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\n */\n\nimport { logger } from '../utils/logger';\n\nclass ExpGolomb {\n  private data: Uint8Array;\n  public bytesAvailable: number;\n  private word: number;\n  private bitsAvailable: number;\n\n  constructor(data: Uint8Array) {\n    this.data = data;\n    // the number of bytes left to examine in this.data\n    this.bytesAvailable = data.byteLength;\n    // the current word being examined\n    this.word = 0; // :uint\n    // the number of bits left to examine in the current word\n    this.bitsAvailable = 0; // :uint\n  }\n\n  // ():void\n  loadWord(): void {\n    const data = this.data;\n    const bytesAvailable = this.bytesAvailable;\n    const position = data.byteLength - bytesAvailable;\n    const workingBytes = new Uint8Array(4);\n    const availableBytes = Math.min(4, bytesAvailable);\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(data.subarray(position, position + availableBytes));\n    this.word = new DataView(workingBytes.buffer).getUint32(0);\n    // track the amount of this.data that has been processed\n    this.bitsAvailable = availableBytes * 8;\n    this.bytesAvailable -= availableBytes;\n  }\n\n  // (count:int):void\n  skipBits(count: number): void {\n    let skipBytes; // :int\n    count = Math.min(count, this.bytesAvailable * 8 + this.bitsAvailable);\n    if (this.bitsAvailable > count) {\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    } else {\n      count -= this.bitsAvailable;\n      skipBytes = count >> 3;\n      count -= skipBytes << 3;\n      this.bytesAvailable -= skipBytes;\n      this.loadWord();\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    }\n  }\n\n  // (size:int):uint\n  readBits(size: number): number {\n    let bits = Math.min(this.bitsAvailable, size); // :uint\n    const valu = this.word >>> (32 - bits); // :uint\n    if (size > 32) {\n      logger.error('Cannot read more than 32 bits at a time');\n    }\n\n    this.bitsAvailable -= bits;\n    if (this.bitsAvailable > 0) {\n      this.word <<= bits;\n    } else if (this.bytesAvailable > 0) {\n      this.loadWord();\n    } else {\n      throw new Error('no bits available');\n    }\n\n    bits = size - bits;\n    if (bits > 0 && this.bitsAvailable) {\n      return (valu << bits) | this.readBits(bits);\n    } else {\n      return valu;\n    }\n  }\n\n  // ():uint\n  skipLZ(): number {\n    let leadingZeroCount; // :uint\n    for (\n      leadingZeroCount = 0;\n      leadingZeroCount < this.bitsAvailable;\n      ++leadingZeroCount\n    ) {\n      if ((this.word & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        this.word <<= leadingZeroCount;\n        this.bitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n    // we exhausted word and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLZ();\n  }\n\n  // ():void\n  skipUEG(): void {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  // ():void\n  skipEG(): void {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  // ():uint\n  readUEG(): number {\n    const clz = this.skipLZ(); // :uint\n    return this.readBits(clz + 1) - 1;\n  }\n\n  // ():int\n  readEG(): number {\n    const valu = this.readUEG(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    } else {\n      return -1 * (valu >>> 1); // divide by two then make it negative\n    }\n  }\n\n  // Some convenience functions\n  // :Boolean\n  readBoolean(): boolean {\n    return this.readBits(1) === 1;\n  }\n\n  // ():int\n  readUByte(): number {\n    return this.readBits(8);\n  }\n\n  // ():int\n  readUShort(): number {\n    return this.readBits(16);\n  }\n\n  // ():int\n  readUInt(): number {\n    return this.readBits(32);\n  }\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count the number of entries in this scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList(count: number): void {\n    let lastScale = 8;\n    let nextScale = 8;\n    let deltaScale;\n    for (let j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = this.readEG();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n      lastScale = nextScale === 0 ? lastScale : nextScale;\n    }\n  }\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @returns an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSPS(): {\n    width: number;\n    height: number;\n    pixelRatio: [number, number];\n  } {\n    let frameCropLeftOffset = 0;\n    let frameCropRightOffset = 0;\n    let frameCropTopOffset = 0;\n    let frameCropBottomOffset = 0;\n    let numRefFramesInPicOrderCntCycle;\n    let scalingListCount;\n    let i;\n    const readUByte = this.readUByte.bind(this);\n    const readBits = this.readBits.bind(this);\n    const readUEG = this.readUEG.bind(this);\n    const readBoolean = this.readBoolean.bind(this);\n    const skipBits = this.skipBits.bind(this);\n    const skipEG = this.skipEG.bind(this);\n    const skipUEG = this.skipUEG.bind(this);\n    const skipScalingList = this.skipScalingList.bind(this);\n\n    readUByte();\n    const profileIdc = readUByte(); // profile_idc\n    readBits(5); // profileCompat constraint_set[0-4]_flag, u(5)\n    skipBits(3); // reserved_zero_3bits u(3),\n    readUByte(); // level_idc u(8)\n    skipUEG(); // seq_parameter_set_id\n    // some profiles have more optional data we don't need\n    if (\n      profileIdc === 100 ||\n      profileIdc === 110 ||\n      profileIdc === 122 ||\n      profileIdc === 244 ||\n      profileIdc === 44 ||\n      profileIdc === 83 ||\n      profileIdc === 86 ||\n      profileIdc === 118 ||\n      profileIdc === 128\n    ) {\n      const chromaFormatIdc = readUEG();\n      if (chromaFormatIdc === 3) {\n        skipBits(1);\n      } // separate_colour_plane_flag\n\n      skipUEG(); // bit_depth_luma_minus8\n      skipUEG(); // bit_depth_chroma_minus8\n      skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (readBoolean()) {\n        // seq_scaling_matrix_present_flag\n        scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (readBoolean()) {\n            // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16);\n            } else {\n              skipScalingList(64);\n            }\n          }\n        }\n      }\n    }\n    skipUEG(); // log2_max_frame_num_minus4\n    const picOrderCntType = readUEG();\n    if (picOrderCntType === 0) {\n      readUEG(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      skipBits(1); // delta_pic_order_always_zero_flag\n      skipEG(); // offset_for_non_ref_pic\n      skipEG(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = readUEG();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        skipEG();\n      } // offset_for_ref_frame[ i ]\n    }\n    skipUEG(); // max_num_ref_frames\n    skipBits(1); // gaps_in_frame_num_value_allowed_flag\n    const picWidthInMbsMinus1 = readUEG();\n    const picHeightInMapUnitsMinus1 = readUEG();\n    const frameMbsOnlyFlag = readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      skipBits(1);\n    } // mb_adaptive_frame_field_flag\n\n    skipBits(1); // direct_8x8_inference_flag\n    if (readBoolean()) {\n      // frame_cropping_flag\n      frameCropLeftOffset = readUEG();\n      frameCropRightOffset = readUEG();\n      frameCropTopOffset = readUEG();\n      frameCropBottomOffset = readUEG();\n    }\n    let pixelRatio: [number, number] = [1, 1];\n    if (readBoolean()) {\n      // vui_parameters_present_flag\n      if (readBoolean()) {\n        // aspect_ratio_info_present_flag\n        const aspectRatioIdc = readUByte();\n        switch (aspectRatioIdc) {\n          case 1:\n            pixelRatio = [1, 1];\n            break;\n          case 2:\n            pixelRatio = [12, 11];\n            break;\n          case 3:\n            pixelRatio = [10, 11];\n            break;\n          case 4:\n            pixelRatio = [16, 11];\n            break;\n          case 5:\n            pixelRatio = [40, 33];\n            break;\n          case 6:\n            pixelRatio = [24, 11];\n            break;\n          case 7:\n            pixelRatio = [20, 11];\n            break;\n          case 8:\n            pixelRatio = [32, 11];\n            break;\n          case 9:\n            pixelRatio = [80, 33];\n            break;\n          case 10:\n            pixelRatio = [18, 11];\n            break;\n          case 11:\n            pixelRatio = [15, 11];\n            break;\n          case 12:\n            pixelRatio = [64, 33];\n            break;\n          case 13:\n            pixelRatio = [160, 99];\n            break;\n          case 14:\n            pixelRatio = [4, 3];\n            break;\n          case 15:\n            pixelRatio = [3, 2];\n            break;\n          case 16:\n            pixelRatio = [2, 1];\n            break;\n          case 255: {\n            pixelRatio = [\n              (readUByte() << 8) | readUByte(),\n              (readUByte() << 8) | readUByte(),\n            ];\n            break;\n          }\n        }\n      }\n    }\n    return {\n      width: Math.ceil(\n        (picWidthInMbsMinus1 + 1) * 16 -\n          frameCropLeftOffset * 2 -\n          frameCropRightOffset * 2\n      ),\n      height:\n        (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 -\n        (frameMbsOnlyFlag ? 2 : 4) *\n          (frameCropTopOffset + frameCropBottomOffset),\n      pixelRatio: pixelRatio,\n    };\n  }\n\n  readSliceType() {\n    // skip NALu type\n    this.readUByte();\n    // discard first_mb_in_slice\n    this.readUEG();\n    // return slice_type\n    return this.readUEG();\n  }\n}\n\nexport default ExpGolomb;\n","/**\n * SAMPLE-AES decrypter\n */\n\nimport { HlsConfig } from '../config';\nimport Decrypter from '../crypt/decrypter';\nimport { HlsEventEmitter } from '../events';\nimport type {\n  AudioSample,\n  AvcSample,\n  AvcSampleUnit,\n  DemuxedVideoTrack,\n  KeyData,\n} from '../types/demuxer';\nimport { discardEPB } from '../utils/mp4-tools';\n\nclass SampleAesDecrypter {\n  private keyData: KeyData;\n  private decrypter: Decrypter;\n\n  constructor(observer: HlsEventEmitter, config: HlsConfig, keyData: KeyData) {\n    this.keyData = keyData;\n    this.decrypter = new Decrypter(config, {\n      removePKCS7Padding: false,\n    });\n  }\n\n  decryptBuffer(encryptedData: Uint8Array | ArrayBuffer): Promise<ArrayBuffer> {\n    return this.decrypter.decrypt(\n      encryptedData,\n      this.keyData.key.buffer,\n      this.keyData.iv.buffer\n    );\n  }\n\n  // AAC - encrypt all full 16 bytes blocks starting from offset 16\n  private decryptAacSample(\n    samples: AudioSample[],\n    sampleIndex: number,\n    callback: () => void\n  ) {\n    const curUnit = samples[sampleIndex].unit;\n    if (curUnit.length <= 16) {\n      // No encrypted portion in this sample (first 16 bytes is not\n      // encrypted, see https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/HLS_Sample_Encryption/Encryption/Encryption.html),\n      return;\n    }\n    const encryptedData = curUnit.subarray(\n      16,\n      curUnit.length - (curUnit.length % 16)\n    );\n    const encryptedBuffer = encryptedData.buffer.slice(\n      encryptedData.byteOffset,\n      encryptedData.byteOffset + encryptedData.length\n    );\n\n    this.decryptBuffer(encryptedBuffer).then((decryptedBuffer: ArrayBuffer) => {\n      const decryptedData = new Uint8Array(decryptedBuffer);\n      curUnit.set(decryptedData, 16);\n\n      if (!this.decrypter.isSync()) {\n        this.decryptAacSamples(samples, sampleIndex + 1, callback);\n      }\n    });\n  }\n\n  decryptAacSamples(\n    samples: AudioSample[],\n    sampleIndex: number,\n    callback: () => void\n  ) {\n    for (; ; sampleIndex++) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      if (samples[sampleIndex].unit.length < 32) {\n        continue;\n      }\n\n      this.decryptAacSample(samples, sampleIndex, callback);\n\n      if (!this.decrypter.isSync()) {\n        return;\n      }\n    }\n  }\n\n  // AVC - encrypt one 16 bytes block out of ten, starting from offset 32\n  getAvcEncryptedData(decodedData: Uint8Array) {\n    const encryptedDataLen =\n      Math.floor((decodedData.length - 48) / 160) * 16 + 16;\n    const encryptedData = new Int8Array(encryptedDataLen);\n    let outputPos = 0;\n    for (\n      let inputPos = 32;\n      inputPos < decodedData.length - 16;\n      inputPos += 160, outputPos += 16\n    ) {\n      encryptedData.set(\n        decodedData.subarray(inputPos, inputPos + 16),\n        outputPos\n      );\n    }\n\n    return encryptedData;\n  }\n\n  getAvcDecryptedUnit(\n    decodedData: Uint8Array,\n    decryptedData: ArrayLike<number> | ArrayBuffer | SharedArrayBuffer\n  ) {\n    const uint8DecryptedData = new Uint8Array(decryptedData);\n    let inputPos = 0;\n    for (\n      let outputPos = 32;\n      outputPos < decodedData.length - 16;\n      outputPos += 160, inputPos += 16\n    ) {\n      decodedData.set(\n        uint8DecryptedData.subarray(inputPos, inputPos + 16),\n        outputPos\n      );\n    }\n\n    return decodedData;\n  }\n\n  decryptAvcSample(\n    samples: AvcSample[],\n    sampleIndex: number,\n    unitIndex: number,\n    callback: () => void,\n    curUnit: AvcSampleUnit\n  ) {\n    const decodedData = discardEPB(curUnit.data);\n    const encryptedData = this.getAvcEncryptedData(decodedData);\n\n    this.decryptBuffer(encryptedData.buffer).then(\n      (decryptedBuffer: ArrayBuffer) => {\n        curUnit.data = this.getAvcDecryptedUnit(decodedData, decryptedBuffer);\n\n        if (!this.decrypter.isSync()) {\n          this.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);\n        }\n      }\n    );\n  }\n\n  decryptAvcSamples(\n    samples: DemuxedVideoTrack['samples'],\n    sampleIndex: number,\n    unitIndex: number,\n    callback: () => void\n  ) {\n    if (samples instanceof Uint8Array) {\n      throw new Error('Cannot decrypt samples of type Uint8Array');\n    }\n\n    for (; ; sampleIndex++, unitIndex = 0) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      const curUnits = samples[sampleIndex].units;\n      for (; ; unitIndex++) {\n        if (unitIndex >= curUnits.length) {\n          break;\n        }\n\n        const curUnit = curUnits[unitIndex];\n        if (\n          curUnit.data.length <= 48 ||\n          (curUnit.type !== 1 && curUnit.type !== 5)\n        ) {\n          continue;\n        }\n\n        this.decryptAvcSample(\n          samples,\n          sampleIndex,\n          unitIndex,\n          callback,\n          curUnit\n        );\n\n        if (!this.decrypter.isSync()) {\n          return;\n        }\n      }\n    }\n  }\n}\n\nexport default SampleAesDecrypter;\n","/**\n * highly optimized TS demuxer:\n * parse PAT, PMT\n * extract PES packet from audio and video PIDs\n * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet\n * trigger the remuxer upon parsing completion\n * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.\n * it also controls the remuxing process :\n * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.\n */\n\nimport * as ADTS from './adts';\nimport * as MpegAudio from './mpegaudio';\nimport ExpGolomb from './exp-golomb';\nimport SampleAesDecrypter from './sample-aes';\nimport { Events } from '../events';\nimport {\n  appendUint8Array,\n  parseSEIMessageFromNALu,\n  RemuxerTrackIdConfig,\n} from '../utils/mp4-tools';\nimport { logger } from '../utils/logger';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport type { HlsConfig } from '../config';\nimport type { HlsEventEmitter } from '../events';\nimport {\n  DemuxedAvcTrack,\n  DemuxedAudioTrack,\n  DemuxedTrack,\n  Demuxer,\n  DemuxerResult,\n  AvcSample,\n  DemuxedMetadataTrack,\n  DemuxedUserdataTrack,\n  ElementaryStreamData,\n  KeyData,\n  MetadataSchema,\n} from '../types/demuxer';\nimport { AudioFrame } from '../types/demuxer';\n\ntype ParsedTimestamp = {\n  pts?: number;\n  dts?: number;\n};\n\ntype PES = ParsedTimestamp & {\n  data: Uint8Array;\n  len: number;\n};\n\ntype ParsedAvcSample = ParsedTimestamp & Omit<AvcSample, 'pts' | 'dts'>;\n\nexport interface TypeSupported {\n  mpeg: boolean;\n  mp3: boolean;\n  mp4: boolean;\n}\n\nconst PACKET_LENGTH = 188;\n\nclass TSDemuxer implements Demuxer {\n  private readonly observer: HlsEventEmitter;\n  private readonly config: HlsConfig;\n  private typeSupported: TypeSupported;\n\n  private sampleAes: SampleAesDecrypter | null = null;\n  private pmtParsed: boolean = false;\n  private audioCodec?: string;\n  private videoCodec?: string;\n  private _duration: number = 0;\n  private _pmtId: number = -1;\n\n  private _avcTrack?: DemuxedAvcTrack;\n  private _audioTrack?: DemuxedAudioTrack;\n  private _id3Track?: DemuxedMetadataTrack;\n  private _txtTrack?: DemuxedUserdataTrack;\n  private aacOverFlow: AudioFrame | null = null;\n  private avcSample: ParsedAvcSample | null = null;\n  private remainderData: Uint8Array | null = null;\n\n  constructor(\n    observer: HlsEventEmitter,\n    config: HlsConfig,\n    typeSupported: TypeSupported\n  ) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n  }\n\n  static probe(data: Uint8Array) {\n    const syncOffset = TSDemuxer.syncOffset(data);\n    if (syncOffset > 0) {\n      logger.warn(\n        `MPEG2-TS detected but first sync word found @ offset ${syncOffset}`\n      );\n    }\n    return syncOffset !== -1;\n  }\n\n  static syncOffset(data: Uint8Array): number {\n    const length = data.length;\n    const scanwindow =\n      Math.min(PACKET_LENGTH * 5, data.length - PACKET_LENGTH) + 1;\n    let i = 0;\n    while (i < scanwindow) {\n      // a TS init segment should contain at least 2 TS packets: PAT and PMT, each starting with 0x47\n      let foundPat = false;\n      for (let j = i; j < length; j += PACKET_LENGTH) {\n        if (data[j] === 0x47) {\n          if (!foundPat && parsePID(data, j) === 0) {\n            foundPat = true;\n          }\n          if (foundPat && j + PACKET_LENGTH > scanwindow) {\n            return i;\n          }\n        } else {\n          break;\n        }\n      }\n      i++;\n    }\n    return -1;\n  }\n\n  /**\n   * Creates a track model internal to demuxer used to drive remuxing input\n   */\n  static createTrack(\n    type: 'audio' | 'video' | 'id3' | 'text',\n    duration?: number\n  ): DemuxedTrack {\n    return {\n      container:\n        type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,\n      type,\n      id: RemuxerTrackIdConfig[type],\n      pid: -1,\n      inputTimeScale: 90000,\n      sequenceNumber: 0,\n      samples: [],\n      dropped: 0,\n      duration: type === 'audio' ? duration : undefined,\n    };\n  }\n\n  /**\n   * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)\n   * Resets all internal track instances of the demuxer.\n   */\n  public resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string,\n    videoCodec: string,\n    trackDuration: number\n  ) {\n    this.pmtParsed = false;\n    this._pmtId = -1;\n\n    this._avcTrack = TSDemuxer.createTrack('video') as DemuxedAvcTrack;\n    this._audioTrack = TSDemuxer.createTrack(\n      'audio',\n      trackDuration\n    ) as DemuxedAudioTrack;\n    this._id3Track = TSDemuxer.createTrack('id3') as DemuxedMetadataTrack;\n    this._txtTrack = TSDemuxer.createTrack('text') as DemuxedUserdataTrack;\n    this._audioTrack.segmentCodec = 'aac';\n\n    // flush any partial content\n    this.aacOverFlow = null;\n    this.avcSample = null;\n    this.remainderData = null;\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this._duration = trackDuration;\n  }\n\n  public resetTimeStamp() {}\n\n  public resetContiguity(): void {\n    const { _audioTrack, _avcTrack, _id3Track } = this;\n    if (_audioTrack) {\n      _audioTrack.pesData = null;\n    }\n    if (_avcTrack) {\n      _avcTrack.pesData = null;\n    }\n    if (_id3Track) {\n      _id3Track.pesData = null;\n    }\n    this.aacOverFlow = null;\n    this.avcSample = null;\n    this.remainderData = null;\n  }\n\n  public demux(\n    data: Uint8Array,\n    timeOffset: number,\n    isSampleAes = false,\n    flush = false\n  ): DemuxerResult {\n    if (!isSampleAes) {\n      this.sampleAes = null;\n    }\n\n    let pes: PES | null;\n\n    const videoTrack = this._avcTrack as DemuxedAvcTrack;\n    const audioTrack = this._audioTrack as DemuxedAudioTrack;\n    const id3Track = this._id3Track as DemuxedMetadataTrack;\n    const textTrack = this._txtTrack as DemuxedUserdataTrack;\n\n    let avcId = videoTrack.pid;\n    let avcData = videoTrack.pesData;\n    let audioId = audioTrack.pid;\n    let id3Id = id3Track.pid;\n    let audioData = audioTrack.pesData;\n    let id3Data = id3Track.pesData;\n    let unknownPID: number | null = null;\n    let pmtParsed = this.pmtParsed;\n    let pmtId = this._pmtId;\n\n    let len = data.length;\n    if (this.remainderData) {\n      data = appendUint8Array(this.remainderData, data);\n      len = data.length;\n      this.remainderData = null;\n    }\n\n    if (len < PACKET_LENGTH && !flush) {\n      this.remainderData = data;\n      return {\n        audioTrack,\n        videoTrack,\n        id3Track,\n        textTrack,\n      };\n    }\n\n    const syncOffset = Math.max(0, TSDemuxer.syncOffset(data));\n    len -= (len - syncOffset) % PACKET_LENGTH;\n    if (len < data.byteLength && !flush) {\n      this.remainderData = new Uint8Array(\n        data.buffer,\n        len,\n        data.buffer.byteLength - len\n      );\n    }\n\n    // loop through TS packets\n    let tsPacketErrors = 0;\n    for (let start = syncOffset; start < len; start += PACKET_LENGTH) {\n      if (data[start] === 0x47) {\n        const stt = !!(data[start + 1] & 0x40);\n        const pid = parsePID(data, start);\n        const atf = (data[start + 3] & 0x30) >> 4;\n\n        // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.\n        let offset: number;\n        if (atf > 1) {\n          offset = start + 5 + data[start + 4];\n          // continue if there is only adaptation field\n          if (offset === start + PACKET_LENGTH) {\n            continue;\n          }\n        } else {\n          offset = start + 4;\n        }\n        switch (pid) {\n          case avcId:\n            if (stt) {\n              if (avcData && (pes = parsePES(avcData))) {\n                this.parseAVCPES(videoTrack, textTrack, pes, false);\n              }\n\n              avcData = { data: [], size: 0 };\n            }\n            if (avcData) {\n              avcData.data.push(data.subarray(offset, start + PACKET_LENGTH));\n              avcData.size += start + PACKET_LENGTH - offset;\n            }\n            break;\n          case audioId:\n            if (stt) {\n              if (audioData && (pes = parsePES(audioData))) {\n                switch (audioTrack.segmentCodec) {\n                  case 'aac':\n                    this.parseAACPES(audioTrack, pes);\n                    break;\n                  case 'mp3':\n                    this.parseMPEGPES(audioTrack, pes);\n                    break;\n                }\n              }\n              audioData = { data: [], size: 0 };\n            }\n            if (audioData) {\n              audioData.data.push(data.subarray(offset, start + PACKET_LENGTH));\n              audioData.size += start + PACKET_LENGTH - offset;\n            }\n            break;\n          case id3Id:\n            if (stt) {\n              if (id3Data && (pes = parsePES(id3Data))) {\n                this.parseID3PES(id3Track, pes);\n              }\n\n              id3Data = { data: [], size: 0 };\n            }\n            if (id3Data) {\n              id3Data.data.push(data.subarray(offset, start + PACKET_LENGTH));\n              id3Data.size += start + PACKET_LENGTH - offset;\n            }\n            break;\n          case 0:\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n\n            pmtId = this._pmtId = parsePAT(data, offset);\n            // logger.log('PMT PID:'  + this._pmtId);\n            break;\n          case pmtId: {\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n\n            const parsedPIDs = parsePMT(\n              data,\n              offset,\n              this.typeSupported,\n              isSampleAes\n            );\n\n            // only update track id if track PID found while parsing PMT\n            // this is to avoid resetting the PID to -1 in case\n            // track PID transiently disappears from the stream\n            // this could happen in case of transient missing audio samples for example\n            // NOTE this is only the PID of the track as found in TS,\n            // but we are not using this for MP4 track IDs.\n            avcId = parsedPIDs.avc;\n            if (avcId > 0) {\n              videoTrack.pid = avcId;\n            }\n\n            audioId = parsedPIDs.audio;\n            if (audioId > 0) {\n              audioTrack.pid = audioId;\n              audioTrack.segmentCodec = parsedPIDs.segmentCodec;\n            }\n            id3Id = parsedPIDs.id3;\n            if (id3Id > 0) {\n              id3Track.pid = id3Id;\n            }\n\n            if (unknownPID !== null && !pmtParsed) {\n              logger.warn(\n                `MPEG-TS PMT found at ${start} after unknown PID '${unknownPID}'. Backtracking to sync byte @${syncOffset} to parse all TS packets.`\n              );\n              unknownPID = null;\n              // we set it to -188, the += 188 in the for loop will reset start to 0\n              start = syncOffset - 188;\n            }\n            pmtParsed = this.pmtParsed = true;\n            break;\n          }\n          case 0x11:\n          case 0x1fff:\n            break;\n          default:\n            unknownPID = pid;\n            break;\n        }\n      } else {\n        tsPacketErrors++;\n      }\n    }\n\n    if (tsPacketErrors > 0) {\n      const error = new Error(\n        `Found ${tsPacketErrors} TS packet/s that do not start with 0x47`\n      );\n      this.observer.emit(Events.ERROR, Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.FRAG_PARSING_ERROR,\n        fatal: false,\n        error,\n        reason: error.message,\n      });\n    }\n\n    videoTrack.pesData = avcData;\n    audioTrack.pesData = audioData;\n    id3Track.pesData = id3Data;\n\n    const demuxResult: DemuxerResult = {\n      audioTrack,\n      videoTrack,\n      id3Track,\n      textTrack,\n    };\n\n    if (flush) {\n      this.extractRemainingSamples(demuxResult);\n    }\n\n    return demuxResult;\n  }\n\n  public flush(): DemuxerResult | Promise<DemuxerResult> {\n    const { remainderData } = this;\n    this.remainderData = null;\n    let result: DemuxerResult;\n    if (remainderData) {\n      result = this.demux(remainderData, -1, false, true);\n    } else {\n      result = {\n        videoTrack: this._avcTrack as DemuxedAvcTrack,\n        audioTrack: this._audioTrack as DemuxedAudioTrack,\n        id3Track: this._id3Track as DemuxedMetadataTrack,\n        textTrack: this._txtTrack as DemuxedUserdataTrack,\n      };\n    }\n    this.extractRemainingSamples(result);\n    if (this.sampleAes) {\n      return this.decrypt(result, this.sampleAes);\n    }\n    return result;\n  }\n\n  private extractRemainingSamples(demuxResult: DemuxerResult) {\n    const { audioTrack, videoTrack, id3Track, textTrack } = demuxResult;\n    const avcData = videoTrack.pesData;\n    const audioData = audioTrack.pesData;\n    const id3Data = id3Track.pesData;\n    // try to parse last PES packets\n    let pes: PES | null;\n    if (avcData && (pes = parsePES(avcData))) {\n      this.parseAVCPES(\n        videoTrack as DemuxedAvcTrack,\n        textTrack as DemuxedUserdataTrack,\n        pes,\n        true\n      );\n      videoTrack.pesData = null;\n    } else {\n      // either avcData null or PES truncated, keep it for next frag parsing\n      videoTrack.pesData = avcData;\n    }\n\n    if (audioData && (pes = parsePES(audioData))) {\n      switch (audioTrack.segmentCodec) {\n        case 'aac':\n          this.parseAACPES(audioTrack, pes);\n          break;\n        case 'mp3':\n          this.parseMPEGPES(audioTrack, pes);\n          break;\n      }\n      audioTrack.pesData = null;\n    } else {\n      if (audioData?.size) {\n        logger.log(\n          'last AAC PES packet truncated,might overlap between fragments'\n        );\n      }\n\n      // either audioData null or PES truncated, keep it for next frag parsing\n      audioTrack.pesData = audioData;\n    }\n\n    if (id3Data && (pes = parsePES(id3Data))) {\n      this.parseID3PES(id3Track, pes);\n      id3Track.pesData = null;\n    } else {\n      // either id3Data null or PES truncated, keep it for next frag parsing\n      id3Track.pesData = id3Data;\n    }\n  }\n\n  public demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number\n  ): Promise<DemuxerResult> {\n    const demuxResult = this.demux(\n      data,\n      timeOffset,\n      true,\n      !this.config.progressive\n    );\n    const sampleAes = (this.sampleAes = new SampleAesDecrypter(\n      this.observer,\n      this.config,\n      keyData\n    ));\n    return this.decrypt(demuxResult, sampleAes);\n  }\n\n  private decrypt(\n    demuxResult: DemuxerResult,\n    sampleAes: SampleAesDecrypter\n  ): Promise<DemuxerResult> {\n    return new Promise((resolve) => {\n      const { audioTrack, videoTrack } = demuxResult;\n      if (audioTrack.samples && audioTrack.segmentCodec === 'aac') {\n        sampleAes.decryptAacSamples(audioTrack.samples, 0, () => {\n          if (videoTrack.samples) {\n            sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, () => {\n              resolve(demuxResult);\n            });\n          } else {\n            resolve(demuxResult);\n          }\n        });\n      } else if (videoTrack.samples) {\n        sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, () => {\n          resolve(demuxResult);\n        });\n      }\n    });\n  }\n\n  public destroy() {\n    this._duration = 0;\n  }\n\n  private parseAVCPES(\n    track: DemuxedAvcTrack,\n    textTrack: DemuxedUserdataTrack,\n    pes: PES,\n    last: boolean\n  ) {\n    const units = this.parseAVCNALu(track, pes.data);\n    const debug = false;\n    let avcSample = this.avcSample;\n    let push: boolean;\n    let spsfound = false;\n    // free pes.data to save up some memory\n    (pes as any).data = null;\n\n    // if new NAL units found and last sample still there, let's push ...\n    // this helps parsing streams with missing AUD (only do this if AUD never found)\n    if (avcSample && units.length && !track.audFound) {\n      pushAccessUnit(avcSample, track);\n      avcSample = this.avcSample = createAVCSample(false, pes.pts, pes.dts, '');\n    }\n\n    units.forEach((unit) => {\n      switch (unit.type) {\n        // NDR\n        case 1: {\n          push = true;\n          if (!avcSample) {\n            avcSample = this.avcSample = createAVCSample(\n              true,\n              pes.pts,\n              pes.dts,\n              ''\n            );\n          }\n\n          if (debug) {\n            avcSample.debug += 'NDR ';\n          }\n\n          avcSample.frame = true;\n          const data = unit.data;\n          // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)\n          if (spsfound && data.length > 4) {\n            // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR\n            const sliceType = new ExpGolomb(data).readSliceType();\n            // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice\n            // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.\n            // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.\n            // I slice: A slice that is not an SI slice that is decoded using intra prediction only.\n            // if (sliceType === 2 || sliceType === 7) {\n            if (\n              sliceType === 2 ||\n              sliceType === 4 ||\n              sliceType === 7 ||\n              sliceType === 9\n            ) {\n              avcSample.key = true;\n            }\n          }\n          break;\n          // IDR\n        }\n        case 5:\n          push = true;\n          // handle PES not starting with AUD\n          if (!avcSample) {\n            avcSample = this.avcSample = createAVCSample(\n              true,\n              pes.pts,\n              pes.dts,\n              ''\n            );\n          }\n\n          if (debug) {\n            avcSample.debug += 'IDR ';\n          }\n\n          avcSample.key = true;\n          avcSample.frame = true;\n          break;\n        // SEI\n        case 6: {\n          push = true;\n          if (debug && avcSample) {\n            avcSample.debug += 'SEI ';\n          }\n          parseSEIMessageFromNALu(\n            unit.data,\n            1,\n            pes.pts as number,\n            textTrack.samples\n          );\n          break;\n          // SPS\n        }\n        case 7:\n          push = true;\n          spsfound = true;\n          if (debug && avcSample) {\n            avcSample.debug += 'SPS ';\n          }\n\n          if (!track.sps) {\n            const sps = unit.data;\n            const expGolombDecoder = new ExpGolomb(sps);\n            const config = expGolombDecoder.readSPS();\n            track.width = config.width;\n            track.height = config.height;\n            track.pixelRatio = config.pixelRatio;\n            track.sps = [sps];\n            track.duration = this._duration;\n            const codecarray = sps.subarray(1, 4);\n            let codecstring = 'avc1.';\n            for (let i = 0; i < 3; i++) {\n              let h = codecarray[i].toString(16);\n              if (h.length < 2) {\n                h = '0' + h;\n              }\n\n              codecstring += h;\n            }\n            track.codec = codecstring;\n          }\n          break;\n        // PPS\n        case 8:\n          push = true;\n          if (debug && avcSample) {\n            avcSample.debug += 'PPS ';\n          }\n\n          if (!track.pps) {\n            track.pps = [unit.data];\n          }\n\n          break;\n        // AUD\n        case 9:\n          push = false;\n          track.audFound = true;\n          if (avcSample) {\n            pushAccessUnit(avcSample, track);\n          }\n\n          avcSample = this.avcSample = createAVCSample(\n            false,\n            pes.pts,\n            pes.dts,\n            debug ? 'AUD ' : ''\n          );\n          break;\n        // Filler Data\n        case 12:\n          push = true;\n          break;\n        default:\n          push = false;\n          if (avcSample) {\n            avcSample.debug += 'unknown NAL ' + unit.type + ' ';\n          }\n\n          break;\n      }\n      if (avcSample && push) {\n        const units = avcSample.units;\n        units.push(unit);\n      }\n    });\n    // if last PES packet, push samples\n    if (last && avcSample) {\n      pushAccessUnit(avcSample, track);\n      this.avcSample = null;\n    }\n  }\n\n  private getLastNalUnit(samples: AvcSample[]) {\n    let avcSample = this.avcSample;\n    let lastUnit;\n    // try to fallback to previous sample if current one is empty\n    if (!avcSample || avcSample.units.length === 0) {\n      avcSample = samples[samples.length - 1];\n    }\n    if (avcSample?.units) {\n      const units = avcSample.units;\n      lastUnit = units[units.length - 1];\n    }\n    return lastUnit;\n  }\n\n  private parseAVCNALu(\n    track: DemuxedAvcTrack,\n    array: Uint8Array\n  ): Array<{\n    data: Uint8Array;\n    type: number;\n    state?: number;\n  }> {\n    const len = array.byteLength;\n    let state = track.naluState || 0;\n    const lastState = state;\n    const units = [] as Array<{\n      data: Uint8Array;\n      type: number;\n      state?: number;\n    }>;\n    let i = 0;\n    let value;\n    let overflow;\n    let unitType;\n    let lastUnitStart = -1;\n    let lastUnitType: number = 0;\n    // logger.log('PES:' + Hex.hexDump(array));\n\n    if (state === -1) {\n      // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet\n      lastUnitStart = 0;\n      // NALu type is value read from offset 0\n      lastUnitType = array[0] & 0x1f;\n      state = 0;\n      i = 1;\n    }\n\n    while (i < len) {\n      value = array[i++];\n      // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case\n      if (!state) {\n        state = value ? 0 : 1;\n        continue;\n      }\n      if (state === 1) {\n        state = value ? 0 : 2;\n        continue;\n      }\n      // here we have state either equal to 2 or 3\n      if (!value) {\n        state = 3;\n      } else if (value === 1) {\n        if (lastUnitStart >= 0) {\n          const unit = {\n            data: array.subarray(lastUnitStart, i - state - 1),\n            type: lastUnitType,\n          };\n          // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n          units.push(unit);\n        } else {\n          // lastUnitStart is undefined => this is the first start code found in this PES packet\n          // first check if start code delimiter is overlapping between 2 PES packets,\n          // ie it started in last packet (lastState not zero)\n          // and ended at the beginning of this PES packet (i <= 4 - lastState)\n          const lastUnit = this.getLastNalUnit(track.samples);\n          if (lastUnit) {\n            if (lastState && i <= 4 - lastState) {\n              // start delimiter overlapping between PES packets\n              // strip start delimiter bytes from the end of last NAL unit\n              // check if lastUnit had a state different from zero\n              if (lastUnit.state) {\n                // strip last bytes\n                lastUnit.data = lastUnit.data.subarray(\n                  0,\n                  lastUnit.data.byteLength - lastState\n                );\n              }\n            }\n            // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.\n            overflow = i - state - 1;\n            if (overflow > 0) {\n              // logger.log('first NALU found with overflow:' + overflow);\n              const tmp = new Uint8Array(lastUnit.data.byteLength + overflow);\n              tmp.set(lastUnit.data, 0);\n              tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);\n              lastUnit.data = tmp;\n              lastUnit.state = 0;\n            }\n          }\n        }\n        // check if we can read unit type\n        if (i < len) {\n          unitType = array[i] & 0x1f;\n          // logger.log('find NALU @ offset:' + i + ',type:' + unitType);\n          lastUnitStart = i;\n          lastUnitType = unitType;\n          state = 0;\n        } else {\n          // not enough byte to read unit type. let's read it on next PES parsing\n          state = -1;\n        }\n      } else {\n        state = 0;\n      }\n    }\n    if (lastUnitStart >= 0 && state >= 0) {\n      const unit = {\n        data: array.subarray(lastUnitStart, len),\n        type: lastUnitType,\n        state: state,\n      };\n      units.push(unit);\n      // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);\n    }\n    // no NALu found\n    if (units.length === 0) {\n      // append pes.data to previous NAL unit\n      const lastUnit = this.getLastNalUnit(track.samples);\n      if (lastUnit) {\n        const tmp = new Uint8Array(lastUnit.data.byteLength + array.byteLength);\n        tmp.set(lastUnit.data, 0);\n        tmp.set(array, lastUnit.data.byteLength);\n        lastUnit.data = tmp;\n      }\n    }\n    track.naluState = state;\n    return units;\n  }\n\n  private parseAACPES(track: DemuxedAudioTrack, pes: PES) {\n    let startOffset = 0;\n    const aacOverFlow = this.aacOverFlow;\n    let data = pes.data;\n    if (aacOverFlow) {\n      this.aacOverFlow = null;\n      const frameMissingBytes = aacOverFlow.missing;\n      const sampleLength = aacOverFlow.sample.unit.byteLength;\n      // logger.log(`AAC: append overflowing ${sampleLength} bytes to beginning of new PES`);\n      if (frameMissingBytes === -1) {\n        const tmp = new Uint8Array(sampleLength + data.byteLength);\n        tmp.set(aacOverFlow.sample.unit, 0);\n        tmp.set(data, sampleLength);\n        data = tmp;\n      } else {\n        const frameOverflowBytes = sampleLength - frameMissingBytes;\n        aacOverFlow.sample.unit.set(\n          data.subarray(0, frameMissingBytes),\n          frameOverflowBytes\n        );\n        track.samples.push(aacOverFlow.sample);\n        startOffset = aacOverFlow.missing;\n      }\n    }\n    // look for ADTS header (0xFFFx)\n    let offset: number;\n    let len: number;\n    for (offset = startOffset, len = data.length; offset < len - 1; offset++) {\n      if (ADTS.isHeader(data, offset)) {\n        break;\n      }\n    }\n    // if ADTS header does not start straight from the beginning of the PES payload, raise an error\n    if (offset !== startOffset) {\n      let reason: string;\n      const recoverable = offset < len - 1;\n      if (recoverable) {\n        reason = `AAC PES did not start with ADTS header,offset:${offset}`;\n      } else {\n        reason = 'No ADTS header found in AAC PES';\n      }\n      const error = new Error(reason);\n      logger.warn(`parsing error: ${reason}`);\n      this.observer.emit(Events.ERROR, Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.FRAG_PARSING_ERROR,\n        fatal: false,\n        levelRetry: recoverable,\n        error,\n        reason,\n      });\n      if (!recoverable) {\n        return;\n      }\n    }\n\n    ADTS.initTrackConfig(\n      track,\n      this.observer,\n      data,\n      offset,\n      this.audioCodec as string\n    );\n\n    let pts: number;\n    if (pes.pts !== undefined) {\n      pts = pes.pts;\n    } else if (aacOverFlow) {\n      // if last AAC frame is overflowing, we should ensure timestamps are contiguous:\n      // first sample PTS should be equal to last sample PTS + frameDuration\n      const frameDuration = ADTS.getFrameDuration(track.samplerate as number);\n      pts = aacOverFlow.sample.pts + frameDuration;\n    } else {\n      logger.warn('[tsdemuxer]: AAC PES unknown PTS');\n      return;\n    }\n\n    // scan for aac samples\n    let frameIndex = 0;\n    let frame;\n    while (offset < len) {\n      frame = ADTS.appendFrame(track, data, offset, pts, frameIndex);\n      offset += frame.length;\n      if (!frame.missing) {\n        frameIndex++;\n        for (; offset < len - 1; offset++) {\n          if (ADTS.isHeader(data, offset)) {\n            break;\n          }\n        }\n      } else {\n        this.aacOverFlow = frame;\n        break;\n      }\n    }\n  }\n\n  private parseMPEGPES(track: DemuxedAudioTrack, pes: PES) {\n    const data = pes.data;\n    const length = data.length;\n    let frameIndex = 0;\n    let offset = 0;\n    const pts = pes.pts;\n    if (pts === undefined) {\n      logger.warn('[tsdemuxer]: MPEG PES unknown PTS');\n      return;\n    }\n\n    while (offset < length) {\n      if (MpegAudio.isHeader(data, offset)) {\n        const frame = MpegAudio.appendFrame(\n          track,\n          data,\n          offset,\n          pts,\n          frameIndex\n        );\n        if (frame) {\n          offset += frame.length;\n          frameIndex++;\n        } else {\n          // logger.log('Unable to parse Mpeg audio frame');\n          break;\n        }\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n  }\n\n  private parseID3PES(id3Track: DemuxedMetadataTrack, pes: PES) {\n    if (pes.pts === undefined) {\n      logger.warn('[tsdemuxer]: ID3 PES unknown PTS');\n      return;\n    }\n    const id3Sample = Object.assign({}, pes as Required<PES>, {\n      type: this._avcTrack ? MetadataSchema.emsg : MetadataSchema.audioId3,\n      duration: Number.POSITIVE_INFINITY,\n    });\n    id3Track.samples.push(id3Sample);\n  }\n}\n\nfunction createAVCSample(\n  key: boolean,\n  pts: number | undefined,\n  dts: number | undefined,\n  debug: string\n): ParsedAvcSample {\n  return {\n    key,\n    frame: false,\n    pts,\n    dts,\n    units: [],\n    debug,\n    length: 0,\n  };\n}\n\nfunction parsePID(data: Uint8Array, offset: number): number {\n  // pid is a 13-bit field starting at the last bit of TS[1]\n  return ((data[offset + 1] & 0x1f) << 8) + data[offset + 2];\n}\n\nfunction parsePAT(data: Uint8Array, offset: number): number {\n  // skip the PSI header and parse the first PMT entry\n  return ((data[offset + 10] & 0x1f) << 8) | data[offset + 11];\n}\n\nfunction parsePMT(\n  data: Uint8Array,\n  offset: number,\n  typeSupported: TypeSupported,\n  isSampleAes: boolean\n) {\n  const result = { audio: -1, avc: -1, id3: -1, segmentCodec: 'aac' };\n  const sectionLength = ((data[offset + 1] & 0x0f) << 8) | data[offset + 2];\n  const tableEnd = offset + 3 + sectionLength - 4;\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  const programInfoLength =\n    ((data[offset + 10] & 0x0f) << 8) | data[offset + 11];\n  // advance the offset to the first entry in the mapping table\n  offset += 12 + programInfoLength;\n  while (offset < tableEnd) {\n    const pid = parsePID(data, offset);\n    switch (data[offset]) {\n      case 0xcf: // SAMPLE-AES AAC\n        if (!isSampleAes) {\n          logger.log(\n            'ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream'\n          );\n          break;\n        }\n      /* falls through */\n      case 0x0f: // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)\n        // logger.log('AAC PID:'  + pid);\n        if (result.audio === -1) {\n          result.audio = pid;\n        }\n\n        break;\n\n      // Packetized metadata (ID3)\n      case 0x15:\n        // logger.log('ID3 PID:'  + pid);\n        if (result.id3 === -1) {\n          result.id3 = pid;\n        }\n\n        break;\n\n      case 0xdb: // SAMPLE-AES AVC\n        if (!isSampleAes) {\n          logger.log(\n            'H.264 with AES-128-CBC slice encryption found in unencrypted stream'\n          );\n          break;\n        }\n      /* falls through */\n      case 0x1b: // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)\n        // logger.log('AVC PID:'  + pid);\n        if (result.avc === -1) {\n          result.avc = pid;\n        }\n\n        break;\n\n      // ISO/IEC 11172-3 (MPEG-1 audio)\n      // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)\n      case 0x03:\n      case 0x04:\n        // logger.log('MPEG PID:'  + pid);\n        if (typeSupported.mpeg !== true && typeSupported.mp3 !== true) {\n          logger.log('MPEG audio found, not supported in this browser');\n        } else if (result.audio === -1) {\n          result.audio = pid;\n          result.segmentCodec = 'mp3';\n        }\n        break;\n\n      case 0x24:\n        logger.warn('Unsupported HEVC stream type found');\n        break;\n\n      default:\n        // logger.log('unknown stream type:' + data[offset]);\n        break;\n    }\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += (((data[offset + 3] & 0x0f) << 8) | data[offset + 4]) + 5;\n  }\n  return result;\n}\n\nfunction parsePES(stream: ElementaryStreamData): PES | null {\n  let i = 0;\n  let frag: Uint8Array;\n  let pesLen: number;\n  let pesHdrLen: number;\n  let pesPts: number | undefined;\n  let pesDts: number | undefined;\n  const data = stream.data;\n  // safety check\n  if (!stream || stream.size === 0) {\n    return null;\n  }\n\n  // we might need up to 19 bytes to read PES header\n  // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes\n  // usually only one merge is needed (and this is rare ...)\n  while (data[0].length < 19 && data.length > 1) {\n    const newData = new Uint8Array(data[0].length + data[1].length);\n    newData.set(data[0]);\n    newData.set(data[1], data[0].length);\n    data[0] = newData;\n    data.splice(1, 1);\n  }\n  // retrieve PTS/DTS from first fragment\n  frag = data[0];\n  const pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];\n  if (pesPrefix === 1) {\n    pesLen = (frag[4] << 8) + frag[5];\n    // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated\n    // minus 6 : PES header size\n    if (pesLen && pesLen > stream.size - 6) {\n      return null;\n    }\n\n    const pesFlags = frag[7];\n    if (pesFlags & 0xc0) {\n      /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          as PTS / DTS is 33 bit we cannot use bitwise operator in JS,\n          as Bitwise operators treat their operands as a sequence of 32 bits */\n      pesPts =\n        (frag[9] & 0x0e) * 536870912 + // 1 << 29\n        (frag[10] & 0xff) * 4194304 + // 1 << 22\n        (frag[11] & 0xfe) * 16384 + // 1 << 14\n        (frag[12] & 0xff) * 128 + // 1 << 7\n        (frag[13] & 0xfe) / 2;\n\n      if (pesFlags & 0x40) {\n        pesDts =\n          (frag[14] & 0x0e) * 536870912 + // 1 << 29\n          (frag[15] & 0xff) * 4194304 + // 1 << 22\n          (frag[16] & 0xfe) * 16384 + // 1 << 14\n          (frag[17] & 0xff) * 128 + // 1 << 7\n          (frag[18] & 0xfe) / 2;\n\n        if (pesPts - pesDts > 60 * 90000) {\n          logger.warn(\n            `${Math.round(\n              (pesPts - pesDts) / 90000\n            )}s delta between PTS and DTS, align them`\n          );\n          pesPts = pesDts;\n        }\n      } else {\n        pesDts = pesPts;\n      }\n    }\n    pesHdrLen = frag[8];\n    // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension\n    let payloadStartOffset = pesHdrLen + 9;\n    if (stream.size <= payloadStartOffset) {\n      return null;\n    }\n    stream.size -= payloadStartOffset;\n    // reassemble PES packet\n    const pesData = new Uint8Array(stream.size);\n    for (let j = 0, dataLen = data.length; j < dataLen; j++) {\n      frag = data[j];\n      let len = frag.byteLength;\n      if (payloadStartOffset) {\n        if (payloadStartOffset > len) {\n          // trim full frag if PES header bigger than frag\n          payloadStartOffset -= len;\n          continue;\n        } else {\n          // trim partial frag if PES header smaller than frag\n          frag = frag.subarray(payloadStartOffset);\n          len -= payloadStartOffset;\n          payloadStartOffset = 0;\n        }\n      }\n      pesData.set(frag, i);\n      i += len;\n    }\n    if (pesLen) {\n      // payload size : remove PES header + PES extension\n      pesLen -= pesHdrLen + 3;\n    }\n    return { data: pesData, pts: pesPts, dts: pesDts, len: pesLen };\n  }\n  return null;\n}\n\nfunction pushAccessUnit(avcSample: ParsedAvcSample, avcTrack: DemuxedAvcTrack) {\n  if (avcSample.units.length && avcSample.frame) {\n    // if sample does not have PTS/DTS, patch with last sample PTS/DTS\n    if (avcSample.pts === undefined) {\n      const samples = avcTrack.samples;\n      const nbSamples = samples.length;\n      if (nbSamples) {\n        const lastSample = samples[nbSamples - 1];\n        avcSample.pts = lastSample.pts;\n        avcSample.dts = lastSample.dts;\n      } else {\n        // dropping samples, no timestamp found\n        avcTrack.dropped++;\n        return;\n      }\n    }\n    avcTrack.samples.push(avcSample as AvcSample);\n  }\n  if (avcSample.debug.length) {\n    logger.log(avcSample.pts + '/' + avcSample.dts + ':' + avcSample.debug);\n  }\n}\n\nexport default TSDemuxer;\n","/**\n * MP3 demuxer\n */\nimport BaseAudioDemuxer from './base-audio-demuxer';\nimport * as ID3 from '../demux/id3';\nimport { logger } from '../utils/logger';\nimport * as MpegAudio from './mpegaudio';\n\nclass MP3Demuxer extends BaseAudioDemuxer {\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number\n  ) {\n    super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);\n    this._audioTrack = {\n      container: 'audio/mpeg',\n      type: 'audio',\n      id: 2,\n      pid: -1,\n      sequenceNumber: 0,\n      segmentCodec: 'mp3',\n      samples: [],\n      manifestCodec: audioCodec,\n      duration: trackDuration,\n      inputTimeScale: 90000,\n      dropped: 0,\n    };\n  }\n\n  static probe(data): boolean {\n    if (!data) {\n      return false;\n    }\n\n    // check if data contains ID3 timestamp and MPEG sync word\n    // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n    // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n    // More info http://www.mp3-tech.org/programmer/frame_header.html\n    const id3Data = ID3.getID3Data(data, 0) || [];\n    let offset = id3Data.length;\n\n    for (let length = data.length; offset < length; offset++) {\n      if (MpegAudio.probe(data, offset)) {\n        logger.log('MPEG Audio sync word found !');\n        return true;\n      }\n    }\n    return false;\n  }\n\n  canParse(data, offset) {\n    return MpegAudio.canParse(data, offset);\n  }\n\n  appendFrame(track, data, offset) {\n    if (this.basePTS === null) {\n      return;\n    }\n    return MpegAudio.appendFrame(\n      track,\n      data,\n      offset,\n      this.basePTS,\n      this.frameIndex\n    );\n  }\n}\n\nexport default MP3Demuxer;\n","/**\n *  AAC helper\n */\n\nclass AAC {\n  static getSilentFrame(\n    codec?: string,\n    channelCount?: number\n  ): Uint8Array | undefined {\n    switch (codec) {\n      case 'mp4a.40.2':\n        if (channelCount === 1) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n        } else if (channelCount === 2) {\n          return new Uint8Array([\n            0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80,\n          ]);\n        } else if (channelCount === 3) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x8e,\n          ]);\n        } else if (channelCount === 4) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38,\n          ]);\n        } else if (channelCount === 5) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38,\n          ]);\n        } else if (channelCount === 6) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2,\n            0x00, 0x20, 0x08, 0xe0,\n          ]);\n        }\n\n        break;\n      // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)\n      default:\n        if (channelCount === 1) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([\n            0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,\n            0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5e,\n          ]);\n        } else if (channelCount === 2) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([\n            0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,\n            0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5e,\n          ]);\n        } else if (channelCount === 3) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([\n            0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,\n            0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5e,\n          ]);\n        }\n        break;\n    }\n    return undefined;\n  }\n}\n\nexport default AAC;\n","/**\n * Generate MP4 Box\n */\n\ntype HdlrTypes = {\n  video: Uint8Array;\n  audio: Uint8Array;\n};\n\nconst UINT32_MAX = Math.pow(2, 32) - 1;\n\nclass MP4 {\n  public static types: Record<string, number[]>;\n  private static HDLR_TYPES: HdlrTypes;\n  private static STTS: Uint8Array;\n  private static STSC: Uint8Array;\n  private static STCO: Uint8Array;\n  private static STSZ: Uint8Array;\n  private static VMHD: Uint8Array;\n  private static SMHD: Uint8Array;\n  private static STSD: Uint8Array;\n  private static FTYP: Uint8Array;\n  private static DINF: Uint8Array;\n\n  static init() {\n    MP4.types = {\n      avc1: [], // codingname\n      avcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      '.mp3': [],\n      mvex: [],\n      mvhd: [],\n      pasp: [],\n      sdtp: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: [],\n      smhd: [],\n    };\n\n    let i: string;\n    for (i in MP4.types) {\n      if (MP4.types.hasOwnProperty(i)) {\n        MP4.types[i] = [\n          i.charCodeAt(0),\n          i.charCodeAt(1),\n          i.charCodeAt(2),\n          i.charCodeAt(3),\n        ];\n      }\n    }\n\n    const videoHdlr = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0x76,\n      0x69,\n      0x64,\n      0x65, // handler_type: 'vide'\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x56,\n      0x69,\n      0x64,\n      0x65,\n      0x6f,\n      0x48,\n      0x61,\n      0x6e,\n      0x64,\n      0x6c,\n      0x65,\n      0x72,\n      0x00, // name: 'VideoHandler'\n    ]);\n\n    const audioHdlr = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0x73,\n      0x6f,\n      0x75,\n      0x6e, // handler_type: 'soun'\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x53,\n      0x6f,\n      0x75,\n      0x6e,\n      0x64,\n      0x48,\n      0x61,\n      0x6e,\n      0x64,\n      0x6c,\n      0x65,\n      0x72,\n      0x00, // name: 'SoundHandler'\n    ]);\n\n    MP4.HDLR_TYPES = {\n      video: videoHdlr,\n      audio: audioHdlr,\n    };\n\n    const dref = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x01, // entry_count\n      0x00,\n      0x00,\n      0x00,\n      0x0c, // entry_size\n      0x75,\n      0x72,\n      0x6c,\n      0x20, // 'url' type\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x01, // entry_flags\n    ]);\n\n    const stco = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // entry_count\n    ]);\n\n    MP4.STTS = MP4.STSC = MP4.STCO = stco;\n\n    MP4.STSZ = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // sample_size\n      0x00,\n      0x00,\n      0x00,\n      0x00, // sample_count\n    ]);\n    MP4.VMHD = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x01, // flags\n      0x00,\n      0x00, // graphicsmode\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // opcolor\n    ]);\n    MP4.SMHD = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00, // balance\n      0x00,\n      0x00, // reserved\n    ]);\n\n    MP4.STSD = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x01,\n    ]); // entry_count\n\n    const majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n    const avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n    const minorVersion = new Uint8Array([0, 0, 0, 1]);\n\n    MP4.FTYP = MP4.box(\n      MP4.types.ftyp,\n      majorBrand,\n      minorVersion,\n      majorBrand,\n      avc1Brand\n    );\n    MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n  }\n\n  static box(type, ...payload: Uint8Array[]) {\n    let size = 8;\n    let i = payload.length;\n    const len = i;\n    // calculate the total size we need to allocate\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n\n    const result = new Uint8Array(size);\n    result[0] = (size >> 24) & 0xff;\n    result[1] = (size >> 16) & 0xff;\n    result[2] = (size >> 8) & 0xff;\n    result[3] = size & 0xff;\n    result.set(type, 4);\n    // copy the payload into the result\n    for (i = 0, size = 8; i < len; i++) {\n      // copy payload[i] array @ offset size\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n    return result;\n  }\n\n  static hdlr(type) {\n    return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n  }\n\n  static mdat(data) {\n    return MP4.box(MP4.types.mdat, data);\n  }\n\n  static mdhd(timescale, duration) {\n    duration *= timescale;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(\n      MP4.types.mdhd,\n      new Uint8Array([\n        0x01, // version 1\n        0x00,\n        0x00,\n        0x00, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x02, // creation_time\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x03, // modification_time\n        (timescale >> 24) & 0xff,\n        (timescale >> 16) & 0xff,\n        (timescale >> 8) & 0xff,\n        timescale & 0xff, // timescale\n        upperWordDuration >> 24,\n        (upperWordDuration >> 16) & 0xff,\n        (upperWordDuration >> 8) & 0xff,\n        upperWordDuration & 0xff,\n        lowerWordDuration >> 24,\n        (lowerWordDuration >> 16) & 0xff,\n        (lowerWordDuration >> 8) & 0xff,\n        lowerWordDuration & 0xff,\n        0x55,\n        0xc4, // 'und' language (undetermined)\n        0x00,\n        0x00,\n      ])\n    );\n  }\n\n  static mdia(track) {\n    return MP4.box(\n      MP4.types.mdia,\n      MP4.mdhd(track.timescale, track.duration),\n      MP4.hdlr(track.type),\n      MP4.minf(track)\n    );\n  }\n\n  static mfhd(sequenceNumber) {\n    return MP4.box(\n      MP4.types.mfhd,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00,\n        0x00, // flags\n        sequenceNumber >> 24,\n        (sequenceNumber >> 16) & 0xff,\n        (sequenceNumber >> 8) & 0xff,\n        sequenceNumber & 0xff, // sequence_number\n      ])\n    );\n  }\n\n  static minf(track) {\n    if (track.type === 'audio') {\n      return MP4.box(\n        MP4.types.minf,\n        MP4.box(MP4.types.smhd, MP4.SMHD),\n        MP4.DINF,\n        MP4.stbl(track)\n      );\n    } else {\n      return MP4.box(\n        MP4.types.minf,\n        MP4.box(MP4.types.vmhd, MP4.VMHD),\n        MP4.DINF,\n        MP4.stbl(track)\n      );\n    }\n  }\n\n  static moof(sn, baseMediaDecodeTime, track) {\n    return MP4.box(\n      MP4.types.moof,\n      MP4.mfhd(sn),\n      MP4.traf(track, baseMediaDecodeTime)\n    );\n  }\n\n  static moov(tracks) {\n    let i = tracks.length;\n    const boxes: Uint8Array[] = [];\n\n    while (i--) {\n      boxes[i] = MP4.trak(tracks[i]);\n    }\n\n    return MP4.box.apply(\n      null,\n      [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)]\n        .concat(boxes)\n        .concat(MP4.mvex(tracks))\n    );\n  }\n\n  static mvex(tracks) {\n    let i = tracks.length;\n    const boxes: Uint8Array[] = [];\n\n    while (i--) {\n      boxes[i] = MP4.trex(tracks[i]);\n    }\n\n    return MP4.box.apply(null, [MP4.types.mvex, ...boxes]);\n  }\n\n  static mvhd(timescale, duration) {\n    duration *= timescale;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    const bytes = new Uint8Array([\n      0x01, // version 1\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x02, // creation_time\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x03, // modification_time\n      (timescale >> 24) & 0xff,\n      (timescale >> 16) & 0xff,\n      (timescale >> 8) & 0xff,\n      timescale & 0xff, // timescale\n      upperWordDuration >> 24,\n      (upperWordDuration >> 16) & 0xff,\n      (upperWordDuration >> 8) & 0xff,\n      upperWordDuration & 0xff,\n      lowerWordDuration >> 24,\n      (lowerWordDuration >> 16) & 0xff,\n      (lowerWordDuration >> 8) & 0xff,\n      lowerWordDuration & 0xff,\n      0x00,\n      0x01,\n      0x00,\n      0x00, // 1.0 rate\n      0x01,\n      0x00, // 1.0 volume\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x01,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x01,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x40,\n      0x00,\n      0x00,\n      0x00, // transformation: unity matrix\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0xff,\n      0xff,\n      0xff,\n      0xff, // next_track_ID\n    ]);\n    return MP4.box(MP4.types.mvhd, bytes);\n  }\n\n  static sdtp(track) {\n    const samples = track.samples || [];\n    const bytes = new Uint8Array(4 + samples.length);\n    let i;\n    let flags;\n    // leave the full box header (4 bytes) all zero\n    // write the sample table\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] =\n        (flags.dependsOn << 4) |\n        (flags.isDependedOn << 2) |\n        flags.hasRedundancy;\n    }\n\n    return MP4.box(MP4.types.sdtp, bytes);\n  }\n\n  static stbl(track) {\n    return MP4.box(\n      MP4.types.stbl,\n      MP4.stsd(track),\n      MP4.box(MP4.types.stts, MP4.STTS),\n      MP4.box(MP4.types.stsc, MP4.STSC),\n      MP4.box(MP4.types.stsz, MP4.STSZ),\n      MP4.box(MP4.types.stco, MP4.STCO)\n    );\n  }\n\n  static avc1(track) {\n    let sps: number[] = [];\n    let pps: number[] = [];\n    let i;\n    let data;\n    let len;\n    // assemble the SPSs\n\n    for (i = 0; i < track.sps.length; i++) {\n      data = track.sps[i];\n      len = data.byteLength;\n      sps.push((len >>> 8) & 0xff);\n      sps.push(len & 0xff);\n\n      // SPS\n      sps = sps.concat(Array.prototype.slice.call(data));\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < track.pps.length; i++) {\n      data = track.pps[i];\n      len = data.byteLength;\n      pps.push((len >>> 8) & 0xff);\n      pps.push(len & 0xff);\n\n      pps = pps.concat(Array.prototype.slice.call(data));\n    }\n\n    const avcc = MP4.box(\n      MP4.types.avcC,\n      new Uint8Array(\n        [\n          0x01, // version\n          sps[3], // profile\n          sps[4], // profile compat\n          sps[5], // level\n          0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n          0xe0 | track.sps.length, // 3bit reserved (111) + numOfSequenceParameterSets\n        ]\n          .concat(sps)\n          .concat([\n            track.pps.length, // numOfPictureParameterSets\n          ])\n          .concat(pps)\n      )\n    ); // \"PPS\"\n    const width = track.width;\n    const height = track.height;\n    const hSpacing = track.pixelRatio[0];\n    const vSpacing = track.pixelRatio[1];\n\n    return MP4.box(\n      MP4.types.avc1,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // data_reference_index\n        0x00,\n        0x00, // pre_defined\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // pre_defined\n        (width >> 8) & 0xff,\n        width & 0xff, // width\n        (height >> 8) & 0xff,\n        height & 0xff, // height\n        0x00,\n        0x48,\n        0x00,\n        0x00, // horizresolution\n        0x00,\n        0x48,\n        0x00,\n        0x00, // vertresolution\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // frame_count\n        0x12,\n        0x64,\n        0x61,\n        0x69,\n        0x6c, // dailymotion/hls.js\n        0x79,\n        0x6d,\n        0x6f,\n        0x74,\n        0x69,\n        0x6f,\n        0x6e,\n        0x2f,\n        0x68,\n        0x6c,\n        0x73,\n        0x2e,\n        0x6a,\n        0x73,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // compressorname\n        0x00,\n        0x18, // depth = 24\n        0x11,\n        0x11,\n      ]), // pre_defined = -1\n      avcc,\n      MP4.box(\n        MP4.types.btrt,\n        new Uint8Array([\n          0x00,\n          0x1c,\n          0x9c,\n          0x80, // bufferSizeDB\n          0x00,\n          0x2d,\n          0xc6,\n          0xc0, // maxBitrate\n          0x00,\n          0x2d,\n          0xc6,\n          0xc0,\n        ])\n      ), // avgBitrate\n      MP4.box(\n        MP4.types.pasp,\n        new Uint8Array([\n          hSpacing >> 24, // hSpacing\n          (hSpacing >> 16) & 0xff,\n          (hSpacing >> 8) & 0xff,\n          hSpacing & 0xff,\n          vSpacing >> 24, // vSpacing\n          (vSpacing >> 16) & 0xff,\n          (vSpacing >> 8) & 0xff,\n          vSpacing & 0xff,\n        ])\n      )\n    );\n  }\n\n  static esds(track) {\n    const configlen = track.config.length;\n    return new Uint8Array(\n      [\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n\n        0x03, // descriptor_type\n        0x17 + configlen, // length\n        0x00,\n        0x01, // es_id\n        0x00, // stream_priority\n\n        0x04, // descriptor_type\n        0x0f + configlen, // length\n        0x40, // codec : mpeg4_audio\n        0x15, // stream_type\n        0x00,\n        0x00,\n        0x00, // buffer_size\n        0x00,\n        0x00,\n        0x00,\n        0x00, // maxBitrate\n        0x00,\n        0x00,\n        0x00,\n        0x00, // avgBitrate\n\n        0x05, // descriptor_type\n      ]\n        .concat([configlen])\n        .concat(track.config)\n        .concat([0x06, 0x01, 0x02])\n    ); // GASpecificConfig)); // length + audio config descriptor\n  }\n\n  static mp4a(track) {\n    const samplerate = track.samplerate;\n    return MP4.box(\n      MP4.types.mp4a,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // data_reference_index\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        track.channelCount, // channelcount\n        0x00,\n        0x10, // sampleSize:16bits\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved2\n        (samplerate >> 8) & 0xff,\n        samplerate & 0xff, //\n        0x00,\n        0x00,\n      ]),\n      MP4.box(MP4.types.esds, MP4.esds(track))\n    );\n  }\n\n  static mp3(track) {\n    const samplerate = track.samplerate;\n    return MP4.box(\n      MP4.types['.mp3'],\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // data_reference_index\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        track.channelCount, // channelcount\n        0x00,\n        0x10, // sampleSize:16bits\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved2\n        (samplerate >> 8) & 0xff,\n        samplerate & 0xff, //\n        0x00,\n        0x00,\n      ])\n    );\n  }\n\n  static stsd(track) {\n    if (track.type === 'audio') {\n      if (track.segmentCodec === 'mp3' && track.codec === 'mp3') {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));\n      }\n\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n    } else {\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\n    }\n  }\n\n  static tkhd(track) {\n    const id = track.id;\n    const duration = track.duration * track.timescale;\n    const width = track.width;\n    const height = track.height;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(\n      MP4.types.tkhd,\n      new Uint8Array([\n        0x01, // version 1\n        0x00,\n        0x00,\n        0x07, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x02, // creation_time\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x03, // modification_time\n        (id >> 24) & 0xff,\n        (id >> 16) & 0xff,\n        (id >> 8) & 0xff,\n        id & 0xff, // track_ID\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        upperWordDuration >> 24,\n        (upperWordDuration >> 16) & 0xff,\n        (upperWordDuration >> 8) & 0xff,\n        upperWordDuration & 0xff,\n        lowerWordDuration >> 24,\n        (lowerWordDuration >> 16) & 0xff,\n        (lowerWordDuration >> 8) & 0xff,\n        lowerWordDuration & 0xff,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00, // layer\n        0x00,\n        0x00, // alternate_group\n        0x00,\n        0x00, // non-audio track volume\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x40,\n        0x00,\n        0x00,\n        0x00, // transformation: unity matrix\n        (width >> 8) & 0xff,\n        width & 0xff,\n        0x00,\n        0x00, // width\n        (height >> 8) & 0xff,\n        height & 0xff,\n        0x00,\n        0x00, // height\n      ])\n    );\n  }\n\n  static traf(track, baseMediaDecodeTime) {\n    const sampleDependencyTable = MP4.sdtp(track);\n    const id = track.id;\n    const upperWordBaseMediaDecodeTime = Math.floor(\n      baseMediaDecodeTime / (UINT32_MAX + 1)\n    );\n    const lowerWordBaseMediaDecodeTime = Math.floor(\n      baseMediaDecodeTime % (UINT32_MAX + 1)\n    );\n    return MP4.box(\n      MP4.types.traf,\n      MP4.box(\n        MP4.types.tfhd,\n        new Uint8Array([\n          0x00, // version 0\n          0x00,\n          0x00,\n          0x00, // flags\n          id >> 24,\n          (id >> 16) & 0xff,\n          (id >> 8) & 0xff,\n          id & 0xff, // track_ID\n        ])\n      ),\n      MP4.box(\n        MP4.types.tfdt,\n        new Uint8Array([\n          0x01, // version 1\n          0x00,\n          0x00,\n          0x00, // flags\n          upperWordBaseMediaDecodeTime >> 24,\n          (upperWordBaseMediaDecodeTime >> 16) & 0xff,\n          (upperWordBaseMediaDecodeTime >> 8) & 0xff,\n          upperWordBaseMediaDecodeTime & 0xff,\n          lowerWordBaseMediaDecodeTime >> 24,\n          (lowerWordBaseMediaDecodeTime >> 16) & 0xff,\n          (lowerWordBaseMediaDecodeTime >> 8) & 0xff,\n          lowerWordBaseMediaDecodeTime & 0xff,\n        ])\n      ),\n      MP4.trun(\n        track,\n        sampleDependencyTable.length +\n          16 + // tfhd\n          20 + // tfdt\n          8 + // traf header\n          16 + // mfhd\n          8 + // moof header\n          8\n      ), // mdat header\n      sampleDependencyTable\n    );\n  }\n\n  /**\n   * Generate a track box.\n   * @param track a track definition\n   */\n  static trak(track) {\n    track.duration = track.duration || 0xffffffff;\n    return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n  }\n\n  static trex(track) {\n    const id = track.id;\n    return MP4.box(\n      MP4.types.trex,\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        id >> 24,\n        (id >> 16) & 0xff,\n        (id >> 8) & 0xff,\n        id & 0xff, // track_ID\n        0x00,\n        0x00,\n        0x00,\n        0x01, // default_sample_description_index\n        0x00,\n        0x00,\n        0x00,\n        0x00, // default_sample_duration\n        0x00,\n        0x00,\n        0x00,\n        0x00, // default_sample_size\n        0x00,\n        0x01,\n        0x00,\n        0x01, // default_sample_flags\n      ])\n    );\n  }\n\n  static trun(track, offset) {\n    const samples = track.samples || [];\n    const len = samples.length;\n    const arraylen = 12 + 16 * len;\n    const array = new Uint8Array(arraylen);\n    let i;\n    let sample;\n    let duration;\n    let size;\n    let flags;\n    let cts;\n    offset += 8 + arraylen;\n    array.set(\n      [\n        track.type === 'video' ? 0x01 : 0x00, // version 1 for video with signed-int sample_composition_time_offset\n        0x00,\n        0x0f,\n        0x01, // flags\n        (len >>> 24) & 0xff,\n        (len >>> 16) & 0xff,\n        (len >>> 8) & 0xff,\n        len & 0xff, // sample_count\n        (offset >>> 24) & 0xff,\n        (offset >>> 16) & 0xff,\n        (offset >>> 8) & 0xff,\n        offset & 0xff, // data_offset\n      ],\n      0\n    );\n    for (i = 0; i < len; i++) {\n      sample = samples[i];\n      duration = sample.duration;\n      size = sample.size;\n      flags = sample.flags;\n      cts = sample.cts;\n      array.set(\n        [\n          (duration >>> 24) & 0xff,\n          (duration >>> 16) & 0xff,\n          (duration >>> 8) & 0xff,\n          duration & 0xff, // sample_duration\n          (size >>> 24) & 0xff,\n          (size >>> 16) & 0xff,\n          (size >>> 8) & 0xff,\n          size & 0xff, // sample_size\n          (flags.isLeading << 2) | flags.dependsOn,\n          (flags.isDependedOn << 6) |\n            (flags.hasRedundancy << 4) |\n            (flags.paddingValue << 1) |\n            flags.isNonSync,\n          flags.degradPrio & (0xf0 << 8),\n          flags.degradPrio & 0x0f, // sample_flags\n          (cts >>> 24) & 0xff,\n          (cts >>> 16) & 0xff,\n          (cts >>> 8) & 0xff,\n          cts & 0xff, // sample_composition_time_offset\n        ],\n        12 + 16 * i\n      );\n    }\n    return MP4.box(MP4.types.trun, array);\n  }\n\n  static initSegment(tracks) {\n    if (!MP4.types) {\n      MP4.init();\n    }\n\n    const movie = MP4.moov(tracks);\n    const result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);\n    result.set(MP4.FTYP);\n    result.set(movie, MP4.FTYP.byteLength);\n    return result;\n  }\n}\n\nexport default MP4;\n","import type { LoaderConfig } from '../config';\nimport type { Fragment } from '../loader/fragment';\nimport type { Part } from '../loader/fragment';\nimport type { KeyLoaderInfo } from '../loader/key-loader';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { HlsUrlParameters } from './level';\n\nexport interface LoaderContext {\n  // target URL\n  url: string;\n  // loader response type (arraybuffer or default response type for playlist)\n  responseType: string;\n  // headers\n  headers?: Record<string, string>;\n  // start byte range offset\n  rangeStart?: number;\n  // end byte range offset\n  rangeEnd?: number;\n  // true if onProgress should report partial chunk of loaded content\n  progressData?: boolean;\n}\n\nexport interface FragmentLoaderContext extends LoaderContext {\n  frag: Fragment;\n  part: Part | null;\n  resetIV?: boolean;\n}\n\nexport interface KeyLoaderContext extends LoaderContext {\n  keyInfo: KeyLoaderInfo;\n  frag: Fragment;\n}\n\nexport interface LoaderConfiguration {\n  // LoaderConfig policy that overrides required settings\n  loadPolicy: LoaderConfig;\n  /**\n   * @deprecated use LoaderConfig timeoutRetry and errorRetry maxNumRetry\n   */\n  // Max number of load retries\n  maxRetry: number;\n  /**\n   * @deprecated use LoaderConfig maxTimeToFirstByteMs and maxLoadTimeMs\n   */\n  // Timeout after which `onTimeOut` callback will be triggered\n  //  when loading has not finished after that delay\n  timeout: number;\n  /**\n   * @deprecated use LoaderConfig timeoutRetry and errorRetry retryDelayMs\n   */\n  // Delay between an I/O error and following connection retry (ms).\n  // This to avoid spamming the server\n  retryDelay: number;\n  /**\n   * @deprecated use LoaderConfig timeoutRetry and errorRetry maxRetryDelayMs\n   */\n  // max connection retry delay (ms)\n  maxRetryDelay: number;\n  // When streaming progressively, this is the minimum chunk size required to emit a PROGRESS event\n  highWaterMark?: number;\n}\n\nexport interface LoaderResponse {\n  url: string;\n  data?: string | ArrayBuffer | Object;\n  // Errors can include HTTP status code and error message\n  // Successful responses should include status code 200\n  code?: number;\n  text?: string;\n}\n\nexport interface LoaderStats {\n  aborted: boolean;\n  loaded: number;\n  retry: number;\n  total: number;\n  chunkCount: number;\n  bwEstimate: number;\n  loading: HlsProgressivePerformanceTiming;\n  parsing: HlsPerformanceTiming;\n  buffering: HlsProgressivePerformanceTiming;\n}\n\nexport interface HlsPerformanceTiming {\n  start: number;\n  end: number;\n}\n\nexport interface HlsChunkPerformanceTiming extends HlsPerformanceTiming {\n  executeStart: number;\n  executeEnd: number;\n}\n\nexport interface HlsProgressivePerformanceTiming extends HlsPerformanceTiming {\n  first: number;\n}\n\nexport type LoaderOnSuccess<T extends LoaderContext> = (\n  response: LoaderResponse,\n  stats: LoaderStats,\n  context: T,\n  networkDetails: any\n) => void;\n\nexport type LoaderOnProgress<T extends LoaderContext> = (\n  stats: LoaderStats,\n  context: T,\n  data: string | ArrayBuffer,\n  networkDetails: any\n) => void;\n\nexport type LoaderOnError<T extends LoaderContext> = (\n  error: {\n    // error status code\n    code: number;\n    // error description\n    text: string;\n  },\n  context: T,\n  networkDetails: any,\n  stats: LoaderStats\n) => void;\n\nexport type LoaderOnTimeout<T extends LoaderContext> = (\n  stats: LoaderStats,\n  context: T,\n  networkDetails: any\n) => void;\n\nexport type LoaderOnAbort<T extends LoaderContext> = (\n  stats: LoaderStats,\n  context: T,\n  networkDetails: any\n) => void;\n\nexport interface LoaderCallbacks<T extends LoaderContext> {\n  onSuccess: LoaderOnSuccess<T>;\n  onError: LoaderOnError<T>;\n  onTimeout: LoaderOnTimeout<T>;\n  onAbort?: LoaderOnAbort<T>;\n  onProgress?: LoaderOnProgress<T>;\n}\n\nexport interface Loader<T extends LoaderContext> {\n  destroy(): void;\n  abort(): void;\n  load(\n    context: LoaderContext,\n    config: LoaderConfiguration,\n    callbacks: LoaderCallbacks<T>\n  ): void;\n  /**\n   * `getCacheAge()` is called by hls.js to get the duration that a given object\n   * has been sitting in a cache proxy when playing live.  If implemented,\n   * this should return a value in seconds.\n   *\n   * For HTTP based loaders, this should return the contents of the \"age\" header.\n   *\n   * @returns time object being lodaded\n   */\n  getCacheAge?: () => number | null;\n  getResponseHeader?: (name: string) => string | null;\n  context: T;\n  stats: LoaderStats;\n}\n\nexport const enum PlaylistContextType {\n  MANIFEST = 'manifest',\n  LEVEL = 'level',\n  AUDIO_TRACK = 'audioTrack',\n  SUBTITLE_TRACK = 'subtitleTrack',\n}\n\nexport const enum PlaylistLevelType {\n  MAIN = 'main',\n  AUDIO = 'audio',\n  SUBTITLE = 'subtitle',\n}\n\nexport interface PlaylistLoaderContext extends LoaderContext {\n  type: PlaylistContextType;\n  // the level index to load\n  level: number | null;\n  // level or track id from LevelLoadingData / TrackLoadingData\n  id: number | null;\n  // track group id\n  groupId?: string;\n  // internal representation of a parsed m3u8 level playlist\n  levelDetails?: LevelDetails;\n  // Blocking playlist request delivery directives (or null id none were added to playlist url\n  deliveryDirectives: HlsUrlParameters | null;\n}\n","const MPEG_TS_CLOCK_FREQ_HZ = 90000;\n\nexport type RationalTimestamp = {\n  baseTime: number; // ticks\n  timescale: number; // ticks per second\n};\n\nexport function toTimescaleFromBase(\n  baseTime: number,\n  destScale: number,\n  srcBase: number = 1,\n  round: boolean = false\n): number {\n  const result = baseTime * destScale * srcBase; // equivalent to `(value * scale) / (1 / base)`\n  return round ? Math.round(result) : result;\n}\n\nexport function toTimescaleFromScale(\n  baseTime: number,\n  destScale: number,\n  srcScale: number = 1,\n  round: boolean = false\n): number {\n  return toTimescaleFromBase(baseTime, destScale, 1 / srcScale, round);\n}\n\nexport function toMsFromMpegTsClock(\n  baseTime: number,\n  round: boolean = false\n): number {\n  return toTimescaleFromBase(baseTime, 1000, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);\n}\n\nexport function toMpegTsClockFromTimescale(\n  baseTime: number,\n  srcScale: number = 1\n): number {\n  return toTimescaleFromBase(baseTime, MPEG_TS_CLOCK_FREQ_HZ, 1 / srcScale);\n}\n","import AAC from './aac-helper';\nimport MP4 from './mp4-generator';\nimport type { HlsEventEmitter } from '../events';\nimport { Events } from '../events';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport { logger } from '../utils/logger';\nimport {\n  InitSegmentData,\n  Remuxer,\n  RemuxerResult,\n  RemuxedMetadata,\n  RemuxedTrack,\n  RemuxedUserdata,\n} from '../types/remuxer';\nimport { PlaylistLevelType } from '../types/loader';\nimport {\n  RationalTimestamp,\n  toMsFromMpegTsClock,\n} from '../utils/timescale-conversion';\nimport type {\n  AudioSample,\n  AvcSample,\n  DemuxedAudioTrack,\n  DemuxedAvcTrack,\n  DemuxedMetadataTrack,\n  DemuxedUserdataTrack,\n} from '../types/demuxer';\nimport type { TrackSet } from '../types/track';\nimport type { SourceBufferName } from '../types/buffer';\nimport type { Fragment } from '../loader/fragment';\nimport type { HlsConfig } from '../config';\n\nconst MAX_SILENT_FRAME_DURATION = 10 * 1000; // 10 seconds\nconst AAC_SAMPLES_PER_FRAME = 1024;\nconst MPEG_AUDIO_SAMPLE_PER_FRAME = 1152;\n\nlet chromeVersion: number | null = null;\nlet safariWebkitVersion: number | null = null;\n\nexport default class MP4Remuxer implements Remuxer {\n  private observer: HlsEventEmitter;\n  private config: HlsConfig;\n  private typeSupported: any;\n  private ISGenerated: boolean = false;\n  private _initPTS: RationalTimestamp | null = null;\n  private _initDTS: RationalTimestamp | null = null;\n  private nextAvcDts: number | null = null;\n  private nextAudioPts: number | null = null;\n  private videoSampleDuration: number | null = null;\n  private isAudioContiguous: boolean = false;\n  private isVideoContiguous: boolean = false;\n\n  constructor(\n    observer: HlsEventEmitter,\n    config: HlsConfig,\n    typeSupported,\n    vendor = ''\n  ) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.ISGenerated = false;\n\n    if (chromeVersion === null) {\n      const userAgent = navigator.userAgent || '';\n      const result = userAgent.match(/Chrome\\/(\\d+)/i);\n      chromeVersion = result ? parseInt(result[1]) : 0;\n    }\n    if (safariWebkitVersion === null) {\n      const result = navigator.userAgent.match(/Safari\\/(\\d+)/i);\n      safariWebkitVersion = result ? parseInt(result[1]) : 0;\n    }\n  }\n\n  destroy() {}\n\n  resetTimeStamp(defaultTimeStamp: RationalTimestamp | null) {\n    logger.log('[mp4-remuxer]: initPTS & initDTS reset');\n    this._initPTS = this._initDTS = defaultTimeStamp;\n  }\n\n  resetNextTimestamp() {\n    logger.log('[mp4-remuxer]: reset next timestamp');\n    this.isVideoContiguous = false;\n    this.isAudioContiguous = false;\n  }\n\n  resetInitSegment() {\n    logger.log('[mp4-remuxer]: ISGenerated flag reset');\n    this.ISGenerated = false;\n  }\n\n  getVideoStartPts(videoSamples) {\n    let rolloverDetected = false;\n    const startPTS = videoSamples.reduce((minPTS, sample) => {\n      const delta = sample.pts - minPTS;\n      if (delta < -4294967296) {\n        // 2^32, see PTSNormalize for reasoning, but we're hitting a rollover here, and we don't want that to impact the timeOffset calculation\n        rolloverDetected = true;\n        return normalizePts(minPTS, sample.pts);\n      } else if (delta > 0) {\n        return minPTS;\n      } else {\n        return sample.pts;\n      }\n    }, videoSamples[0].pts);\n    if (rolloverDetected) {\n      logger.debug('PTS rollover detected');\n    }\n    return startPTS;\n  }\n\n  remux(\n    audioTrack: DemuxedAudioTrack,\n    videoTrack: DemuxedAvcTrack,\n    id3Track: DemuxedMetadataTrack,\n    textTrack: DemuxedUserdataTrack,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    flush: boolean,\n    playlistType: PlaylistLevelType\n  ): RemuxerResult {\n    let video: RemuxedTrack | undefined;\n    let audio: RemuxedTrack | undefined;\n    let initSegment: InitSegmentData | undefined;\n    let text: RemuxedUserdata | undefined;\n    let id3: RemuxedMetadata | undefined;\n    let independent: boolean | undefined;\n    let audioTimeOffset = timeOffset;\n    let videoTimeOffset = timeOffset;\n\n    // If we're remuxing audio and video progressively, wait until we've received enough samples for each track before proceeding.\n    // This is done to synchronize the audio and video streams. We know if the current segment will have samples if the \"pid\"\n    // parameter is greater than -1. The pid is set when the PMT is parsed, which contains the tracks list.\n    // However, if the initSegment has already been generated, or we've reached the end of a segment (flush),\n    // then we can remux one track without waiting for the other.\n    const hasAudio = audioTrack.pid > -1;\n    const hasVideo = videoTrack.pid > -1;\n    const length = videoTrack.samples.length;\n    const enoughAudioSamples = audioTrack.samples.length > 0;\n    const enoughVideoSamples = (flush && length > 0) || length > 1;\n    const canRemuxAvc =\n      ((!hasAudio || enoughAudioSamples) &&\n        (!hasVideo || enoughVideoSamples)) ||\n      this.ISGenerated ||\n      flush;\n\n    if (canRemuxAvc) {\n      if (!this.ISGenerated) {\n        initSegment = this.generateIS(\n          audioTrack,\n          videoTrack,\n          timeOffset,\n          accurateTimeOffset\n        );\n      }\n\n      const isVideoContiguous = this.isVideoContiguous;\n      let firstKeyFrameIndex = -1;\n      let firstKeyFramePTS;\n\n      if (enoughVideoSamples) {\n        firstKeyFrameIndex = findKeyframeIndex(videoTrack.samples);\n        if (!isVideoContiguous && this.config.forceKeyFrameOnDiscontinuity) {\n          independent = true;\n          if (firstKeyFrameIndex > 0) {\n            logger.warn(\n              `[mp4-remuxer]: Dropped ${firstKeyFrameIndex} out of ${length} video samples due to a missing keyframe`\n            );\n            const startPTS = this.getVideoStartPts(videoTrack.samples);\n            videoTrack.samples = videoTrack.samples.slice(firstKeyFrameIndex);\n            videoTrack.dropped += firstKeyFrameIndex;\n            videoTimeOffset +=\n              (videoTrack.samples[0].pts - startPTS) /\n              videoTrack.inputTimeScale;\n            firstKeyFramePTS = videoTimeOffset;\n          } else if (firstKeyFrameIndex === -1) {\n            logger.warn(\n              `[mp4-remuxer]: No keyframe found out of ${length} video samples`\n            );\n            independent = false;\n          }\n        }\n      }\n\n      if (this.ISGenerated) {\n        if (enoughAudioSamples && enoughVideoSamples) {\n          // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)\n          // if first audio DTS is not aligned with first video DTS then we need to take that into account\n          // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small\n          // drift between audio and video streams\n          const startPTS = this.getVideoStartPts(videoTrack.samples);\n          const tsDelta =\n            normalizePts(audioTrack.samples[0].pts, startPTS) - startPTS;\n          const audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;\n          audioTimeOffset += Math.max(0, audiovideoTimestampDelta);\n          videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);\n        }\n\n        // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is calculated in remuxAudio.\n        if (enoughAudioSamples) {\n          // if initSegment was generated without audio samples, regenerate it again\n          if (!audioTrack.samplerate) {\n            logger.warn(\n              '[mp4-remuxer]: regenerate InitSegment as audio detected'\n            );\n            initSegment = this.generateIS(\n              audioTrack,\n              videoTrack,\n              timeOffset,\n              accurateTimeOffset\n            );\n          }\n          audio = this.remuxAudio(\n            audioTrack,\n            audioTimeOffset,\n            this.isAudioContiguous,\n            accurateTimeOffset,\n            hasVideo ||\n              enoughVideoSamples ||\n              playlistType === PlaylistLevelType.AUDIO\n              ? videoTimeOffset\n              : undefined\n          );\n          if (enoughVideoSamples) {\n            const audioTrackLength = audio ? audio.endPTS - audio.startPTS : 0;\n            // if initSegment was generated without video samples, regenerate it again\n            if (!videoTrack.inputTimeScale) {\n              logger.warn(\n                '[mp4-remuxer]: regenerate InitSegment as video detected'\n              );\n              initSegment = this.generateIS(\n                audioTrack,\n                videoTrack,\n                timeOffset,\n                accurateTimeOffset\n              );\n            }\n            video = this.remuxVideo(\n              videoTrack,\n              videoTimeOffset,\n              isVideoContiguous,\n              audioTrackLength\n            );\n          }\n        } else if (enoughVideoSamples) {\n          video = this.remuxVideo(\n            videoTrack,\n            videoTimeOffset,\n            isVideoContiguous,\n            0\n          );\n        }\n        if (video) {\n          video.firstKeyFrame = firstKeyFrameIndex;\n          video.independent = firstKeyFrameIndex !== -1;\n          video.firstKeyFramePTS = firstKeyFramePTS;\n        }\n      }\n    }\n\n    // Allow ID3 and text to remux, even if more audio/video samples are required\n    if (this.ISGenerated && this._initPTS && this._initDTS) {\n      if (id3Track.samples.length) {\n        id3 = flushTextTrackMetadataCueSamples(\n          id3Track,\n          timeOffset,\n          this._initPTS,\n          this._initDTS\n        );\n      }\n\n      if (textTrack.samples.length) {\n        text = flushTextTrackUserdataCueSamples(\n          textTrack,\n          timeOffset,\n          this._initPTS\n        );\n      }\n    }\n\n    return {\n      audio,\n      video,\n      initSegment,\n      independent,\n      text,\n      id3,\n    };\n  }\n\n  generateIS(\n    audioTrack: DemuxedAudioTrack,\n    videoTrack: DemuxedAvcTrack,\n    timeOffset: number,\n    accurateTimeOffset: boolean\n  ): InitSegmentData | undefined {\n    const audioSamples = audioTrack.samples;\n    const videoSamples = videoTrack.samples;\n    const typeSupported = this.typeSupported;\n    const tracks: TrackSet = {};\n    const _initPTS = this._initPTS;\n    let computePTSDTS = !_initPTS || accurateTimeOffset;\n    let container = 'audio/mp4';\n    let initPTS: number | undefined;\n    let initDTS: number | undefined;\n    let timescale: number | undefined;\n\n    if (computePTSDTS) {\n      initPTS = initDTS = Infinity;\n    }\n\n    if (audioTrack.config && audioSamples.length) {\n      // let's use audio sampling rate as MP4 time scale.\n      // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)\n      // using audio sampling rate here helps having an integer MP4 frame duration\n      // this avoids potential rounding issue and AV sync issue\n      audioTrack.timescale = audioTrack.samplerate;\n      switch (audioTrack.segmentCodec) {\n        case 'mp3':\n          if (typeSupported.mpeg) {\n            // Chrome and Safari\n            container = 'audio/mpeg';\n            audioTrack.codec = '';\n          } else if (typeSupported.mp3) {\n            // Firefox\n            audioTrack.codec = 'mp3';\n          }\n          break;\n      }\n      tracks.audio = {\n        id: 'audio',\n        container: container,\n        codec: audioTrack.codec,\n        initSegment:\n          audioTrack.segmentCodec === 'mp3' && typeSupported.mpeg\n            ? new Uint8Array(0)\n            : MP4.initSegment([audioTrack]),\n        metadata: {\n          channelCount: audioTrack.channelCount,\n        },\n      };\n      if (computePTSDTS) {\n        timescale = audioTrack.inputTimeScale;\n        if (!_initPTS || timescale !== _initPTS.timescale) {\n          // remember first PTS of this demuxing context. for audio, PTS = DTS\n          initPTS = initDTS =\n            audioSamples[0].pts - Math.round(timescale * timeOffset);\n        } else {\n          computePTSDTS = false;\n        }\n      }\n    }\n\n    if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n      // let's use input time scale as MP4 video timescale\n      // we use input time scale straight away to avoid rounding issues on frame duration / cts computation\n      videoTrack.timescale = videoTrack.inputTimeScale;\n      tracks.video = {\n        id: 'main',\n        container: 'video/mp4',\n        codec: videoTrack.codec,\n        initSegment: MP4.initSegment([videoTrack]),\n        metadata: {\n          width: videoTrack.width,\n          height: videoTrack.height,\n        },\n      };\n      if (computePTSDTS) {\n        timescale = videoTrack.inputTimeScale;\n        if (!_initPTS || timescale !== _initPTS.timescale) {\n          const startPTS = this.getVideoStartPts(videoSamples);\n          const startOffset = Math.round(timescale * timeOffset);\n          initDTS = Math.min(\n            initDTS as number,\n            normalizePts(videoSamples[0].dts, startPTS) - startOffset\n          );\n          initPTS = Math.min(initPTS as number, startPTS - startOffset);\n        } else {\n          computePTSDTS = false;\n        }\n      }\n    }\n\n    if (Object.keys(tracks).length) {\n      this.ISGenerated = true;\n      if (computePTSDTS) {\n        this._initPTS = {\n          baseTime: initPTS as number,\n          timescale: timescale as number,\n        };\n        this._initDTS = {\n          baseTime: initDTS as number,\n          timescale: timescale as number,\n        };\n      } else {\n        initPTS = timescale = undefined;\n      }\n\n      return {\n        tracks,\n        initPTS,\n        timescale,\n      };\n    }\n  }\n\n  remuxVideo(\n    track: DemuxedAvcTrack,\n    timeOffset: number,\n    contiguous: boolean,\n    audioTrackLength: number\n  ): RemuxedTrack | undefined {\n    const timeScale: number = track.inputTimeScale;\n    const inputSamples: Array<AvcSample> = track.samples;\n    const outputSamples: Array<Mp4Sample> = [];\n    const nbSamples = inputSamples.length;\n    const initPTS = this._initPTS as RationalTimestamp;\n    let nextAvcDts = this.nextAvcDts;\n    let offset = 8;\n    let mp4SampleDuration = this.videoSampleDuration;\n    let firstDTS;\n    let lastDTS;\n    let minPTS: number = Number.POSITIVE_INFINITY;\n    let maxPTS: number = Number.NEGATIVE_INFINITY;\n    let sortSamples = false;\n\n    // if parsed fragment is contiguous with last one, let's use last DTS value as reference\n    if (!contiguous || nextAvcDts === null) {\n      const pts = timeOffset * timeScale;\n      const cts =\n        inputSamples[0].pts -\n        normalizePts(inputSamples[0].dts, inputSamples[0].pts);\n      // if not contiguous, let's use target timeOffset\n      nextAvcDts = pts - cts;\n    }\n\n    // PTS is coded on 33bits, and can loop from -2^32 to 2^32\n    // PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\n    const initTime = (initPTS.baseTime * timeScale) / initPTS.timescale;\n    for (let i = 0; i < nbSamples; i++) {\n      const sample = inputSamples[i];\n      sample.pts = normalizePts(sample.pts - initTime, nextAvcDts);\n      sample.dts = normalizePts(sample.dts - initTime, nextAvcDts);\n      if (sample.dts < inputSamples[i > 0 ? i - 1 : i].dts) {\n        sortSamples = true;\n      }\n    }\n\n    // sort video samples by DTS then PTS then demux id order\n    if (sortSamples) {\n      inputSamples.sort(function (a, b) {\n        const deltadts = a.dts - b.dts;\n        const deltapts = a.pts - b.pts;\n        return deltadts || deltapts;\n      });\n    }\n\n    // Get first/last DTS\n    firstDTS = inputSamples[0].dts;\n    lastDTS = inputSamples[inputSamples.length - 1].dts;\n\n    // Sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\n    // set this constant duration as being the avg delta between consecutive DTS.\n    const inputDuration = lastDTS - firstDTS;\n    const averageSampleDuration = inputDuration\n      ? Math.round(inputDuration / (nbSamples - 1))\n      : mp4SampleDuration || track.inputTimeScale / 30;\n\n    // if fragment are contiguous, detect hole/overlapping between fragments\n    if (contiguous) {\n      // check timestamp continuity across consecutive fragments (this is to remove inter-fragment gap/hole)\n      const delta = firstDTS - nextAvcDts;\n      const foundHole = delta > averageSampleDuration;\n      const foundOverlap = delta < -1;\n      if (foundHole || foundOverlap) {\n        if (foundHole) {\n          logger.warn(\n            `AVC: ${toMsFromMpegTsClock(\n              delta,\n              true\n            )} ms (${delta}dts) hole between fragments detected, filling it`\n          );\n        } else {\n          logger.warn(\n            `AVC: ${toMsFromMpegTsClock(\n              -delta,\n              true\n            )} ms (${delta}dts) overlapping between fragments detected`\n          );\n        }\n        if (!foundOverlap || nextAvcDts > inputSamples[0].pts) {\n          firstDTS = nextAvcDts;\n          const firstPTS = inputSamples[0].pts - delta;\n          inputSamples[0].dts = firstDTS;\n          inputSamples[0].pts = firstPTS;\n          logger.log(\n            `Video: First PTS/DTS adjusted: ${toMsFromMpegTsClock(\n              firstPTS,\n              true\n            )}/${toMsFromMpegTsClock(\n              firstDTS,\n              true\n            )}, delta: ${toMsFromMpegTsClock(delta, true)} ms`\n          );\n        }\n      }\n    }\n\n    firstDTS = Math.max(0, firstDTS);\n\n    let nbNalu = 0;\n    let naluLen = 0;\n    for (let i = 0; i < nbSamples; i++) {\n      // compute total/avc sample length and nb of NAL units\n      const sample = inputSamples[i];\n      const units = sample.units;\n      const nbUnits = units.length;\n      let sampleLen = 0;\n      for (let j = 0; j < nbUnits; j++) {\n        sampleLen += units[j].data.length;\n      }\n\n      naluLen += sampleLen;\n      nbNalu += nbUnits;\n      sample.length = sampleLen;\n\n      // ensure sample monotonic DTS\n      sample.dts = Math.max(sample.dts, firstDTS);\n\n      minPTS = Math.min(sample.pts, minPTS);\n      maxPTS = Math.max(sample.pts, maxPTS);\n    }\n    lastDTS = inputSamples[nbSamples - 1].dts;\n\n    /* concatenate the video data and construct the mdat in place\n      (need 8 more bytes to fill length and mpdat type) */\n    const mdatSize = naluLen + 4 * nbNalu + 8;\n    let mdat;\n    try {\n      mdat = new Uint8Array(mdatSize);\n    } catch (err) {\n      this.observer.emit(Events.ERROR, Events.ERROR, {\n        type: ErrorTypes.MUX_ERROR,\n        details: ErrorDetails.REMUX_ALLOC_ERROR,\n        fatal: false,\n        error: err,\n        bytes: mdatSize,\n        reason: `fail allocating video mdat ${mdatSize}`,\n      });\n      return;\n    }\n    const view = new DataView(mdat.buffer);\n    view.setUint32(0, mdatSize);\n    mdat.set(MP4.types.mdat, 4);\n\n    let stretchedLastFrame = false;\n    let minDtsDelta = Number.POSITIVE_INFINITY;\n    let minPtsDelta = Number.POSITIVE_INFINITY;\n    let maxDtsDelta = Number.NEGATIVE_INFINITY;\n    let maxPtsDelta = Number.NEGATIVE_INFINITY;\n    for (let i = 0; i < nbSamples; i++) {\n      const avcSample = inputSamples[i];\n      const avcSampleUnits = avcSample.units;\n      let mp4SampleLength = 0;\n      // convert NALU bitstream to MP4 format (prepend NALU with size field)\n      for (let j = 0, nbUnits = avcSampleUnits.length; j < nbUnits; j++) {\n        const unit = avcSampleUnits[j];\n        const unitData = unit.data;\n        const unitDataLen = unit.data.byteLength;\n        view.setUint32(offset, unitDataLen);\n        offset += 4;\n        mdat.set(unitData, offset);\n        offset += unitDataLen;\n        mp4SampleLength += 4 + unitDataLen;\n      }\n\n      // expected sample duration is the Decoding Timestamp diff of consecutive samples\n      let ptsDelta;\n      if (i < nbSamples - 1) {\n        mp4SampleDuration = inputSamples[i + 1].dts - avcSample.dts;\n        ptsDelta = inputSamples[i + 1].pts - avcSample.pts;\n      } else {\n        const config = this.config;\n        const lastFrameDuration =\n          i > 0\n            ? avcSample.dts - inputSamples[i - 1].dts\n            : averageSampleDuration;\n        ptsDelta =\n          i > 0\n            ? avcSample.pts - inputSamples[i - 1].pts\n            : averageSampleDuration;\n        if (config.stretchShortVideoTrack && this.nextAudioPts !== null) {\n          // In some cases, a segment's audio track duration may exceed the video track duration.\n          // Since we've already remuxed audio, and we know how long the audio track is, we look to\n          // see if the delta to the next segment is longer than maxBufferHole.\n          // If so, playback would potentially get stuck, so we artificially inflate\n          // the duration of the last frame to minimize any potential gap between segments.\n          const gapTolerance = Math.floor(config.maxBufferHole * timeScale);\n          const deltaToFrameEnd =\n            (audioTrackLength\n              ? minPTS + audioTrackLength * timeScale\n              : this.nextAudioPts) - avcSample.pts;\n          if (deltaToFrameEnd > gapTolerance) {\n            // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\n            // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.\n            mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\n            if (mp4SampleDuration < 0) {\n              mp4SampleDuration = lastFrameDuration;\n            } else {\n              stretchedLastFrame = true;\n            }\n            logger.log(\n              `[mp4-remuxer]: It is approximately ${\n                deltaToFrameEnd / 90\n              } ms to the next segment; using duration ${\n                mp4SampleDuration / 90\n              } ms for the last video frame.`\n            );\n          } else {\n            mp4SampleDuration = lastFrameDuration;\n          }\n        } else {\n          mp4SampleDuration = lastFrameDuration;\n        }\n      }\n      const compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts);\n      minDtsDelta = Math.min(minDtsDelta, mp4SampleDuration);\n      maxDtsDelta = Math.max(maxDtsDelta, mp4SampleDuration);\n      minPtsDelta = Math.min(minPtsDelta, ptsDelta);\n      maxPtsDelta = Math.max(maxPtsDelta, ptsDelta);\n\n      outputSamples.push(\n        new Mp4Sample(\n          avcSample.key,\n          mp4SampleDuration,\n          mp4SampleLength,\n          compositionTimeOffset\n        )\n      );\n    }\n\n    if (outputSamples.length) {\n      if (chromeVersion) {\n        if (chromeVersion < 70) {\n          // Chrome workaround, mark first sample as being a Random Access Point (keyframe) to avoid sourcebuffer append issue\n          // https://code.google.com/p/chromium/issues/detail?id=229412\n          const flags = outputSamples[0].flags;\n          flags.dependsOn = 2;\n          flags.isNonSync = 0;\n        }\n      } else if (safariWebkitVersion) {\n        // Fix for \"CNN special report, with CC\" in test-streams (Safari browser only)\n        // Ignore DTS when frame durations are irregular. Safari MSE does not handle this leading to gaps.\n        if (\n          maxPtsDelta - minPtsDelta < maxDtsDelta - minDtsDelta &&\n          averageSampleDuration / maxDtsDelta < 0.025 &&\n          outputSamples[0].cts === 0\n        ) {\n          logger.warn(\n            'Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.'\n          );\n          let dts = firstDTS;\n          for (let i = 0, len = outputSamples.length; i < len; i++) {\n            const nextDts = dts + outputSamples[i].duration;\n            const pts = dts + outputSamples[i].cts;\n            if (i < len - 1) {\n              const nextPts = nextDts + outputSamples[i + 1].cts;\n              outputSamples[i].duration = nextPts - pts;\n            } else {\n              outputSamples[i].duration = i\n                ? outputSamples[i - 1].duration\n                : averageSampleDuration;\n            }\n            outputSamples[i].cts = 0;\n            dts = nextDts;\n          }\n        }\n      }\n    }\n    // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\n    mp4SampleDuration =\n      stretchedLastFrame || !mp4SampleDuration\n        ? averageSampleDuration\n        : mp4SampleDuration;\n    this.nextAvcDts = nextAvcDts = lastDTS + mp4SampleDuration;\n    this.videoSampleDuration = mp4SampleDuration;\n    this.isVideoContiguous = true;\n    const moof = MP4.moof(\n      track.sequenceNumber++,\n      firstDTS,\n      Object.assign({}, track, {\n        samples: outputSamples,\n      })\n    );\n    const type: SourceBufferName = 'video';\n    const data = {\n      data1: moof,\n      data2: mdat,\n      startPTS: minPTS / timeScale,\n      endPTS: (maxPTS + mp4SampleDuration) / timeScale,\n      startDTS: firstDTS / timeScale,\n      endDTS: (nextAvcDts as number) / timeScale,\n      type,\n      hasAudio: false,\n      hasVideo: true,\n      nb: outputSamples.length,\n      dropped: track.dropped,\n    };\n    track.samples = [];\n    track.dropped = 0;\n    return data;\n  }\n\n  remuxAudio(\n    track: DemuxedAudioTrack,\n    timeOffset: number,\n    contiguous: boolean,\n    accurateTimeOffset: boolean,\n    videoTimeOffset?: number\n  ): RemuxedTrack | undefined {\n    const inputTimeScale: number = track.inputTimeScale;\n    const mp4timeScale: number = track.samplerate\n      ? track.samplerate\n      : inputTimeScale;\n    const scaleFactor: number = inputTimeScale / mp4timeScale;\n    const mp4SampleDuration: number =\n      track.segmentCodec === 'aac'\n        ? AAC_SAMPLES_PER_FRAME\n        : MPEG_AUDIO_SAMPLE_PER_FRAME;\n    const inputSampleDuration: number = mp4SampleDuration * scaleFactor;\n    const initPTS = this._initPTS as RationalTimestamp;\n    const rawMPEG: boolean =\n      track.segmentCodec === 'mp3' && this.typeSupported.mpeg;\n    const outputSamples: Array<Mp4Sample> = [];\n    const alignedWithVideo = videoTimeOffset !== undefined;\n\n    let inputSamples: Array<AudioSample> = track.samples;\n    let offset: number = rawMPEG ? 0 : 8;\n    let nextAudioPts: number = this.nextAudioPts || -1;\n\n    // window.audioSamples ? window.audioSamples.push(inputSamples.map(s => s.pts)) : (window.audioSamples = [inputSamples.map(s => s.pts)]);\n\n    // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),\n    // for sake of clarity:\n    // consecutive fragments are frags with\n    //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n    //  - less than 20 audio frames distance\n    // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n    // this helps ensuring audio continuity\n    // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame\n    const timeOffsetMpegTS = timeOffset * inputTimeScale;\n    const initTime = (initPTS.baseTime * inputTimeScale) / initPTS.timescale;\n    this.isAudioContiguous = contiguous =\n      contiguous ||\n      ((inputSamples.length &&\n        nextAudioPts > 0 &&\n        ((accurateTimeOffset &&\n          Math.abs(timeOffsetMpegTS - nextAudioPts) < 9000) ||\n          Math.abs(\n            normalizePts(inputSamples[0].pts - initTime, timeOffsetMpegTS) -\n              nextAudioPts\n          ) <\n            20 * inputSampleDuration)) as boolean);\n\n    // compute normalized PTS\n    inputSamples.forEach(function (sample) {\n      sample.pts = normalizePts(sample.pts - initTime, timeOffsetMpegTS);\n    });\n\n    if (!contiguous || nextAudioPts < 0) {\n      // filter out sample with negative PTS that are not playable anyway\n      // if we don't remove these negative samples, they will shift all audio samples forward.\n      // leading to audio overlap between current / next fragment\n      inputSamples = inputSamples.filter((sample) => sample.pts >= 0);\n\n      // in case all samples have negative PTS, and have been filtered out, return now\n      if (!inputSamples.length) {\n        return;\n      }\n\n      if (videoTimeOffset === 0) {\n        // Set the start to 0 to match video so that start gaps larger than inputSampleDuration are filled with silence\n        nextAudioPts = 0;\n      } else if (accurateTimeOffset && !alignedWithVideo) {\n        // When not seeking, not live, and LevelDetails.PTSKnown, use fragment start as predicted next audio PTS\n        nextAudioPts = Math.max(0, timeOffsetMpegTS);\n      } else {\n        // if frags are not contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS\n        nextAudioPts = inputSamples[0].pts;\n      }\n    }\n\n    // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\n    // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\n    // In an effort to prevent this from happening, we inject frames here where there are gaps.\n    // When possible, we inject a silent frame; when that's not possible, we duplicate the last\n    // frame.\n\n    if (track.segmentCodec === 'aac') {\n      const maxAudioFramesDrift = this.config.maxAudioFramesDrift;\n      for (let i = 0, nextPts = nextAudioPts; i < inputSamples.length; i++) {\n        // First, let's see how far off this frame is from where we expect it to be\n        const sample = inputSamples[i];\n        const pts = sample.pts;\n        const delta = pts - nextPts;\n        const duration = Math.abs((1000 * delta) / inputTimeScale);\n\n        // When remuxing with video, if we're overlapping by more than a duration, drop this sample to stay in sync\n        if (\n          delta <= -maxAudioFramesDrift * inputSampleDuration &&\n          alignedWithVideo\n        ) {\n          if (i === 0) {\n            logger.warn(\n              `Audio frame @ ${(pts / inputTimeScale).toFixed(\n                3\n              )}s overlaps nextAudioPts by ${Math.round(\n                (1000 * delta) / inputTimeScale\n              )} ms.`\n            );\n            this.nextAudioPts = nextAudioPts = nextPts = pts;\n          }\n        } // eslint-disable-line brace-style\n\n        // Insert missing frames if:\n        // 1: We're more than maxAudioFramesDrift frame away\n        // 2: Not more than MAX_SILENT_FRAME_DURATION away\n        // 3: currentTime (aka nextPtsNorm) is not 0\n        // 4: remuxing with video (videoTimeOffset !== undefined)\n        else if (\n          delta >= maxAudioFramesDrift * inputSampleDuration &&\n          duration < MAX_SILENT_FRAME_DURATION &&\n          alignedWithVideo\n        ) {\n          let missing = Math.round(delta / inputSampleDuration);\n          // Adjust nextPts so that silent samples are aligned with media pts. This will prevent media samples from\n          // later being shifted if nextPts is based on timeOffset and delta is not a multiple of inputSampleDuration.\n          nextPts = pts - missing * inputSampleDuration;\n          if (nextPts < 0) {\n            missing--;\n            nextPts += inputSampleDuration;\n          }\n          if (i === 0) {\n            this.nextAudioPts = nextAudioPts = nextPts;\n          }\n          logger.warn(\n            `[mp4-remuxer]: Injecting ${missing} audio frame @ ${(\n              nextPts / inputTimeScale\n            ).toFixed(3)}s due to ${Math.round(\n              (1000 * delta) / inputTimeScale\n            )} ms gap.`\n          );\n          for (let j = 0; j < missing; j++) {\n            const newStamp = Math.max(nextPts as number, 0);\n            let fillFrame = AAC.getSilentFrame(\n              track.manifestCodec || track.codec,\n              track.channelCount\n            );\n            if (!fillFrame) {\n              logger.log(\n                '[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.'\n              );\n              fillFrame = sample.unit.subarray();\n            }\n            inputSamples.splice(i, 0, {\n              unit: fillFrame,\n              pts: newStamp,\n            });\n            nextPts += inputSampleDuration;\n            i++;\n          }\n        }\n        sample.pts = nextPts;\n        nextPts += inputSampleDuration;\n      }\n    }\n    let firstPTS: number | null = null;\n    let lastPTS: number | null = null;\n    let mdat: any;\n    let mdatSize: number = 0;\n    let sampleLength: number = inputSamples.length;\n    while (sampleLength--) {\n      mdatSize += inputSamples[sampleLength].unit.byteLength;\n    }\n    for (let j = 0, nbSamples = inputSamples.length; j < nbSamples; j++) {\n      const audioSample = inputSamples[j];\n      const unit = audioSample.unit;\n      let pts = audioSample.pts;\n      if (lastPTS !== null) {\n        // If we have more than one sample, set the duration of the sample to the \"real\" duration; the PTS diff with\n        // the previous sample\n        const prevSample = outputSamples[j - 1];\n        prevSample.duration = Math.round((pts - lastPTS) / scaleFactor);\n      } else {\n        if (contiguous && track.segmentCodec === 'aac') {\n          // set PTS/DTS to expected PTS/DTS\n          pts = nextAudioPts;\n        }\n        // remember first PTS of our audioSamples\n        firstPTS = pts;\n        if (mdatSize > 0) {\n          /* concatenate the audio data and construct the mdat in place\n            (need 8 more bytes to fill length and mdat type) */\n          mdatSize += offset;\n          try {\n            mdat = new Uint8Array(mdatSize);\n          } catch (err) {\n            this.observer.emit(Events.ERROR, Events.ERROR, {\n              type: ErrorTypes.MUX_ERROR,\n              details: ErrorDetails.REMUX_ALLOC_ERROR,\n              fatal: false,\n              error: err,\n              bytes: mdatSize,\n              reason: `fail allocating audio mdat ${mdatSize}`,\n            });\n            return;\n          }\n          if (!rawMPEG) {\n            const view = new DataView(mdat.buffer);\n            view.setUint32(0, mdatSize);\n            mdat.set(MP4.types.mdat, 4);\n          }\n        } else {\n          // no audio samples\n          return;\n        }\n      }\n      mdat.set(unit, offset);\n      const unitLen = unit.byteLength;\n      offset += unitLen;\n      // Default the sample's duration to the computed mp4SampleDuration, which will either be 1024 for AAC or 1152 for MPEG\n      // In the case that we have 1 sample, this will be the duration. If we have more than one sample, the duration\n      // becomes the PTS diff with the previous sample\n      outputSamples.push(new Mp4Sample(true, mp4SampleDuration, unitLen, 0));\n      lastPTS = pts;\n    }\n\n    // We could end up with no audio samples if all input samples were overlapping with the previously remuxed ones\n    const nbSamples = outputSamples.length;\n    if (!nbSamples) {\n      return;\n    }\n\n    // The next audio sample PTS should be equal to last sample PTS + duration\n    const lastSample = outputSamples[outputSamples.length - 1];\n    this.nextAudioPts = nextAudioPts =\n      lastPTS! + scaleFactor * lastSample.duration;\n\n    // Set the track samples from inputSamples to outputSamples before remuxing\n    const moof = rawMPEG\n      ? new Uint8Array(0)\n      : MP4.moof(\n          track.sequenceNumber++,\n          firstPTS! / scaleFactor,\n          Object.assign({}, track, { samples: outputSamples })\n        );\n\n    // Clear the track samples. This also clears the samples array in the demuxer, since the reference is shared\n    track.samples = [];\n    const start = firstPTS! / inputTimeScale;\n    const end = nextAudioPts / inputTimeScale;\n    const type: SourceBufferName = 'audio';\n    const audioData = {\n      data1: moof,\n      data2: mdat,\n      startPTS: start,\n      endPTS: end,\n      startDTS: start,\n      endDTS: end,\n      type,\n      hasAudio: true,\n      hasVideo: false,\n      nb: nbSamples,\n    };\n\n    this.isAudioContiguous = true;\n    return audioData;\n  }\n\n  remuxEmptyAudio(\n    track: DemuxedAudioTrack,\n    timeOffset: number,\n    contiguous: boolean,\n    videoData: Fragment\n  ): RemuxedTrack | undefined {\n    const inputTimeScale: number = track.inputTimeScale;\n    const mp4timeScale: number = track.samplerate\n      ? track.samplerate\n      : inputTimeScale;\n    const scaleFactor: number = inputTimeScale / mp4timeScale;\n    const nextAudioPts: number | null = this.nextAudioPts;\n    // sync with video's timestamp\n    const initDTS = this._initDTS as RationalTimestamp;\n    const init90kHz = (initDTS.baseTime * 90000) / initDTS.timescale;\n    const startDTS: number =\n      (nextAudioPts !== null\n        ? nextAudioPts\n        : videoData.startDTS * inputTimeScale) + init90kHz;\n    const endDTS: number = videoData.endDTS * inputTimeScale + init90kHz;\n    // one sample's duration value\n    const frameDuration: number = scaleFactor * AAC_SAMPLES_PER_FRAME;\n    // samples count of this segment's duration\n    const nbSamples: number = Math.ceil((endDTS - startDTS) / frameDuration);\n    // silent frame\n    const silentFrame: Uint8Array | undefined = AAC.getSilentFrame(\n      track.manifestCodec || track.codec,\n      track.channelCount\n    );\n\n    logger.warn('[mp4-remuxer]: remux empty Audio');\n    // Can't remux if we can't generate a silent frame...\n    if (!silentFrame) {\n      logger.trace(\n        '[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec'\n      );\n      return;\n    }\n\n    const samples: Array<any> = [];\n    for (let i = 0; i < nbSamples; i++) {\n      const stamp = startDTS + i * frameDuration;\n      samples.push({ unit: silentFrame, pts: stamp, dts: stamp });\n    }\n    track.samples = samples;\n\n    return this.remuxAudio(track, timeOffset, contiguous, false);\n  }\n}\n\nexport function normalizePts(value: number, reference: number | null): number {\n  let offset;\n  if (reference === null) {\n    return value;\n  }\n\n  if (reference < value) {\n    // - 2^33\n    offset = -8589934592;\n  } else {\n    // + 2^33\n    offset = 8589934592;\n  }\n  /* PTS is 33bit (from 0 to 2^33 -1)\n    if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\n    PTS looping occured. fill the gap */\n  while (Math.abs(value - reference) > 4294967296) {\n    value += offset;\n  }\n\n  return value;\n}\n\nfunction findKeyframeIndex(samples: Array<AvcSample>): number {\n  for (let i = 0; i < samples.length; i++) {\n    if (samples[i].key) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function flushTextTrackMetadataCueSamples(\n  track: DemuxedMetadataTrack,\n  timeOffset: number,\n  initPTS: RationalTimestamp,\n  initDTS: RationalTimestamp\n): RemuxedMetadata | undefined {\n  const length = track.samples.length;\n  if (!length) {\n    return;\n  }\n  const inputTimeScale = track.inputTimeScale;\n  for (let index = 0; index < length; index++) {\n    const sample = track.samples[index];\n    // setting id3 pts, dts to relative time\n    // using this._initPTS and this._initDTS to calculate relative time\n    sample.pts =\n      normalizePts(\n        sample.pts - (initPTS.baseTime * 90000) / initPTS.timescale,\n        timeOffset * inputTimeScale\n      ) / inputTimeScale;\n    sample.dts =\n      normalizePts(\n        sample.dts - (initDTS.baseTime * 90000) / initDTS.timescale,\n        timeOffset * inputTimeScale\n      ) / inputTimeScale;\n  }\n  const samples = track.samples;\n  track.samples = [];\n  return {\n    samples,\n  };\n}\n\nexport function flushTextTrackUserdataCueSamples(\n  track: DemuxedUserdataTrack,\n  timeOffset: number,\n  initPTS: RationalTimestamp\n): RemuxedUserdata | undefined {\n  const length = track.samples.length;\n  if (!length) {\n    return;\n  }\n\n  const inputTimeScale = track.inputTimeScale;\n  for (let index = 0; index < length; index++) {\n    const sample = track.samples[index];\n    // setting text pts, dts to relative time\n    // using this._initPTS and this._initDTS to calculate relative time\n    sample.pts =\n      normalizePts(\n        sample.pts - (initPTS.baseTime * 90000) / initPTS.timescale,\n        timeOffset * inputTimeScale\n      ) / inputTimeScale;\n  }\n  track.samples.sort((a, b) => a.pts - b.pts);\n  const samples = track.samples;\n  track.samples = [];\n  return {\n    samples,\n  };\n}\n\nclass Mp4Sample {\n  public size: number;\n  public duration: number;\n  public cts: number;\n  public flags: Mp4SampleFlags;\n\n  constructor(\n    isKeyframe: boolean,\n    duration: number,\n    size: number,\n    cts: number\n  ) {\n    this.duration = duration;\n    this.size = size;\n    this.cts = cts;\n    this.flags = new Mp4SampleFlags(isKeyframe);\n  }\n}\n\nclass Mp4SampleFlags {\n  public isLeading: 0 = 0;\n  public isDependedOn: 0 = 0;\n  public hasRedundancy: 0 = 0;\n  public degradPrio: 0 = 0;\n  public dependsOn: 1 | 2 = 1;\n  public isNonSync: 0 | 1 = 1;\n\n  constructor(isKeyframe) {\n    this.dependsOn = isKeyframe ? 2 : 1;\n    this.isNonSync = isKeyframe ? 0 : 1;\n  }\n}\n","import type { HlsEventEmitter } from '../events';\nimport { Events } from '../events';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport Decrypter from '../crypt/decrypter';\nimport AACDemuxer from '../demux/aacdemuxer';\nimport MP4Demuxer from '../demux/mp4demuxer';\nimport TSDemuxer, { TypeSupported } from '../demux/tsdemuxer';\nimport MP3Demuxer from '../demux/mp3demuxer';\nimport MP4Remuxer from '../remux/mp4-remuxer';\nimport PassThroughRemuxer from '../remux/passthrough-remuxer';\nimport { logger } from '../utils/logger';\nimport type { Demuxer, DemuxerResult, KeyData } from '../types/demuxer';\nimport type { Remuxer } from '../types/remuxer';\nimport type { TransmuxerResult, ChunkMetadata } from '../types/transmuxer';\nimport type { HlsConfig } from '../config';\nimport type { DecryptData } from '../loader/level-key';\nimport type { PlaylistLevelType } from '../types/loader';\nimport type { RationalTimestamp } from '../utils/timescale-conversion';\n\nlet now;\n// performance.now() not available on WebWorker, at least on Safari Desktop\ntry {\n  now = self.performance.now.bind(self.performance);\n} catch (err) {\n  logger.debug('Unable to use Performance API on this environment');\n  now = typeof self !== 'undefined' && self.Date.now;\n}\n\ntype MuxConfig =\n  | { demux: typeof MP4Demuxer; remux: typeof PassThroughRemuxer }\n  | { demux: typeof TSDemuxer; remux: typeof MP4Remuxer }\n  | { demux: typeof AACDemuxer; remux: typeof MP4Remuxer }\n  | { demux: typeof MP3Demuxer; remux: typeof MP4Remuxer };\n\nconst muxConfig: MuxConfig[] = [\n  { demux: MP4Demuxer, remux: PassThroughRemuxer },\n  { demux: TSDemuxer, remux: MP4Remuxer },\n  { demux: AACDemuxer, remux: MP4Remuxer },\n  { demux: MP3Demuxer, remux: MP4Remuxer },\n];\n\nexport default class Transmuxer {\n  public async: boolean = false;\n  private observer: HlsEventEmitter;\n  private typeSupported: TypeSupported;\n  private config: HlsConfig;\n  private vendor: string;\n  private id: PlaylistLevelType;\n  private demuxer?: Demuxer;\n  private remuxer?: Remuxer;\n  private decrypter?: Decrypter;\n  private probe!: Function;\n  private decryptionPromise: Promise<TransmuxerResult> | null = null;\n  private transmuxConfig!: TransmuxConfig;\n  private currentTransmuxState!: TransmuxState;\n\n  constructor(\n    observer: HlsEventEmitter,\n    typeSupported: TypeSupported,\n    config: HlsConfig,\n    vendor: string,\n    id: PlaylistLevelType\n  ) {\n    this.observer = observer;\n    this.typeSupported = typeSupported;\n    this.config = config;\n    this.vendor = vendor;\n    this.id = id;\n  }\n\n  configure(transmuxConfig: TransmuxConfig) {\n    this.transmuxConfig = transmuxConfig;\n    if (this.decrypter) {\n      this.decrypter.reset();\n    }\n  }\n\n  push(\n    data: ArrayBuffer,\n    decryptdata: DecryptData | null,\n    chunkMeta: ChunkMetadata,\n    state?: TransmuxState\n  ): TransmuxerResult | Promise<TransmuxerResult> {\n    const stats = chunkMeta.transmuxing;\n    stats.executeStart = now();\n\n    let uintData: Uint8Array = new Uint8Array(data);\n    const { currentTransmuxState, transmuxConfig } = this;\n    if (state) {\n      this.currentTransmuxState = state;\n    }\n\n    const {\n      contiguous,\n      discontinuity,\n      trackSwitch,\n      accurateTimeOffset,\n      timeOffset,\n      initSegmentChange,\n    } = state || currentTransmuxState;\n    const {\n      audioCodec,\n      videoCodec,\n      defaultInitPts,\n      duration,\n      initSegmentData,\n    } = transmuxConfig;\n\n    const keyData = getEncryptionType(uintData, decryptdata);\n    if (keyData && keyData.method === 'AES-128') {\n      const decrypter = this.getDecrypter();\n      // Software decryption is synchronous; webCrypto is not\n      if (decrypter.isSync()) {\n        // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached\n        // data is handled in the flush() call\n        let decryptedData = decrypter.softwareDecrypt(\n          uintData,\n          keyData.key.buffer,\n          keyData.iv.buffer\n        );\n        // For Low-Latency HLS Parts, decrypt in place, since part parsing is expected on push progress\n        const loadingParts = chunkMeta.part > -1;\n        if (loadingParts) {\n          decryptedData = decrypter.flush();\n        }\n        if (!decryptedData) {\n          stats.executeEnd = now();\n          return emptyResult(chunkMeta);\n        }\n        uintData = new Uint8Array(decryptedData);\n      } else {\n        this.decryptionPromise = decrypter\n          .webCryptoDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer)\n          .then((decryptedData): TransmuxerResult => {\n            // Calling push here is important; if flush() is called while this is still resolving, this ensures that\n            // the decrypted data has been transmuxed\n            const result = this.push(\n              decryptedData,\n              null,\n              chunkMeta\n            ) as TransmuxerResult;\n            this.decryptionPromise = null;\n            return result;\n          });\n        return this.decryptionPromise!;\n      }\n    }\n\n    const resetMuxers = this.needsProbing(discontinuity, trackSwitch);\n    if (resetMuxers) {\n      const error = this.configureTransmuxer(uintData);\n      if (error) {\n        logger.warn(`[transmuxer] ${error.message}`);\n        this.observer.emit(Events.ERROR, Events.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.FRAG_PARSING_ERROR,\n          fatal: false,\n          error,\n          reason: error.message,\n        });\n        stats.executeEnd = now();\n        return emptyResult(chunkMeta);\n      }\n    }\n\n    if (discontinuity || trackSwitch || initSegmentChange || resetMuxers) {\n      this.resetInitSegment(\n        initSegmentData,\n        audioCodec,\n        videoCodec,\n        duration,\n        decryptdata\n      );\n    }\n\n    if (discontinuity || initSegmentChange || resetMuxers) {\n      this.resetInitialTimestamp(defaultInitPts);\n    }\n\n    if (!contiguous) {\n      this.resetContiguity();\n    }\n\n    const result = this.transmux(\n      uintData,\n      keyData,\n      timeOffset,\n      accurateTimeOffset,\n      chunkMeta\n    );\n    const currentState = this.currentTransmuxState;\n\n    currentState.contiguous = true;\n    currentState.discontinuity = false;\n    currentState.trackSwitch = false;\n\n    stats.executeEnd = now();\n    return result;\n  }\n\n  // Due to data caching, flush calls can produce more than one TransmuxerResult (hence the Array type)\n  flush(\n    chunkMeta: ChunkMetadata\n  ): TransmuxerResult[] | Promise<TransmuxerResult[]> {\n    const stats = chunkMeta.transmuxing;\n    stats.executeStart = now();\n\n    const { decrypter, currentTransmuxState, decryptionPromise } = this;\n\n    if (decryptionPromise) {\n      // Upon resolution, the decryption promise calls push() and returns its TransmuxerResult up the stack. Therefore\n      // only flushing is required for async decryption\n      return decryptionPromise.then(() => {\n        return this.flush(chunkMeta);\n      });\n    }\n\n    const transmuxResults: TransmuxerResult[] = [];\n    const { timeOffset } = currentTransmuxState;\n    if (decrypter) {\n      // The decrypter may have data cached, which needs to be demuxed. In this case we'll have two TransmuxResults\n      // This happens in the case that we receive only 1 push call for a segment (either for non-progressive downloads,\n      // or for progressive downloads with small segments)\n      const decryptedData = decrypter.flush();\n      if (decryptedData) {\n        // Push always returns a TransmuxerResult if decryptdata is null\n        transmuxResults.push(\n          this.push(decryptedData, null, chunkMeta) as TransmuxerResult\n        );\n      }\n    }\n\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      // If probing failed, then Hls.js has been given content its not able to handle\n      stats.executeEnd = now();\n      return [emptyResult(chunkMeta)];\n    }\n\n    const demuxResultOrPromise = demuxer.flush(timeOffset);\n    if (isPromise(demuxResultOrPromise)) {\n      // Decrypt final SAMPLE-AES samples\n      return demuxResultOrPromise.then((demuxResult) => {\n        this.flushRemux(transmuxResults, demuxResult, chunkMeta);\n        return transmuxResults;\n      });\n    }\n\n    this.flushRemux(transmuxResults, demuxResultOrPromise, chunkMeta);\n    return transmuxResults;\n  }\n\n  private flushRemux(\n    transmuxResults: TransmuxerResult[],\n    demuxResult: DemuxerResult,\n    chunkMeta: ChunkMetadata\n  ) {\n    const { audioTrack, videoTrack, id3Track, textTrack } = demuxResult;\n    const { accurateTimeOffset, timeOffset } = this.currentTransmuxState;\n    logger.log(\n      `[transmuxer.ts]: Flushed fragment ${chunkMeta.sn}${\n        chunkMeta.part > -1 ? ' p: ' + chunkMeta.part : ''\n      } of level ${chunkMeta.level}`\n    );\n    const remuxResult = this.remuxer!.remux(\n      audioTrack,\n      videoTrack,\n      id3Track,\n      textTrack,\n      timeOffset,\n      accurateTimeOffset,\n      true,\n      this.id\n    );\n    transmuxResults.push({\n      remuxResult,\n      chunkMeta,\n    });\n\n    chunkMeta.transmuxing.executeEnd = now();\n  }\n\n  resetInitialTimestamp(defaultInitPts: RationalTimestamp | null) {\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      return;\n    }\n    demuxer.resetTimeStamp(defaultInitPts);\n    remuxer.resetTimeStamp(defaultInitPts);\n  }\n\n  resetContiguity() {\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      return;\n    }\n    demuxer.resetContiguity();\n    remuxer.resetNextTimestamp();\n  }\n\n  resetInitSegment(\n    initSegmentData: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n    decryptdata: DecryptData | null\n  ) {\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      return;\n    }\n    demuxer.resetInitSegment(\n      initSegmentData,\n      audioCodec,\n      videoCodec,\n      trackDuration\n    );\n    remuxer.resetInitSegment(\n      initSegmentData,\n      audioCodec,\n      videoCodec,\n      decryptdata\n    );\n  }\n\n  destroy(): void {\n    if (this.demuxer) {\n      this.demuxer.destroy();\n      this.demuxer = undefined;\n    }\n    if (this.remuxer) {\n      this.remuxer.destroy();\n      this.remuxer = undefined;\n    }\n  }\n\n  private transmux(\n    data: Uint8Array,\n    keyData: KeyData | null,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    chunkMeta: ChunkMetadata\n  ): TransmuxerResult | Promise<TransmuxerResult> {\n    let result: TransmuxerResult | Promise<TransmuxerResult>;\n    if (keyData && keyData.method === 'SAMPLE-AES') {\n      result = this.transmuxSampleAes(\n        data,\n        keyData,\n        timeOffset,\n        accurateTimeOffset,\n        chunkMeta\n      );\n    } else {\n      result = this.transmuxUnencrypted(\n        data,\n        timeOffset,\n        accurateTimeOffset,\n        chunkMeta\n      );\n    }\n    return result;\n  }\n\n  private transmuxUnencrypted(\n    data: Uint8Array,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    chunkMeta: ChunkMetadata\n  ): TransmuxerResult {\n    const { audioTrack, videoTrack, id3Track, textTrack } = (\n      this.demuxer as Demuxer\n    ).demux(data, timeOffset, false, !this.config.progressive);\n    const remuxResult = this.remuxer!.remux(\n      audioTrack,\n      videoTrack,\n      id3Track,\n      textTrack,\n      timeOffset,\n      accurateTimeOffset,\n      false,\n      this.id\n    );\n    return {\n      remuxResult,\n      chunkMeta,\n    };\n  }\n\n  private transmuxSampleAes(\n    data: Uint8Array,\n    decryptData: KeyData,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    chunkMeta: ChunkMetadata\n  ): Promise<TransmuxerResult> {\n    return (this.demuxer as Demuxer)\n      .demuxSampleAes(data, decryptData, timeOffset)\n      .then((demuxResult) => {\n        const remuxResult = this.remuxer!.remux(\n          demuxResult.audioTrack,\n          demuxResult.videoTrack,\n          demuxResult.id3Track,\n          demuxResult.textTrack,\n          timeOffset,\n          accurateTimeOffset,\n          false,\n          this.id\n        );\n        return {\n          remuxResult,\n          chunkMeta,\n        };\n      });\n  }\n\n  private configureTransmuxer(data: Uint8Array): void | Error {\n    const { config, observer, typeSupported, vendor } = this;\n    // probe for content type\n    let mux;\n    for (let i = 0, len = muxConfig.length; i < len; i++) {\n      if (muxConfig[i].demux.probe(data)) {\n        mux = muxConfig[i];\n        break;\n      }\n    }\n    if (!mux) {\n      return new Error('Failed to find demuxer by probing fragment data');\n    }\n    // so let's check that current remuxer and demuxer are still valid\n    const demuxer = this.demuxer;\n    const remuxer = this.remuxer;\n    const Remuxer: MuxConfig['remux'] = mux.remux;\n    const Demuxer: MuxConfig['demux'] = mux.demux;\n    if (!remuxer || !(remuxer instanceof Remuxer)) {\n      this.remuxer = new Remuxer(observer, config, typeSupported, vendor);\n    }\n    if (!demuxer || !(demuxer instanceof Demuxer)) {\n      this.demuxer = new Demuxer(observer, config, typeSupported);\n      this.probe = Demuxer.probe;\n    }\n  }\n\n  private needsProbing(discontinuity: boolean, trackSwitch: boolean): boolean {\n    // in case of continuity change, or track switch\n    // we might switch from content type (AAC container to TS container, or TS to fmp4 for example)\n    return !this.demuxer || !this.remuxer || discontinuity || trackSwitch;\n  }\n\n  private getDecrypter(): Decrypter {\n    let decrypter = this.decrypter;\n    if (!decrypter) {\n      decrypter = this.decrypter = new Decrypter(this.config);\n    }\n    return decrypter;\n  }\n}\n\nfunction getEncryptionType(\n  data: Uint8Array,\n  decryptData: DecryptData | null\n): KeyData | null {\n  let encryptionType: KeyData | null = null;\n  if (\n    data.byteLength > 0 &&\n    decryptData != null &&\n    decryptData.key != null &&\n    decryptData.iv !== null &&\n    decryptData.method != null\n  ) {\n    encryptionType = decryptData as KeyData;\n  }\n  return encryptionType;\n}\n\nconst emptyResult = (chunkMeta): TransmuxerResult => ({\n  remuxResult: {},\n  chunkMeta,\n});\n\nexport function isPromise<T>(p: Promise<T> | any): p is Promise<T> {\n  return 'then' in p && p.then instanceof Function;\n}\n\nexport class TransmuxConfig {\n  public audioCodec?: string;\n  public videoCodec?: string;\n  public initSegmentData?: Uint8Array;\n  public duration: number;\n  public defaultInitPts: RationalTimestamp | null;\n\n  constructor(\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    initSegmentData: Uint8Array | undefined,\n    duration: number,\n    defaultInitPts?: RationalTimestamp\n  ) {\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this.initSegmentData = initSegmentData;\n    this.duration = duration;\n    this.defaultInitPts = defaultInitPts || null;\n  }\n}\n\nexport class TransmuxState {\n  public discontinuity: boolean;\n  public contiguous: boolean;\n  public accurateTimeOffset: boolean;\n  public trackSwitch: boolean;\n  public timeOffset: number;\n  public initSegmentChange: boolean;\n\n  constructor(\n    discontinuity: boolean,\n    contiguous: boolean,\n    accurateTimeOffset: boolean,\n    trackSwitch: boolean,\n    timeOffset: number,\n    initSegmentChange: boolean\n  ) {\n    this.discontinuity = discontinuity;\n    this.contiguous = contiguous;\n    this.accurateTimeOffset = accurateTimeOffset;\n    this.trackSwitch = trackSwitch;\n    this.timeOffset = timeOffset;\n    this.initSegmentChange = initSegmentChange;\n  }\n}\n","import {\n  flushTextTrackMetadataCueSamples,\n  flushTextTrackUserdataCueSamples,\n} from './mp4-remuxer';\nimport {\n  InitData,\n  InitDataTrack,\n  patchEncyptionData,\n} from '../utils/mp4-tools';\nimport {\n  getDuration,\n  getStartDTS,\n  offsetStartDTS,\n  parseInitSegment,\n} from '../utils/mp4-tools';\nimport { ElementaryStreamTypes } from '../loader/fragment';\nimport { logger } from '../utils/logger';\nimport type { TrackSet } from '../types/track';\nimport type {\n  InitSegmentData,\n  RemuxedTrack,\n  Remuxer,\n  RemuxerResult,\n} from '../types/remuxer';\nimport type {\n  DemuxedAudioTrack,\n  DemuxedMetadataTrack,\n  DemuxedUserdataTrack,\n  PassthroughTrack,\n} from '../types/demuxer';\nimport type { DecryptData } from '../loader/level-key';\nimport type { RationalTimestamp } from '../utils/timescale-conversion';\n\nclass PassThroughRemuxer implements Remuxer {\n  private emitInitSegment: boolean = false;\n  private audioCodec?: string;\n  private videoCodec?: string;\n  private initData?: InitData;\n  private initPTS: RationalTimestamp | null = null;\n  private initTracks?: TrackSet;\n  private lastEndTime: number | null = null;\n\n  public destroy() {}\n\n  public resetTimeStamp(defaultInitPTS: RationalTimestamp | null) {\n    this.initPTS = defaultInitPTS;\n    this.lastEndTime = null;\n  }\n\n  public resetNextTimestamp() {\n    this.lastEndTime = null;\n  }\n\n  public resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    decryptdata: DecryptData | null\n  ) {\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this.generateInitSegment(patchEncyptionData(initSegment, decryptdata));\n    this.emitInitSegment = true;\n  }\n\n  private generateInitSegment(initSegment: Uint8Array | undefined): void {\n    let { audioCodec, videoCodec } = this;\n    if (!initSegment?.byteLength) {\n      this.initTracks = undefined;\n      this.initData = undefined;\n      return;\n    }\n    const initData = (this.initData = parseInitSegment(initSegment));\n\n    // Get codec from initSegment or fallback to default\n    if (!audioCodec) {\n      audioCodec = getParsedTrackCodec(\n        initData.audio,\n        ElementaryStreamTypes.AUDIO\n      );\n    }\n\n    if (!videoCodec) {\n      videoCodec = getParsedTrackCodec(\n        initData.video,\n        ElementaryStreamTypes.VIDEO\n      );\n    }\n\n    const tracks: TrackSet = {};\n    if (initData.audio && initData.video) {\n      tracks.audiovideo = {\n        container: 'video/mp4',\n        codec: audioCodec + ',' + videoCodec,\n        initSegment,\n        id: 'main',\n      };\n    } else if (initData.audio) {\n      tracks.audio = {\n        container: 'audio/mp4',\n        codec: audioCodec,\n        initSegment,\n        id: 'audio',\n      };\n    } else if (initData.video) {\n      tracks.video = {\n        container: 'video/mp4',\n        codec: videoCodec,\n        initSegment,\n        id: 'main',\n      };\n    } else {\n      logger.warn(\n        '[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.'\n      );\n    }\n    this.initTracks = tracks;\n  }\n\n  public remux(\n    audioTrack: DemuxedAudioTrack,\n    videoTrack: PassthroughTrack,\n    id3Track: DemuxedMetadataTrack,\n    textTrack: DemuxedUserdataTrack,\n    timeOffset: number,\n    accurateTimeOffset: boolean\n  ): RemuxerResult {\n    let { initPTS, lastEndTime } = this;\n    const result: RemuxerResult = {\n      audio: undefined,\n      video: undefined,\n      text: textTrack,\n      id3: id3Track,\n      initSegment: undefined,\n    };\n\n    // If we haven't yet set a lastEndDTS, or it was reset, set it to the provided timeOffset. We want to use the\n    // lastEndDTS over timeOffset whenever possible; during progressive playback, the media source will not update\n    // the media duration (which is what timeOffset is provided as) before we need to process the next chunk.\n    if (!Number.isFinite(lastEndTime!)) {\n      lastEndTime = this.lastEndTime = timeOffset || 0;\n    }\n\n    // The binary segment data is added to the videoTrack in the mp4demuxer. We don't check to see if the data is only\n    // audio or video (or both); adding it to video was an arbitrary choice.\n    const data = videoTrack.samples;\n    if (!data?.length) {\n      return result;\n    }\n\n    const initSegment: InitSegmentData = {\n      initPTS: undefined,\n      timescale: 1,\n    };\n    let initData = this.initData;\n    if (!initData?.length) {\n      this.generateInitSegment(data);\n      initData = this.initData;\n    }\n    if (!initData?.length) {\n      // We can't remux if the initSegment could not be generated\n      logger.warn('[passthrough-remuxer.ts]: Failed to generate initSegment.');\n      return result;\n    }\n    if (this.emitInitSegment) {\n      initSegment.tracks = this.initTracks as TrackSet;\n      this.emitInitSegment = false;\n    }\n\n    const startDTS = getStartDTS(initData, data);\n    const decodeTime = startDTS === null ? timeOffset : startDTS;\n    if (\n      isInvalidInitPts(initPTS, decodeTime, timeOffset) ||\n      (initSegment.timescale !== initPTS.timescale && accurateTimeOffset)\n    ) {\n      initSegment.initPTS = decodeTime - timeOffset;\n      this.initPTS = initPTS = {\n        baseTime: initSegment.initPTS,\n        timescale: 1,\n      };\n    }\n\n    const duration = getDuration(data, initData);\n    const startTime = audioTrack\n      ? decodeTime - initPTS.baseTime / initPTS.timescale\n      : (lastEndTime as number);\n    const endTime = startTime + duration;\n    offsetStartDTS(initData, data, initPTS.baseTime / initPTS.timescale);\n\n    if (duration > 0) {\n      this.lastEndTime = endTime;\n    } else {\n      logger.warn('Duration parsed from mp4 should be greater than zero');\n      this.resetNextTimestamp();\n    }\n\n    const hasAudio = !!initData.audio;\n    const hasVideo = !!initData.video;\n\n    let type: any = '';\n    if (hasAudio) {\n      type += 'audio';\n    }\n\n    if (hasVideo) {\n      type += 'video';\n    }\n\n    const track: RemuxedTrack = {\n      data1: data,\n      startPTS: startTime,\n      startDTS: startTime,\n      endPTS: endTime,\n      endDTS: endTime,\n      type,\n      hasAudio,\n      hasVideo,\n      nb: 1,\n      dropped: 0,\n    };\n\n    result.audio = track.type === 'audio' ? track : undefined;\n    result.video = track.type !== 'audio' ? track : undefined;\n    result.initSegment = initSegment;\n    result.id3 = flushTextTrackMetadataCueSamples(\n      id3Track,\n      timeOffset,\n      initPTS,\n      initPTS\n    );\n\n    if (textTrack.samples.length) {\n      result.text = flushTextTrackUserdataCueSamples(\n        textTrack,\n        timeOffset,\n        initPTS\n      );\n    }\n\n    return result;\n  }\n}\n\nfunction isInvalidInitPts(\n  initPTS: RationalTimestamp | null,\n  startDTS: number,\n  timeOffset: number\n): initPTS is null {\n  if (initPTS === null) {\n    return true;\n  }\n  // InitPTS is invalid when it would cause start time to be negative, or distance from time offset to be more than 1 second\n  const startTime = startDTS - initPTS.baseTime / initPTS.timescale;\n  return startTime < 0 && Math.abs(startTime - timeOffset) > 1;\n}\n\nfunction getParsedTrackCodec(\n  track: InitDataTrack | undefined,\n  type: ElementaryStreamTypes.AUDIO | ElementaryStreamTypes.VIDEO\n): string {\n  const parsedCodec = track?.codec;\n  if (parsedCodec && parsedCodec.length > 4) {\n    return parsedCodec;\n  }\n  // Since mp4-tools cannot parse full codec string (see 'TODO: Parse codec details'... in mp4-tools)\n  // Provide defaults based on codec type\n  // This allows for some playback of some fmp4 playlists without CODECS defined in manifest\n  if (parsedCodec === 'hvc1' || parsedCodec === 'hev1') {\n    return 'hvc1.1.c.L120.90';\n  }\n  if (parsedCodec === 'av01') {\n    return 'av01.0.04M.08';\n  }\n  if (parsedCodec === 'avc1' || type === ElementaryStreamTypes.VIDEO) {\n    return 'avc1.42e01e';\n  }\n  return 'mp4a.40.5';\n}\nexport default PassThroughRemuxer;\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import Transmuxer, { isPromise } from '../demux/transmuxer';\nimport { Events } from '../events';\nimport { ILogFunction, enableLogs, logger } from '../utils/logger';\nimport { EventEmitter } from 'eventemitter3';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport type { RemuxedTrack, RemuxerResult } from '../types/remuxer';\nimport type { TransmuxerResult, ChunkMetadata } from '../types/transmuxer';\n\nif (typeof __IN_WORKER__ !== 'undefined' && __IN_WORKER__) {\n  startWorker(self);\n}\n\nfunction startWorker(self) {\n  const observer = new EventEmitter();\n  const forwardMessage = (ev, data) => {\n    self.postMessage({ event: ev, data: data });\n  };\n\n  // forward events to main thread\n  observer.on(Events.FRAG_DECRYPTED, forwardMessage);\n  observer.on(Events.ERROR, forwardMessage);\n\n  // forward logger events to main thread\n  const forwardWorkerLogs = () => {\n    for (const logFn in logger) {\n      const func: ILogFunction = (message?) => {\n        forwardMessage('workerLog', {\n          logType: logFn,\n          message,\n        });\n      };\n\n      logger[logFn] = func;\n    }\n  };\n\n  self.addEventListener('message', (ev) => {\n    const data = ev.data;\n    switch (data.cmd) {\n      case 'init': {\n        const config = JSON.parse(data.config);\n        self.transmuxer = new Transmuxer(\n          observer,\n          data.typeSupported,\n          config,\n          data.vendor,\n          data.id\n        );\n        enableLogs(config.debug, data.id);\n        forwardWorkerLogs();\n        forwardMessage('init', null);\n        break;\n      }\n      case 'configure': {\n        self.transmuxer.configure(data.config);\n        break;\n      }\n      case 'demux': {\n        const transmuxResult: TransmuxerResult | Promise<TransmuxerResult> =\n          self.transmuxer.push(\n            data.data,\n            data.decryptdata,\n            data.chunkMeta,\n            data.state\n          );\n        if (isPromise(transmuxResult)) {\n          self.transmuxer.async = true;\n          transmuxResult\n            .then((data) => {\n              emitTransmuxComplete(self, data);\n            })\n            .catch((error) => {\n              forwardMessage(Events.ERROR, {\n                type: ErrorTypes.MEDIA_ERROR,\n                details: ErrorDetails.FRAG_PARSING_ERROR,\n                chunkMeta: data.chunkMeta,\n                fatal: false,\n                error,\n                err: error,\n                reason: `transmuxer-worker push error`,\n              });\n            });\n        } else {\n          self.transmuxer.async = false;\n          emitTransmuxComplete(self, transmuxResult);\n        }\n        break;\n      }\n      case 'flush': {\n        const id = data.chunkMeta;\n        let transmuxResult = self.transmuxer.flush(id);\n        const asyncFlush = isPromise(transmuxResult);\n        if (asyncFlush || self.transmuxer.async) {\n          if (!isPromise(transmuxResult)) {\n            transmuxResult = Promise.resolve(transmuxResult);\n          }\n          transmuxResult\n            .then((results: Array<TransmuxerResult>) => {\n              handleFlushResult(self, results as Array<TransmuxerResult>, id);\n            })\n            .catch((error) => {\n              forwardMessage(Events.ERROR, {\n                type: ErrorTypes.MEDIA_ERROR,\n                details: ErrorDetails.FRAG_PARSING_ERROR,\n                chunkMeta: data.chunkMeta,\n                fatal: false,\n                error,\n                err: error,\n                reason: `transmuxer-worker flush error`,\n              });\n            });\n        } else {\n          handleFlushResult(\n            self,\n            transmuxResult as Array<TransmuxerResult>,\n            id\n          );\n        }\n        break;\n      }\n      default:\n        break;\n    }\n  });\n}\n\nfunction emitTransmuxComplete(\n  self: any,\n  transmuxResult: TransmuxerResult\n): boolean {\n  if (isEmptyResult(transmuxResult.remuxResult)) {\n    return false;\n  }\n  const transferable: Array<ArrayBuffer> = [];\n  const { audio, video } = transmuxResult.remuxResult;\n  if (audio) {\n    addToTransferable(transferable, audio);\n  }\n  if (video) {\n    addToTransferable(transferable, video);\n  }\n  self.postMessage(\n    { event: 'transmuxComplete', data: transmuxResult },\n    transferable\n  );\n  return true;\n}\n\n// Converts data to a transferable object https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast)\n// in order to minimize message passing overhead\nfunction addToTransferable(\n  transferable: Array<ArrayBuffer>,\n  track: RemuxedTrack\n) {\n  if (track.data1) {\n    transferable.push(track.data1.buffer);\n  }\n  if (track.data2) {\n    transferable.push(track.data2.buffer);\n  }\n}\n\nfunction handleFlushResult(\n  self: any,\n  results: Array<TransmuxerResult>,\n  chunkMeta: ChunkMetadata\n) {\n  const parsed = results.reduce(\n    (parsed, result) => emitTransmuxComplete(self, result) || parsed,\n    false\n  );\n  if (!parsed) {\n    // Emit at least one \"transmuxComplete\" message even if media is not found to update stream-controller state to PARSING\n    self.postMessage({ event: 'transmuxComplete', data: results[0] });\n  }\n  self.postMessage({ event: 'flush', data: chunkMeta });\n}\n\nfunction isEmptyResult(remuxResult: RemuxerResult) {\n  return (\n    !remuxResult.audio &&\n    !remuxResult.video &&\n    !remuxResult.text &&\n    !remuxResult.id3 &&\n    !remuxResult.initSegment\n  );\n}\n"],"names":["Events","ErrorTypes","ErrorDetails","AESCrypto","subtle","iv","this","aesIV","prototype","decrypt","data","key","name","FastAESKey","expandKey","importKey","sliceUint8","array","start","end","Uint8Array","slice","Array","call","AESDecryptor","rcon","subMix","Uint32Array","invSubMix","sBox","invSBox","ksRows","keySize","keySchedule","invKeySchedule","initTable","_proto","uint8ArrayToUint32Array_","arrayBuffer","view","DataView","newArray","i","getUint32","subMix0","subMix1","subMix2","subMix3","invSubMix0","invSubMix1","invSubMix2","invSubMix3","d","x","xi","sx","x2","x4","x8","t","keyBuffer","sameKey","offset","length","Error","ksRow","invKsRow","prev","sbox","networkToHostOrderSwap","word","inputArrayBuffer","t0","t1","t2","t3","s0","s1","s2","s3","inputWords0","inputWords1","inputWords2","inputWords3","nRounds","invSBOX","initVector","initVector0","initVector1","initVector2","initVector3","inputInt32","Int32Array","outputInt32","swapWord","buffer","noop","fakeLogger","trace","debug","log","warn","info","error","exportedLogger","consolePrintFn","type","func","self","console","bind","enableLogs","debugConfig","id","_len","arguments","functions","_key","forEach","exportLoggerFunctions","e","logger","isFiniteNumber","Number","isFinite","value","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","buildAbsoluteURL","baseURL","relativeURL","opts","trim","alwaysNormalize","basePartsForNormalise","parseURL","path","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","pathParts","exec","builtParts","params","query","fragment","baseURLPath","newPath","substring","lastIndexOf","url","parts","split","reverse","join","replace","exports","decoder","ElementaryStreamTypes","isHeader","isFooter","getID3Data","front","readSize","subarray","size","canParse","isTimeStampFrame","frame","getFrameData","String","fromCharCode","getID3Frames","id3Data","frames","frameData","decodeFrame","push","decodePrivFrame","decodeURLFrame","decodeTextFrame","owner","utf8ArrayToStr","privateData","index","description","text","readTimeStamp","timeStampFrame","byteLength","pts33Bit","timestamp","Math","round","exitOnNull","getTextDecoder","decoded","decode","idx","indexOf","c","char2","char3","len","out","TextDecoder","Hex","str","h","toString","UINT32_MAX","pow","RemuxerTrackIdConfig","video","audio","id3","bin2str","apply","readUint16","val","readUint32","readSint32","writeUint32","findBox","results","endbox","subresults","parseSegmentIndex","sidx","references","version","timescale","startByte","referencesCount","referenceIndex","referenceInfo","referenceSize","subsegmentDuration","duration","earliestPresentationTime","parseInitSegment","initSegment","result","traks","trak","tkhd","trackId","mdhd","hdlr","hdlrType","soun","vide","stsd","codec","trex","track","default","flags","patchEncyptionData","decryptdata","keyId","isCommonEncryption","sampleEntries","encBoxes","isAudio","enc","sinf","tenc","schm","parseSinf","tencKeyId","some","b","set","computeRawDurationFromSamples","trun","sampleCount","appendUint8Array","data1","data2","temp","parseSamples","timeOffset","seiSamples","videoData","samples","isHEVCFlavor","map","moof","moofOffset","byteOffset","traf","baseTime","tfdt","undefined","tfhd","tfhdFlags","defaultSampleDuration","defaultSampleSizePresent","defaultSampleSize","defaultSampleFlagsPresent","tfhdOffset","delimit","baseCodec","isHEVC","dataOffsetPresent","dataOffset","firstSampleFlagsPresent","sampleDurationPresent","sampleDuration","sampleSizePresent","sampleSize","sampleFlagsPresent","sampleCompositionOffsetsPresent","compositionOffset","trunOffset","sampleOffset","ix","naluTotalSize","naluSize","isSEIMessage","parseSEIMessageFromNALu","naluHeader","naluType","unescapedData","headerSize","pts","discardEPB","seiPtr","payloadType","payloadSize","endOfCaptions","leftOver","providerCode","userStructure","userDataType","firstByte","enabled","totalBytes","byteArray","bytes","uuidStrArray","userDataBytes","uuid","userData","EPBPositions","newLength","newData","sourceIndex","shift","Decrypter","config","_temp","_ref$removePKCS7Paddi","removePKCS7Padding","logEnabled","softwareDecrypter","fastAesKey","remainderData","currentIV","currentResult","useSoftware","enableSoftwareAES","browserCrypto","crypto","webkitSubtle","destroy","isSync","flush","reset","outputBytes","paddingBytes","getUint8","_this","Promise","resolve","reject","softwareDecrypt","decryptResult","webCryptoDecrypt","logOnce","currentChunk","getValidChunk","_this2","then","aesKey","catch","err","message","onWebCryptoError","splitPoint","msg","MetadataSchema","dummyTrack","inputTimeScale","pid","sequenceNumber","dropped","BaseAudioDemuxer","_audioTrack","_id3Track","frameIndex","cachedData","basePTS","initPTS","lastPTS","resetInitSegment","audioCodec","videoCodec","trackDuration","resetTimeStamp","deaultTimestamp","resetContiguity","appendFrame","demux","lastDataIndex","ID3","id3Track","_isFiniteNumber","initPTSFn","dts","POSITIVE_INFINITY","sample","partialData","audioTrack","videoTrack","textTrack","demuxSampleAes","keyData","_isFiniteNumber2","isHeaderPattern","getHeaderLength","getFullFrameLength","probe","headerLength","frameLength","newOffset","initTrackConfig","observer","samplerate","adtsObjectType","adtsExtensionSamplingIndex","adtsChannelConfig","userAgent","navigator","toLowerCase","manifestCodec","adtsSamplingRates","adtsSamplingIndex","test","channelCount","trigger","ERROR","MEDIA_ERROR","details","FRAG_PARSING_ERROR","fatal","reason","getAudioConfig","getFrameDuration","unit","stamp","header","parseFrameHeader","missing","max","AACDemuxer","_BaseAudioDemuxer","_inheritsLoose","container","segmentCodec","ADTS","canGetFrameLength","emsgSchemePattern","MP4Demuxer","txtTrack","captionTrack","initData","_initData$video","_initData$audio","videoSamples","progressive","segmentedData","segmentedRange","valid","remainder","moofs","last","segmentValidRange","extractID3Track","emsgs","emsgInfo","schemeIdUri","timeScale","presentationTimeDelta","presentationTime","eventDuration","leftPresentationTime","rightPresentationTime","isSafeInteger","MAX_SAFE_INTEGER","payload","parseEmsg","chromeVersion","BitratesMap","SamplingRateMap","SamplesCoefficients","BytesInSlot","parseHeader","samplesPerFrame","sampleRate","mpegVersion","mpegLayer","bitRateIndex","sampleRateIndex","paddingBit","channelMode","bitRate","sampleCoefficient","bytesInSlot","floor","match","parseInt","ExpGolomb","bytesAvailable","bitsAvailable","loadWord","position","workingBytes","availableBytes","min","skipBits","count","skipBytes","readBits","bits","valu","skipLZ","leadingZeroCount","skipUEG","skipEG","readUEG","clz","readEG","readBoolean","readUByte","readUShort","readUInt","skipScalingList","lastScale","nextScale","j","readSPS","numRefFramesInPicOrderCntCycle","scalingListCount","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","profileIdc","chromaFormatIdc","picOrderCntType","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","pixelRatio","width","ceil","height","readSliceType","SampleAesDecrypter","decrypter","decryptBuffer","encryptedData","decryptAacSample","sampleIndex","callback","curUnit","encryptedBuffer","decryptedBuffer","decryptedData","decryptAacSamples","getAvcEncryptedData","decodedData","encryptedDataLen","Int8Array","outputPos","inputPos","getAvcDecryptedUnit","uint8DecryptedData","decryptAvcSample","unitIndex","decryptAvcSamples","curUnits","units","PACKET_LENGTH","TSDemuxer","typeSupported","sampleAes","pmtParsed","_duration","_pmtId","_avcTrack","_txtTrack","aacOverFlow","avcSample","syncOffset","scanwindow","foundPat","parsePID","createTrack","pesData","isSampleAes","pes","avcId","avcData","audioId","id3Id","audioData","unknownPID","pmtId","tsPacketErrors","stt","parsePES","parseAVCPES","parseAACPES","parseMPEGPES","parseID3PES","parsePAT","parsedPIDs","parsePMT","avc","emit","demuxResult","extractRemainingSamples","parseAVCNALu","spsfound","audFound","pushAccessUnit","createAVCSample","sliceType","sps","codecarray","codecstring","pps","getLastNalUnit","_avcSample","lastUnit","overflow","state","naluState","lastState","lastUnitStart","lastUnitType","tmp","startOffset","frameMissingBytes","sampleLength","frameOverflowBytes","recoverable","levelRetry","frameDuration","MpegAudio","id3Sample","_extends","tableEnd","mpeg","mp3","stream","frag","pesLen","pesHdrLen","pesPts","pesDts","splice","pesFlags","payloadStartOffset","dataLen","avcTrack","nbSamples","lastSample","MP3Demuxer","AAC","getSilentFrame","MP4","init","types","avc1","avcC","btrt","dinf","dref","esds","ftyp","mdat","mdia","mfhd","minf","moov","mp4a","mvex","mvhd","pasp","sdtp","stbl","stco","stsc","stsz","stts","vmhd","smhd","hasOwnProperty","charCodeAt","videoHdlr","audioHdlr","HDLR_TYPES","STTS","STSC","STCO","STSZ","VMHD","SMHD","STSD","majorBrand","avc1Brand","minorVersion","FTYP","box","DINF","upperWordDuration","lowerWordDuration","sn","baseMediaDecodeTime","tracks","boxes","concat","dependsOn","isDependedOn","hasRedundancy","avcc","hSpacing","vSpacing","configlen","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","cts","arraylen","isLeading","paddingValue","isNonSync","degradPrio","movie","PlaylistLevelType","toMsFromMpegTsClock","destScale","srcBase","toTimescaleFromBase","safariWebkitVersion","MP4Remuxer","vendor","ISGenerated","_initPTS","_initDTS","nextAvcDts","nextAudioPts","videoSampleDuration","isAudioContiguous","isVideoContiguous","defaultTimeStamp","resetNextTimestamp","getVideoStartPts","rolloverDetected","startPTS","reduce","minPTS","delta","normalizePts","remux","accurateTimeOffset","playlistType","independent","audioTimeOffset","videoTimeOffset","hasAudio","hasVideo","enoughAudioSamples","enoughVideoSamples","generateIS","firstKeyFramePTS","firstKeyFrameIndex","findKeyframeIndex","forceKeyFrameOnDiscontinuity","audiovideoTimestampDelta","remuxAudio","audioTrackLength","endPTS","remuxVideo","firstKeyFrame","flushTextTrackMetadataCueSamples","flushTextTrackUserdataCueSamples","initDTS","audioSamples","computePTSDTS","Infinity","metadata","Object","keys","contiguous","firstDTS","lastDTS","inputSamples","outputSamples","mp4SampleDuration","maxPTS","NEGATIVE_INFINITY","sortSamples","initTime","sort","a","deltadts","deltapts","inputDuration","averageSampleDuration","foundHole","foundOverlap","firstPTS","nbNalu","naluLen","nbUnits","sampleLen","mdatSize","MUX_ERROR","REMUX_ALLOC_ERROR","setUint32","stretchedLastFrame","minDtsDelta","minPtsDelta","maxDtsDelta","maxPtsDelta","avcSampleUnits","mp4SampleLength","unitData","unitDataLen","ptsDelta","lastFrameDuration","stretchShortVideoTrack","gapTolerance","maxBufferHole","deltaToFrameEnd","compositionTimeOffset","Mp4Sample","nextDts","nextPts","startDTS","endDTS","nb","scaleFactor","inputSampleDuration","rawMPEG","alignedWithVideo","timeOffsetMpegTS","abs","filter","maxAudioFramesDrift","toFixed","newStamp","fillFrame","audioSample","unitLen","remuxEmptyAudio","init90kHz","silentFrame","reference","now","isKeyframe","Mp4SampleFlags","PassThroughRemuxer","emitInitSegment","initTracks","lastEndTime","defaultInitPTS","generateInitSegment","getParsedTrackCodec","audiovideo","_initData","_initData2","fmp4","startTime","getStartDTS","decodeTime","isInvalidInitPts","rawDuration","videoDuration","audioDuration","trafs","trackDefault","truns","sidxDuration","sidxs","dur","ref","getDuration","endTime","upper","lower","offsetStartDTS","parsedCodec","performance","Date","muxConfig","Transmuxer","async","demuxer","remuxer","decryptionPromise","transmuxConfig","currentTransmuxState","configure","chunkMeta","stats","transmuxing","executeStart","uintData","_ref","discontinuity","trackSwitch","initSegmentChange","defaultInitPts","initSegmentData","decryptData","encryptionType","method","getEncryptionType","getDecrypter","part","executeEnd","emptyResult","resetMuxers","needsProbing","configureTransmuxer","resetInitialTimestamp","transmux","currentState","transmuxResults","demuxResultOrPromise","isPromise","flushRemux","_this$currentTransmux","level","remuxResult","transmuxSampleAes","transmuxUnencrypted","_demux","_this3","mux","Remuxer","Demuxer","p","Function","has","prefix","EE","fn","context","once","addListener","emitter","event","TypeError","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","create","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","l","ee","listenerCount","a1","a2","a3","a4","a5","args","removeListener","on","removeAllListeners","off","prefixed","module","emitTransmuxComplete","transmuxResult","transferable","_transmuxResult$remux","addToTransferable","postMessage","handleFlushResult","parsed","forwardMessage","ev","FRAG_DECRYPTED","forwardWorkerLogs","_loop","logFn","logType","addEventListener","cmd","JSON","parse","transmuxer","startWorker"],"mappings":"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NC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNtc,KAAM,GACNuc,KAAM,GACNC,KAAM,GACN/Z,KAAM,GACNE,KAAM,GACNJ,KAAM,GACN/C,KAAM,GACN+B,KAAM,GACNrB,KAAM,GACNT,KAAM,GACNgd,KAAM,GACNC,KAAM,IAIE1B,EAAIE,MACRF,EAAIE,MAAMyB,eAAenqB,KAC3BwoB,EAAIE,MAAM1oB,GAAK,CACbA,EAAEoqB,WAAW,GACbpqB,EAAEoqB,WAAW,GACbpqB,EAAEoqB,WAAW,GACbpqB,EAAEoqB,WAAW,KAKnB,IAAMC,EAAY,IAAI3rB,WAAW,CAC/B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IAGI4rB,EAAY,IAAI5rB,WAAW,CAC/B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IAGF8pB,EAAI+B,WAAa,CACftf,MAAOof,EACPnf,MAAOof,GAGT,IAAMvB,EAAO,IAAIrqB,WAAW,CAC1B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,GACA,EACA,EACA,EACA,IAGImrB,EAAO,IAAInrB,WAAW,CAC1B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAGF8pB,EAAIgC,KAAOhC,EAAIiC,KAAOjC,EAAIkC,KAAOb,EAEjCrB,EAAImC,KAAO,IAAIjsB,WAAW,CACxB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEF8pB,EAAIoC,KAAO,IAAIlsB,WAAW,CACxB,EACA,EACA,EACA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AAInd,KAAW,IAAN0B,GAETyb,EAAMA,EAAI2F,OAAO/sB,MAAMd,UAAUa,MAAME,KAAKb,IAG9C,IAAM+tB,EAAOvD,EAAI2C,IACf3C,EAAIE,MAAME,KACV,IAAIlqB,WACF,CACE,EACAmnB,EAAI,GACJA,EAAI,GACJA,EAAI,GACJ,IACA,IAAOlY,EAAMkY,IAAIxkB,QAEhBsqB,OAAO9F,GACP8F,OAAO,CACNhe,EAAMqY,IAAI3kB,SAEXsqB,OAAO3F,KAGR9E,EAAQvT,EAAMuT,MACdE,EAASzT,EAAMyT,OACf4K,EAAWre,EAAMsT,WAAW,GAC5BgL,EAAWte,EAAMsT,WAAW,GAElC,OAAOuH,EAAI2C,IACT3C,EAAIE,MAAMC,KACV,IAAIjqB,WAAW,CACb,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACCwiB,GAAS,EAAK,IACP,IAARA,EACCE,GAAU,EAAK,IACP,IAATA,EACA,EACA,GACA,EACA,EACA,EACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,GACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,KAEF2K,EACAvD,EAAI2C,IACF3C,EAAIE,MAAMG,KACV,IAAInqB,WAAW,CACb,EACA,GACA,IACA,IACA,EACA,GACA,IACA,IACA,EACA,GACA,IACA,OAGJ8pB,EAAI2C,IACF3C,EAAIE,MAAMgB,KACV,IAAIhrB,WAAW,CACbstB,GAAY,GACXA,GAAY,GAAM,IAClBA,GAAY,EAAK,IACP,IAAXA,EACAC,GAAY,GACXA,GAAY,GAAM,IAClBA,GAAY,EAAK,IACP,IAAXA,OAIPzD,EAEMQ,KAAP,SAAYrb,GACV,IAAMue,EAAYve,EAAMgG,OAAOtS,OAC/B,OAAO,IAAI3C,WACT,CACE,EACA,EACA,EACA,EAEA,EACA,GAAOwtB,EACP,EACA,EACA,EAEA,EACA,GAAOA,EACP,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,GAECP,OAAO,CAACO,IACRP,OAAOhe,EAAMgG,QACbgY,OAAO,CAAC,EAAM,EAAM,MAE1BnD,EAEMe,KAAP,SAAY5b,GACV,IAAMwL,EAAaxL,EAAMwL,WACzB,OAAOqP,EAAI2C,IACT3C,EAAIE,MAAMa,KACV,IAAI7qB,WAAW,CACb,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACAiP,EAAMmM,aACN,EACA,GACA,EACA,EACA,EACA,EACCX,GAAc,EAAK,IACP,IAAbA,EACA,EACA,IAEFqP,EAAI2C,IAAI3C,EAAIE,MAAMM,KAAMR,EAAIQ,KAAKrb,MAEpC6a,EAEMjB,IAAP,SAAW5Z,GACT,IAAMwL,EAAaxL,EAAMwL,WACzB,OAAOqP,EAAI2C,IACT3C,EAAIE,MAAM,QACV,IAAIhqB,WAAW,CACb,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACAiP,EAAMmM,aACN,EACA,GACA,EACA,EACA,EACA,EACCX,GAAc,EAAK,IACP,IAAbA,EACA,EACA,MAGLqP,EAEMhb,KAAP,SAAYG,GACV,MAAmB,UAAfA,EAAM3J,KACmB,QAAvB2J,EAAMuN,cAA0C,QAAhBvN,EAAMF,MACjC+a,EAAI2C,IAAI3C,EAAIE,MAAMlb,KAAMgb,EAAIsC,KAAMtC,EAAIjB,IAAI5Z,IAG5C6a,EAAI2C,IAAI3C,EAAIE,MAAMlb,KAAMgb,EAAIsC,KAAMtC,EAAIe,KAAK5b,IAE3C6a,EAAI2C,IAAI3C,EAAIE,MAAMlb,KAAMgb,EAAIsC,KAAMtC,EAAIG,KAAKhb,KAErD6a,EAEMvb,KAAP,SAAYU,GACV,IAAMpJ,EAAKoJ,EAAMpJ,GACXmI,EAAWiB,EAAMjB,SAAWiB,EAAMxB,UAClC+U,EAAQvT,EAAMuT,MACdE,EAASzT,EAAMyT,OACfiK,EAAoBzhB,KAAKwU,MAAM1R,GAAY5B,GAAa,IACxDwgB,EAAoB1hB,KAAKwU,MAAM1R,GAAY5B,GAAa,IAC9D,OAAO0d,EAAI2C,IACT3C,EAAIE,MAAMzb,KACV,IAAIvO,WAAW,CACb,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACC6F,GAAM,GAAM,IACZA,GAAM,GAAM,IACZA,GAAM,EAAK,IACP,IAALA,EACA,EACA,EACA,EACA,EACA8mB,GAAqB,GACpBA,GAAqB,GAAM,IAC3BA,GAAqB,EAAK,IACP,IAApBA,EACAC,GAAqB,GACpBA,GAAqB,GAAM,IAC3BA,GAAqB,EAAK,IACP,IAApBA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,EACA,EACCpK,GAAS,EAAK,IACP,IAARA,EACA,EACA,EACCE,GAAU,EAAK,IACP,IAATA,EACA,EACA,MAGLoH,EAEMzY,KAAP,SAAYpC,EAAO6d,GACjB,IAAMW,EAAwB3D,EAAImB,KAAKhc,GACjCpJ,EAAKoJ,EAAMpJ,GACX6nB,EAA+BxiB,KAAKwU,MACxCoN,GAAuB1gB,GAAa,IAEhCuhB,EAA+BziB,KAAKwU,MACxCoN,GAAuB1gB,GAAa,IAEtC,OAAO0d,EAAI2C,IACT3C,EAAIE,MAAM3Y,KACVyY,EAAI2C,IACF3C,EAAIE,MAAMvY,KACV,IAAIzR,WAAW,CACb,EACA,EACA,EACA,EACA6F,GAAM,GACLA,GAAM,GAAM,IACZA,GAAM,EAAK,IACP,IAALA,KAGJikB,EAAI2C,IACF3C,EAAIE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","x_google_ignoreList":[8,32]}